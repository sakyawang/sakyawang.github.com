{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529403222033},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529403222033},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1529403222033},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1529403222033},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1529403222033},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1529403222033},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1529403222033},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529403222033},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1529403222033},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1529403222033},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1529403222033},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1529403222033},{"_id":"themes/next/_config.yml","hash":"2d17071efd5ec994551890dae870e8cbcc24301e","modified":1529403950304},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1529403222033},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1529403222033},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1529403222041},{"_id":"source/about/index.md","hash":"1fa3295ed03fe6e8689b4c8c04f3fcd3d8e6671b","modified":1529405698870},{"_id":"source/_posts/design-pattern-strategy.md","hash":"72c4c95c4262d340cb02843e0ed91315625701a5","modified":1529463579377},{"_id":"source/_posts/es-head.md","hash":"9d319069ff5bad61dff1c88b1a2d875316924c14","modified":1529463595561},{"_id":"source/_posts/gor-build-blog.md","hash":"b44ba1c6eb6920cae7a3699907e72aa5574132d9","modified":1529463603369},{"_id":"source/_posts/gostart.md","hash":"3d049b5e19a2b9fd7fef69d150b1a44ebc4554fc","modified":1529461190465},{"_id":"source/_posts/java-des.md","hash":"ddfa21daf94fda55670049410c07250a04f29b72","modified":1529463626624},{"_id":"source/_posts/java-proxy.md","hash":"53823a7cf05af7dfaacfa6a1072d3f0b55e7e371","modified":1529463691704},{"_id":"source/_posts/json-encode.md","hash":"9b2c3c3459d27ff014d582cd6231bdc8267e2aa5","modified":1529463707152},{"_id":"source/_posts/jsx.md","hash":"800832568eedf0f248166c541a8412fd8109c38c","modified":1529463724543},{"_id":"source/_posts/learning-plain.md","hash":"801b63ee05f036a951acc9695efef372da4ffbc1","modified":1529463746615},{"_id":"source/_posts/lvs.md","hash":"e3c9f6cebdea16e9eb0bc8fcdbca1639f103a6d8","modified":1529463762991},{"_id":"source/_posts/md-catalog.md","hash":"8a877f2646be3bd95791b01e3d0de6dc9eb4c423","modified":1529463774679},{"_id":"source/_posts/mongodb-install-config.md","hash":"492bda19ca8bb631c288152d7c2918451e471a45","modified":1529464410597},{"_id":"source/_posts/nexus.md","hash":"0aa90c5bdf7269e826ee1a2cc80a54d45088bdcb","modified":1529463806943},{"_id":"source/_posts/nginx.md","hash":"2476a2931a7e720e05381794e85a995732a3937a","modified":1529463818031},{"_id":"source/_posts/open-falcon.md","hash":"547f5e746b4de25ec341ecc021490c38b0d25b73","modified":1529463831062},{"_id":"source/_posts/protobuf-python.md","hash":"0fca028c4e00abfd75faf12f3411e3bc2dc2b167","modified":1529463845678},{"_id":"source/_posts/react-component-props.md","hash":"b9c05bf051ae47bdafbe4fc498bbfeff535fd562","modified":1529463928465},{"_id":"source/_posts/react-conditional-render.md","hash":"5b8b39af7bd62b825b6245316c2f54634a09a5b0","modified":1529463934601},{"_id":"source/_posts/react-event.md","hash":"6117d9660f01c33fe15494c084525006bf36ff10","modified":1529463906670},{"_id":"source/_posts/react-list-keys.md","hash":"071f23fef4c64318690e44ba8a69538526cdebe7","modified":1529463970113},{"_id":"source/_posts/react-lifting-state-up.md","hash":"2d11eb5fde2c999a401222526b7de7925418a89c","modified":1529464427765},{"_id":"source/_posts/react-redux.md","hash":"9228ec65f923123c016e276f231ac2b039d75ecc","modified":1529463999297},{"_id":"source/_posts/react-render.md","hash":"77301b8d26323f164b168ce4ee6f6fca28d8c68e","modified":1529464028256},{"_id":"source/_posts/react-state.md","hash":"9bcb7c4d1f3a09acebc61ba990eec617d3d79ebe","modified":1529464046408},{"_id":"source/_posts/rpc.md","hash":"1e93b883f4083a03647c255f90a82af96f42e7ee","modified":1529464065108},{"_id":"source/_posts/solid.md","hash":"71b56112c9b2f0e18b5676e8fda74c9b702137e8","modified":1529464088176},{"_id":"source/_posts/stack.md","hash":"bc7257ff67118ef8de90ad03efadc6cc7b573104","modified":1529464100116},{"_id":"source/_posts/sublime-config.md","hash":"c4519e9bbe214201e73f8161c34acc8f36a7eae3","modified":1529464109428},{"_id":"source/_posts/sublime-md-heml.md","hash":"666bc33ff0966408ac4960ff9a0a40cbdca7e7ec","modified":1529464141755},{"_id":"source/_posts/taiga-start.md","hash":"f38a3798dfb286e60ebd2744d1faf7fcbd9286a0","modified":1529464156959},{"_id":"source/_posts/travis-ci.md","hash":"9b8bd77a43bdaccb83cc5fa073461d09f18c3f74","modified":1529464177587},{"_id":"source/_posts/weixin-start.md","hash":"6363c9c8e3741745ef97e5a61cc94d697c453cf2","modified":1529464188891},{"_id":"source/_posts/window-open-post.md","hash":"0c0723550ea8c175bd278216bcaadcbfa523cc82","modified":1529464199799},{"_id":"source/categories/index.md","hash":"54ffbc47fd528381f7e18b7b2e23f87c1b6a629c","modified":1529461415247},{"_id":"source/tags/index.md","hash":"c19ee8aea3318f7a89038302a2137918503aec46","modified":1529461439247},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1529403222013},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1529403222013},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1529403206929},{"_id":"themes/next/.git/index","hash":"9b8cff8c6e00f112cb82c3f052f50d280fe752e0","modified":1529403222073},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1529403222013},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1529403222033},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1529403222033},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1529403222033},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529403222033},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1529403222033},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1529403222033},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1529403222033},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1529403222033},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1529403222033},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1529403222033},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1529403222033},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1529403222033},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1529403222033},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1529403222033},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1529403222033},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1529403222033},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1529403222033},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1529403222033},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1529403222037},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1529403222037},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1529403222037},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1529403222041},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1529403222041},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1529403222041},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1529403222041},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1529403222041},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1529403222041},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1529403222041},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1529403222041},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529403222041},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529403222073},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529403222073},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529403222073},{"_id":"source/_posts/ali-java-guide.md","hash":"f234f0318ae6c8ebb7270833c6023d4fac4085df","modified":1529464441756},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1529403206929},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1529403206929},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1529403206929},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1529403206929},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1529403206929},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1529403206929},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1529403206929},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1529403206929},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1529403206929},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1529403206929},{"_id":"themes/next/.git/logs/HEAD","hash":"2935fa9ee308bbe7c3dcbf0e11f7d06d68495a4b","modified":1529403222013},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529403222037},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529403222037},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529403222037},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1529403222037},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1529403222037},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1529403222037},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1529403222037},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1529403222037},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1529403222037},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1529403222037},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1529403222037},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1529403222037},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1529403222037},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1529403222037},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1529403222037},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1529403222037},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1529403222037},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1529403222037},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1529403222041},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1529403222041},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1529403222041},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1529403222041},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529403222041},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529403222041},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1529403222041},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1529403222041},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1529403222041},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1529403222041},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1529403222041},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1529403222041},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1529403222041},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1529403222041},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1529403222041},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1529403222045},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1529403222045},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529403222045},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529403222045},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529403222045},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529403222045},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529403222045},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529403222045},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529403222049},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529403222049},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529403222049},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529403222049},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529403222049},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529403222049},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529403222049},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529403222049},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529403222049},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529403222049},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529403222049},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529403222049},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222037},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222037},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529403222045},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1529403222013},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529403222037},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529403222037},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529403222037},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529403222037},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529403222037},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529403222037},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529403222037},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529403222037},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529403222037},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1529403222037},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529403222037},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529403222037},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529403222041},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1529403222041},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1529403222041},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529403222041},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1529403222041},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529403222041},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529403222041},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529403222045},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529403222045},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1529403222045},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1529403222045},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1529403222045},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529403222045},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1529403222045},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1529403222045},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529403222049},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529403222049},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529403222049},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529403222049},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529403222049},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529403222049},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529403222049},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529403222049},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529403222049},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529403222049},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529403222049},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529403222053},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529403222053},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1529403222053},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1529403222057},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529403222057},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1529403222057},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529403222057},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529403222065},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529403222065},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529403222065},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529403222065},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529403222065},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529403222065},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529403222069},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529403222069},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529403222069},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529403222065},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1529403222069},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1529403222069},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529403222073},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529403222073},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529403222073},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529403222065},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"2935fa9ee308bbe7c3dcbf0e11f7d06d68495a4b","modified":1529403222013},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1529403222013},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1529403222041},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529403222041},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529403222045},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529403222045},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1529403222045},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529403222049},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529403222053},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529403222057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529403222057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529403222057},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529403222069},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529403222069},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529403222057},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529403222049},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529403222065},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529403222065},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529403222073},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"2935fa9ee308bbe7c3dcbf0e11f7d06d68495a4b","modified":1529403222013},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529403222045},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529403222045},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529403222045},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529403222049},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529403222049},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529403222057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529403222057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529403222061},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529403222065},{"_id":"themes/next/.git/objects/pack/pack-88df782ce6fe81241cc1f463a32af916d4193f78.idx","hash":"bb5ce2ffd2b23aeab4e99d217116d616aeac700b","modified":1529403221925},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529403222053},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529403222069},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529403222061},{"_id":"themes/next/.git/objects/pack/pack-88df782ce6fe81241cc1f463a32af916d4193f78.pack","hash":"66da6ac57fd465b0b8f43f6be7c446eeee84eb9f","modified":1529403221921},{"_id":"public/about/index.html","hash":"3d55f60a8f738ab42682b72102b03ac2056b0930","modified":1529482108366},{"_id":"public/categories/index.html","hash":"9c1dd615a24d5bc9c42932e1c2fea9451276631b","modified":1529482108366},{"_id":"public/tags/index.html","hash":"3e4a418e627033e2c2b22953cdcc3c65ffebf3c4","modified":1529482108366},{"_id":"public/2017/05/10/nexus/index.html","hash":"5e7ed6b9dc9720c106e9051dbff8f613b790edc1","modified":1529482108366},{"_id":"public/2017/05/05/lvs/index.html","hash":"bb9dcec0e0f2ef55cc15e2e435a7f64bc4c89261","modified":1529482108367},{"_id":"public/2015/07/29/java-proxy/index.html","hash":"94a00ad0c4752d0102dffb690cbbfaac2c0c986d","modified":1529482108367},{"_id":"public/2015/07/09/window-open-post/index.html","hash":"93a523b9025fe12b2d5311f4524695acae144b00","modified":1529482108367},{"_id":"public/2015/07/08/mongodb-install-config/index.html","hash":"a4ce7687cceaa89164cfa5cae12bf95e967de932","modified":1529482108367},{"_id":"public/2015/07/08/sublime-config/index.html","hash":"98b316fc06decb7afa3a58023477acaa767ba72c","modified":1529482108367},{"_id":"public/archives/page/4/index.html","hash":"97fcad5925beb4aef85fb589a6729dd9fa5bc62b","modified":1529482108367},{"_id":"public/archives/2015/page/2/index.html","hash":"a802e9fd624b8c7ddceb1c95dbdb633605d469b2","modified":1529482108367},{"_id":"public/archives/2015/07/page/2/index.html","hash":"5e1a1a7e294208fb1eae7310abc829ac4672fc92","modified":1529482108367},{"_id":"public/archives/2017/page/2/index.html","hash":"f05f5c9bb7910fd0c89f37be7f54b5204b47aab4","modified":1529482108367},{"_id":"public/archives/2017/03/index.html","hash":"6039185b11e2c1774b668413a1ceb82800eeb8ab","modified":1529482108367},{"_id":"public/archives/2017/05/index.html","hash":"94f2c5aae62d91490f828473bd52474b30fe4701","modified":1529482108367},{"_id":"public/archives/2017/10/index.html","hash":"687aa8d14bed44dac62c67a412315170baa10ff9","modified":1529482108367},{"_id":"public/archives/2017/11/index.html","hash":"fb031ed704ace09d96a3715dd9fa3cbab3917bae","modified":1529482108367},{"_id":"public/archives/2017/12/index.html","hash":"18f47e621118fbadb6deaf9188006ed45bd07ef7","modified":1529482108368},{"_id":"public/archives/2018/index.html","hash":"737196802c84e449399c0adfaae384ce8166ea95","modified":1529482108368},{"_id":"public/archives/2018/03/index.html","hash":"66dbe3c27eca6c3d2da0dd2903e58f1e7daf1e74","modified":1529482108368},{"_id":"public/archives/2018/04/index.html","hash":"1ae7f81239c726d6e35efa1a18b5f116bba7ed7e","modified":1529482108368},{"_id":"public/archives/2018/05/index.html","hash":"fa5674680bc8ffb9b7ad9a0f1b9b138868086cf0","modified":1529482108368},{"_id":"public/categories/设计模式/index.html","hash":"1024a89e6760573a984e0e622f4eb3cc4c0f4f96","modified":1529482108368},{"_id":"public/categories/nodejs/index.html","hash":"599fe70ec20716b1da6e9844d61f10073cad4465","modified":1529482108368},{"_id":"public/categories/golang/index.html","hash":"6eea66719bad279872d256a1bbceadd4b9bfdee0","modified":1529482108368},{"_id":"public/categories/java/index.html","hash":"b04c77466c8e0f1169fd8040bfe4291bd48779ab","modified":1529482108368},{"_id":"public/categories/react/index.html","hash":"df25accc4a6089fd2fb1f198945f04409e33da3a","modified":1529482108368},{"_id":"public/categories/learn/index.html","hash":"da7f925dd337ea5b03d1aad40e42998864478794","modified":1529482108368},{"_id":"public/categories/linux/index.html","hash":"2777a16aabc274666bbe31476113866cc32679c3","modified":1529482108368},{"_id":"public/categories/mongodb/index.html","hash":"de8bfad2b6bd2ed5b3980be415d273315f9fe0e8","modified":1529482108368},{"_id":"public/categories/markdown/index.html","hash":"a3f2e5867afdd090ef61410dc2983a900dbcfbe1","modified":1529482108368},{"_id":"public/categories/nexus/index.html","hash":"b5026f8ce6b5536c66149d7f84c439759e5f8043","modified":1529482108368},{"_id":"public/categories/nginx/index.html","hash":"44c151c118fd4507f98767cd3d1c9bb329c2a1ab","modified":1529482108368},{"_id":"public/categories/devops/index.html","hash":"f4ea9abe6fd3a439e849863013f0037635de7cd5","modified":1529482108368},{"_id":"public/categories/python/index.html","hash":"368683654da5f986cb9072ed7840ae56da0fee2f","modified":1529482108368},{"_id":"public/categories/转载/index.html","hash":"1a4596cd277d3720db34d1a714d5336e6c151838","modified":1529482108368},{"_id":"public/categories/sublime/index.html","hash":"6e946b10486f2ce170fb4f3dbb2fdce5e6903df0","modified":1529482108369},{"_id":"public/categories/soft/index.html","hash":"de0898e229f71d42617df1c65ea291747cf3b367","modified":1529482108369},{"_id":"public/categories/微信公众平台/index.html","hash":"e026d21bfcfc764bf45a0b7bebe90953fcda97d3","modified":1529482108369},{"_id":"public/categories/ci/index.html","hash":"90bd4c2ba6d9f46101c0e00d22e4bfc69e35983f","modified":1529482108369},{"_id":"public/categories/javascript/index.html","hash":"0d315dd037f505467dde9a22a1070412281f0b24","modified":1529482108369},{"_id":"public/tags/设计模式/index.html","hash":"e758a675e2d9a3592cc941f21f36c1ca0d00c9b2","modified":1529482108369},{"_id":"public/tags/组合/index.html","hash":"8d58f6e2434d6ada5821087cc19b2d748f5040a1","modified":1529482108369},{"_id":"public/tags/继承/index.html","hash":"bce082a5833b28abd748b40e708f3f0b94bf052c","modified":1529482108369},{"_id":"public/tags/nodejs/index.html","hash":"05861b0b62ab333ff4d3ad8976825763a2101eca","modified":1529482108369},{"_id":"public/tags/yum/index.html","hash":"60dcd319ba74dfb2cc5b3557ede5499609e0b0de","modified":1529482108369},{"_id":"public/tags/centos/index.html","hash":"80fb85169142f7d55995f94d6e22831791c07606","modified":1529482108369},{"_id":"public/tags/elasticsearch/index.html","hash":"d21aad00112a2ce4573b930cb7283857a776812e","modified":1529482108369},{"_id":"public/tags/blog/index.html","hash":"a112c879e90e61602c6faf108da02c0ef6a319b3","modified":1529482108369},{"_id":"public/tags/golang/index.html","hash":"f278a7a3c7d58aa23a02c8d89d3e3659a10137c4","modified":1529482108369},{"_id":"public/tags/gor/index.html","hash":"f2ff8c8cbc90507995d7fe0225b23c54e5e4448b","modified":1529482108369},{"_id":"public/tags/java/index.html","hash":"a1dcf09cc6477df0063d2544c3e351dd8ac29f3a","modified":1529482108369},{"_id":"public/tags/des/index.html","hash":"bb1fe67db2154ebde51f9869a813763c7ec79924","modified":1529482108369},{"_id":"public/tags/tour/index.html","hash":"61544d86cb65d202d9925f4fdac21b27c746a073","modified":1529482108369},{"_id":"public/tags/proxy/index.html","hash":"a63f1d7be16ce9120debb803a97c436b4d4e129e","modified":1529482108369},{"_id":"public/tags/spring-mvc/index.html","hash":"876784307ce529e1a4d42727cffd8274390cf3cd","modified":1529482108369},{"_id":"public/tags/http/index.html","hash":"89866f15a38e9922e5fe8444a663edcd3531fed6","modified":1529482108370},{"_id":"public/tags/json/index.html","hash":"41ff0e884964be7a21bc27a21a1cc5e841e7fd62","modified":1529482108370},{"_id":"public/tags/react/index.html","hash":"81c1e3f80e2447e12ac957ef2877a6b24fe677da","modified":1529482108370},{"_id":"public/tags/jsx/index.html","hash":"8a660e504073ab0895a815c3df3168f68f550e34","modified":1529482108370},{"_id":"public/tags/学习/index.html","hash":"42f03baff7e92714c8b6cdb1b12dbbf85a84c9a2","modified":1529482108370},{"_id":"public/tags/计划/index.html","hash":"d5396c1bdaabf0212b22c7dbcbd41b1b8123c5e6","modified":1529482108370},{"_id":"public/tags/复习/index.html","hash":"c8d171341d79a6ecab922e993b377c962a059c36","modified":1529482108370},{"_id":"public/tags/learn/index.html","hash":"d6d770d0a8a2e4616c3a14948768983ba7c77c8b","modified":1529482108370},{"_id":"public/tags/总结/index.html","hash":"126c83d987bf83f1275056b0bb896fde50b5c1f1","modified":1529482108370},{"_id":"public/tags/linux/index.html","hash":"25096437851b880f4ee7f4eedcf02f3325a45b8c","modified":1529482108370},{"_id":"public/tags/centos7/index.html","hash":"0ef50d03d773d07cc740e7ac94d3f2757ba9b37e","modified":1529482108370},{"_id":"public/tags/lvs/index.html","hash":"f1b12f598c0c940802556a4d442f6f67b7f1c3ba","modified":1529482108370},{"_id":"public/tags/lvm/index.html","hash":"ee9b52b834b3f345f80dda0730b1bd1fb64369b2","modified":1529482108370},{"_id":"public/tags/fdisk/index.html","hash":"2313dc62b820c5a1b3e5425c3628be265df41e98","modified":1529482108370},{"_id":"public/tags/mongodb/index.html","hash":"cd7e2588c84308d765fe410739f58bffc33ded2b","modified":1529482108370},{"_id":"public/tags/markdown/index.html","hash":"d1c0e4f0e4791eb22f964bb413741233016da6a5","modified":1529482108371},{"_id":"public/tags/config/index.html","hash":"ab7f29befea60c765943ffdd8bb83d05d4ecaa20","modified":1529482108371},{"_id":"public/tags/nexus/index.html","hash":"c05b0022ed38b4f375550ca40930d44ce8560a82","modified":1529482108371},{"_id":"public/tags/maven/index.html","hash":"a3506dbec35315f15761a1c4d31c0e7facbb51dd","modified":1529482108371},{"_id":"public/tags/nginx/index.html","hash":"9f7f95210671e0bc3cacb8482522dd8b7dfb05ee","modified":1529482108371},{"_id":"public/tags/chkconfig/index.html","hash":"0a43c17d78e2d7496d652a671979e82c0f67c4db","modified":1529482108371},{"_id":"public/tags/falcon/index.html","hash":"b1a70e58761efc83a09b0276b321443177ed8a68","modified":1529482108371},{"_id":"public/tags/gralcon/index.html","hash":"3b0010dab140777e17d11d0b81c5dda27295b129","modified":1529482108371},{"_id":"public/tags/python/index.html","hash":"7ad4bfd59edb62386e9d0cc5679f2629ae251273","modified":1529482108371},{"_id":"public/tags/protobuf/index.html","hash":"cafa3c63b9879ea6333b5f481c2a0f32f26c4075","modified":1529482108371},{"_id":"public/tags/component/index.html","hash":"92ffb00f6f163c673904eb8791523089871f509d","modified":1529482108371},{"_id":"public/tags/props/index.html","hash":"3c41377538b667344af8242288e871e714068465","modified":1529482108371},{"_id":"public/tags/render/index.html","hash":"3f949314942e8611bc57f30f37caf06bbce66d6d","modified":1529482108371},{"_id":"public/tags/conditional/index.html","hash":"24939c6d285f039e34f817011dd87b2885ee2ae6","modified":1529482108371},{"_id":"public/tags/event/index.html","hash":"dd76eb990b0a50340ad57f987e0c505d8df3243d","modified":1529482108371},{"_id":"public/tags/list/index.html","hash":"687b49f68a10398ecf4e7d2bee97580e1bb82394","modified":1529482108371},{"_id":"public/tags/keys/index.html","hash":"c684c37d91d7ed8d5d96f3b952b985109c6401c3","modified":1529482108371},{"_id":"public/tags/state/index.html","hash":"0d91c1644233a7506aa89000a2ed0fdb8ba18ffe","modified":1529482108371},{"_id":"public/tags/js/index.html","hash":"7d1704d04ede2d07e378f13b75ab8a32de13019d","modified":1529482108371},{"_id":"public/tags/redux/index.html","hash":"933ccea51a52e486092332fbdb180e239d8e49ed","modified":1529482108371},{"_id":"public/tags/lifecycle/index.html","hash":"75d979a59b759519badb49332d74fea75632e384","modified":1529482108372},{"_id":"public/tags/rpc/index.html","hash":"b6164be6cef9e511025b331c1b1b47f2f90c6d46","modified":1529482108372},{"_id":"public/tags/socket/index.html","hash":"fa8a5ecdf7fd5d40e4cb3a8d17ee511bacdc1cac","modified":1529482108372},{"_id":"public/tags/转载/index.html","hash":"44243620637461159afb28b68ad41448efbd3aba","modified":1529482108372},{"_id":"public/tags/stack/index.html","hash":"b155614decc1875114e6aa8855823e108849b183","modified":1529482108372},{"_id":"public/tags/oop/index.html","hash":"c06c47643b00edeb5d605c9aca2c30f4f5c57612","modified":1529482108372},{"_id":"public/tags/sublime/index.html","hash":"77fe9e4d13bfae955aad50e4182b7cb2eab3a953","modified":1529482108372},{"_id":"public/tags/scrum/index.html","hash":"5f06735ec20d0a84ef3b6764062e6a74cae990a5","modified":1529482108372},{"_id":"public/tags/敏捷/index.html","hash":"6cf95d4b0e9c7dacc1bf2e498d5cfae927102ba4","modified":1529482108372},{"_id":"public/tags/taiga/index.html","hash":"be5a50ef3f4dcf2f179323c61e40ea5a788e8fbe","modified":1529482108372},{"_id":"public/tags/微信公众平台/index.html","hash":"28751f9878fed74704cf534217fd19d8fa289c77","modified":1529482108372},{"_id":"public/tags/travis/index.html","hash":"5738c7c1b3cf6933ab86c7e745f7773043d66425","modified":1529482108372},{"_id":"public/tags/javascript/index.html","hash":"bef5b44325d89a9b4646500b31476b742126adc8","modified":1529482108372},{"_id":"public/tags/html/index.html","hash":"ccdc5043eaea7157546710a3502bed88de3fbf73","modified":1529482108372},{"_id":"public/tags/规范/index.html","hash":"87553f1b02cab90765f86b6e13a0c91e065baa6d","modified":1529482108372},{"_id":"public/2018/05/31/learning-plain/index.html","hash":"7db128340fc441c8c132911583376f3d6dcca3c0","modified":1529482108372},{"_id":"public/2018/04/23/taiga-start/index.html","hash":"f4c4a2e4f38745e92b4d160ece62972df9ba2b46","modified":1529482108372},{"_id":"public/2018/04/23/react-redux/index.html","hash":"ba098713ccdc51e5ba3b95d9e08966055444ae38","modified":1529482108373},{"_id":"public/2018/03/27/open-falcon/index.html","hash":"fa3d58f2c4a9bceca895e767e99d067f5bdf9491","modified":1529482108373},{"_id":"public/2017/12/16/protobuf-python/index.html","hash":"af5e4cce4d3d8f3660b20635c2e7d17dc85bdd27","modified":1529482108373},{"_id":"public/2017/11/15/react-conditional-render/index.html","hash":"9a628b781bd801ed462a46acc74462b80a668f08","modified":1529482108373},{"_id":"public/2017/11/15/react-list-keys/index.html","hash":"9f2d9fdcf8a29cdacb2fdda9a1d30cd4fb8f46f9","modified":1529482108373},{"_id":"public/2017/11/15/react-event/index.html","hash":"e43c032e3d22f1f0a65a8ca90ddda623dd7c0e92","modified":1529482108373},{"_id":"public/2017/11/15/react-lifting-state-up/index.html","hash":"114d1dd5fd3247e2652fd04290328854ea325308","modified":1529482108373},{"_id":"public/2017/11/14/react-state/index.html","hash":"2f3f3e1cad314c15c23573fbd91f0390b28842aa","modified":1529482108373},{"_id":"public/2017/11/14/react-component-props/index.html","hash":"5fe9bf6efed86c9187b79416bcccdee30babe49c","modified":1529482108373},{"_id":"public/2017/11/13/react-render/index.html","hash":"f75cd39839102b1eb0407b99c5a5ca6c7946af19","modified":1529482108373},{"_id":"public/2017/11/13/travis-ci/index.html","hash":"0f140822a6156a2bf0db53320a3fa94f358ea344","modified":1529482108374},{"_id":"public/2017/11/13/jsx/index.html","hash":"23baf6ae66b23857c920354a560bd9686f9ed3cd","modified":1529482108374},{"_id":"public/2017/10/27/solid/index.html","hash":"3c79f63cb0a832c0f9913b131eaad5362159be69","modified":1529482108374},{"_id":"public/2017/05/11/rpc/index.html","hash":"217354586add8c002f73172a9e49ef0091a37c3f","modified":1529482108374},{"_id":"public/2017/05/10/nginx/index.html","hash":"6b04b57e484134169c8a3f7ea0ac0afff6a03965","modified":1529482108374},{"_id":"public/2017/05/10/es-head/index.html","hash":"08dc6251f3b43292c79f526bb36386751ccd0f77","modified":1529482108374},{"_id":"public/2017/03/20/ali-java-guide/index.html","hash":"3c3e0a2177309bd3c6ba8065ebee54677827b578","modified":1529482108374},{"_id":"public/2015/07/28/design-pattern-strategy/index.html","hash":"5b0e2fa868a50ce62d4ac6014ec99892d85c9062","modified":1529482108374},{"_id":"public/2015/07/17/stack/index.html","hash":"bc6de86870a9d9d1400a425482e9afc3c7c571af","modified":1529482108374},{"_id":"public/2015/07/16/md-catalog/index.html","hash":"85f94b7cdcde5343550b30ac7ddf4996c94f0366","modified":1529482108374},{"_id":"public/2015/07/16/sublime-md-heml/index.html","hash":"63bd64a16c05b6c85818e94c979efe3c1b474599","modified":1529482108374},{"_id":"public/2015/07/10/json-encode/index.html","hash":"714cf9b43fa608be51a8af3de6116e3500789936","modified":1529482108374},{"_id":"public/2015/07/09/java-des/index.html","hash":"87ef89e9096ae06715991a221304e395d5e60310","modified":1529482108374},{"_id":"public/2015/07/08/weixin-start/index.html","hash":"78d01bfb8d37ada622d229628bd89f1a46af7f92","modified":1529482108374},{"_id":"public/2015/07/08/gor-build-blog/index.html","hash":"f777b1013265f9d1acefc69c2ca8461ad33c19dd","modified":1529482108374},{"_id":"public/2015/07/07/gostart/index.html","hash":"d3fdf94dfaea7d3d0d6f6ea31c86ba111d08c383","modified":1529482108374},{"_id":"public/archives/index.html","hash":"495bbe95766006e0ac3216ef99f508fcbe2ae3c0","modified":1529482108374},{"_id":"public/archives/page/2/index.html","hash":"62c670b97621a9a3b12aaa274bf0520b32fa0c26","modified":1529482108374},{"_id":"public/archives/page/3/index.html","hash":"6411439b2e7021d10c0dce1bbf9d0c7d325ce8f5","modified":1529482108374},{"_id":"public/archives/2015/index.html","hash":"1a945218e6af105a92b1bf59df31ccdbeecd1831","modified":1529482108375},{"_id":"public/archives/2015/07/index.html","hash":"b7b94045b5ae8467c002b3c122b62f186a61ea1d","modified":1529482108375},{"_id":"public/archives/2017/index.html","hash":"fcd183d543e31b2c5bac0b54a3c3cdc353eec826","modified":1529482108375},{"_id":"public/index.html","hash":"a2c11c6df84e19d37c1316a153ea92a0b3f43730","modified":1529482108375},{"_id":"public/page/2/index.html","hash":"d78bc0b90956e948ed26349462af7bcfacc41498","modified":1529482108375},{"_id":"public/page/3/index.html","hash":"237240466d5b8f9a55a655f9123f4111a145dc03","modified":1529482108375},{"_id":"public/page/4/index.html","hash":"5ae67e22c4d40030d82337785fc5087ad3d08277","modified":1529482108375},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529482108383},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529482108383},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529482108383},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529482108383},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529482108383},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529482108383},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529482108384},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529482108384},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529482108384},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529482108384},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529482108384},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529482108384},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529482108384},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529482108384},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529482108384},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529482108384},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529482108384},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529482108384},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529482108384},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529482108384},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529482108384},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529482108384},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529482108384},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529482108384},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529482108385},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529482108385},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529482108385},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529482108385},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529482108385},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529482108385},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529482108385},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529482108385},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529482108385},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529482108937},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529482108944},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529482108965},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529482108965},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529482108965},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529482108965},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529482108965},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529482108965},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529482108965},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529482108965},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529482108965},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529482108965},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529482108965},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529482108966},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529482108966},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1529482108966},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1529482108966},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1529482108966},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1529482108966},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1529482108966},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1529482108966},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529482108966},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529482108966},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529482108966},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529482108967},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529482108967},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529482108967},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1529482108967},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529482108967},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529482108967},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529482108967},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529482108967},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529482108967},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529482108967},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529482108965},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529482108967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529482108967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529482108967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529482108967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529482108967},{"_id":"public/css/main.css","hash":"61ec809e1db66f9d53ed70545c2c8ec7beccd98b","modified":1529482108967},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529482108967},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529482108967},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529482108967},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529482108967},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529482108967},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529482108967},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529482108968},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529482108968},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529482108968},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529482108968},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529482108968},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529482108968},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529482108968},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529482108968},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529482108968},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529482108968},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529482108968},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529482108968},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529482108968},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529482108968},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529482108969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529482108969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529482108969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529482109043}],"Category":[{"name":"设计模式","_id":"cjimjn8h10004vqqjup24fu9e"},{"name":"nodejs","_id":"cjimjn8hb000avqqjy01jlte3"},{"name":"golang","_id":"cjimjn8hf000fvqqjjj5mta0k"},{"name":"java","_id":"cjimjn8hj000kvqqjb8qgs128"},{"name":"react","_id":"cjimjn8i20016vqqjl3ihtqms"},{"name":"learn","_id":"cjimjn8i9001evqqjx1de7l0n"},{"name":"linux","_id":"cjimjn8id001lvqqjka7tczg2"},{"name":"mongodb","_id":"cjimjn8ig001svqqj9ir6beg7"},{"name":"markdown","_id":"cjimjn8ik001zvqqjnk68bmbs"},{"name":"nexus","_id":"cjimjn8ip0029vqqjy95er9ca"},{"name":"nginx","_id":"cjimjn8it002gvqqj36yrg04o"},{"name":"devops","_id":"cjimjn8ix002nvqqj0qw5kmox"},{"name":"python","_id":"cjimjn8iz002svqqj8mquy8kd"},{"name":"转载","_id":"cjimjn8j50034vqqj2hmyeazq"},{"name":"sublime","_id":"cjimjn8j60038vqqjrgby7sao"},{"name":"soft","_id":"cjimjn8j8003evqqjb66lcdfr"},{"name":"微信公众平台","_id":"cjimjn8j9003kvqqj8to56m3l"},{"name":"ci","_id":"cjimjn8jb003pvqqjrv4sctkd"},{"name":"javascript","_id":"cjimjn8jc003tvqqjdcmbacmj"}],"Data":[],"Page":[{"title":"","date":"2018-06-19T10:46:14.000Z","_content":"\n一个喜欢做饭的程序员\n\n**联系**\n\n[github个人首页](https://github.com/sakyawang \"个人首页\")\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2018-06-19 18:46:14\n---\n\n一个喜欢做饭的程序员\n\n**联系**\n\n[github个人首页](https://github.com/sakyawang \"个人首页\")\n","updated":"2018-06-19T10:54:58.870Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjimjn8gp0000vqqje1evw96r","content":"<p>一个喜欢做饭的程序员</p>\n<p><strong>联系</strong></p>\n<p><a href=\"https://github.com/sakyawang\" title=\"个人首页\" target=\"_blank\" rel=\"noopener\">github个人首页</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个喜欢做饭的程序员</p>\n<p><strong>联系</strong></p>\n<p><a href=\"https://github.com/sakyawang\" title=\"个人首页\" target=\"_blank\" rel=\"noopener\">github个人首页</a></p>\n"},{"title":"分类","date":"2018-06-19T10:55:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-06-19 18:55:47\ntype: \"categories\"\n---\n","updated":"2018-06-20T02:23:35.247Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjimjn8gx0002vqqjkbz77d3s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-06-19T10:44:16.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-06-19 18:44:16\ntype: \"tags\"\n---\n","updated":"2018-06-20T02:23:59.247Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjimjn8h40006vqqjb04hkh0z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"设计模式解读之一： 策略模式","date":"2015-07-28T00:00:00.000Z","description":"设计模式解读之一： 策略模式/“组合”优于“继承” 例子","_content":"\n转自：http://www.javaeye.com/topic/328262\n\n当我们掌握了Java的语法，当我们了解了面向对象的封装、继承、多态等特性，当我们可以用Swing、Servlet、JSP技术构建桌面以及Web应用，不意味着我们可以写出面向对象的程序，不意味着我们可以很好的实现代码复用，弹性维护，不意味着我们可以实现在维护、扩展基础上的代码复用。\n\n一把刀，可以使你制敌于无形而于江湖扬名，也可以只是一把利刃而使你切菜平静。Java，就是这把刀，它的威力取决于你使用的方式。当我们陷入无尽无止重复代码的泥沼，当我们面临牵一发而动全身的维护恶梦, 你应该想起“设计模式”这个行动秘笈。\n\n面向对象的精义，看似平淡，其实要经过艰苦实践才能成功。而构造OO系统的隐含经验于是被前人搜集而成并冠以“设计模式”之名。我们应该在编码行动初始就携带以它。接下来，让我们步“四人组”先行者之后，用中国文字、用实际案例领略模式于我们代码焕然一新的改变。\n\n## 设计模式解读之一： 策略模式\n\n**1. 模式定义**\n    \n把会变化的内容取出并封装起来，以便以后可以轻易地改动或扩充部分，而不影响不需要变化的其他部分；\n\n**2. 问题缘起**\n\n当涉及至代码维护时，为了复用目的而使用继承，结局并不完美。对父类的修改，会影响到子类型。在超类中增加的方法，会导致子类型有该方法，甚至连那些不该具备该方法的子类型也无法免除。示例，一个鸭子类型：\n\n    public abstract class Duck {\n        //所有的鸭子均会叫以及游泳，所以父类中处理这部分代码\n        public void quack() {\n            System.out.println(\"Quack\");\n        }\n        \n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        //因为每种鸭子的外观是不同的，所以父类中该方法是抽象的，由子类型自己完成。\n        public abstract void display();\n    }\n\n    public class MallardDuck extends Duck {\n        //野鸭外观显示为绿头\n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n    }\n\n    public class RedHeadDuck extends Duck {\n        //红头鸭显示为红头\n        public void display() {\n            System.out.println(\"Red head.\");\n        }\n    }\n\n    public class RubberDuck extends Duck {\n        //橡皮鸭叫声为吱吱叫，所以重写父类以改写行为\n        public void quack() {\n            System.out.println(\"Squeak\");\n        }\n\n        //橡皮鸭显示为黄头\n        public void display() {\n            System.out.println(\"Yellow head.\");\n        }\n    }\n\n上述代码，初始实现得非常好。现在我们如果给Duck.java中加入fly()方法的话，那么在子类型中均有了该方法，于是我们看到了 会飞的橡皮鸭子，你看过吗？当然，我们可以在子类中通过空实现重写该方法以解决该方法对于子类型的影响。但是父类中再增加其它的方法呢？\n\n通过继承在父类中提供行为，会导致以下缺点：\n\n* 代码在多个子类中重复;\n* 运行时的行为不容易改变；\n* 改变会牵一发动全身，造成部分子类型不想要的改变；\n\n好啦，还是刚才鸭子的例子，你也许想到使用接口，将飞的行为、叫的行为定义为接口，然后让Duck的各种子类型实现这些接口。这时侯代码类似于：\n\n    public abstract class Duck {\n        //将变化的行为 fly() 以及quake()从Duck类中分离出去定义形成接口，有需求的子类中自行去实现\n\n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        public abstract void display();\n    }\n\n    //变化的 fly() 行为定义形成的接口\n    public interface FlyBehavior {\n        void fly();\n    }\n\n    //变化的 quack() 行为定义形成的接口\n    public interface QuackBehavior {\n        void quack();\n    }\n\n    //野鸭子会飞以及叫，所以实现接口  FlyBehavior, QuackBehavior\n    public class MallardDuck extends Duck implements FlyBehavior, QuackBehavior{\n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n\n        public void fly() {\n            System.out.println(\"Fly.\");                \n        }\n\n        public void quack() {\n            System.out.println(\"Quack.\");                \n        }\n    }\n\n    //红头鸭子会飞以及叫，所以也实现接口  FlyBehavior, QuackBehavior\n    public class RedHeadDuck extends Duck implements FlyBehavior, QuackBehavior{\n        public void display() {\n            System.out.println(\"Red head.\");\n        }    \n\n        public void fly() {\n            System.out.println(\"Fly.\");                \n        }\n\n        public void quack() {\n            System.out.println(\"Quack.\");                \n        }    \n    }\n\n    //橡皮鸭不会飞，但会吱吱叫，所以只实现接口QuackBehavior\n    public class RubberDuck extends Duck implements QuackBehavior{\n        //橡皮鸭叫声为吱吱叫\n        public void quack() {\n            System.out.println(\"Squeak\");\n        }\n\n        //橡皮鸭显示为黄头\n        public void display() {\n            System.out.println(\"Yellow head.\");\n        }\n    }\n\n上述代码虽然解决了一部分问题，让子类型可以有选择地提供一些行为(例如 fly() 方法将不会出现在橡皮鸭中).但我们也看到，野鸭子MallardDuck.java和红头鸭子RedHeadDuck.java的一些相同行为代码不能得到重复使用。很大程度上这是从一个火坑跳到另一个火坑。\n\n在一段程序之后，让我们从细节中跳出来，关注一些共性问题。不管使用什么语言，构建什么应用，在软件开发上，一直伴随着的不变的真理是：需要一直在变化。不管当初软件设计得多好，一段时间之后，总是需要成长与改变，否则软件就会死亡。\n\n我们知道，继承在某种程度上可以实现代码重用，但是父类(例如鸭子类Duck)的行为在子类型中是不断变化的，让所有子类型都有这些行为是不恰当的。我们可以将这些行为定义为接口，让Duck的各种子类型去实现，但接口不具有实现代码，所以实现接口无法达到代码复用。这意味着，当我们需要修改某个行为，必须往下追踪并在每一个定义此行为的类中修改它，一不小心，会造成新的错误。\n\n设计原则：\n\n\t把应用中变化的地方独立出来，不要和那些不需要变化的代码混在一起。\n\t这样代码变化引起的不经意后果变少，系统变得更有弹性。\n\n按照上述设计原则，我们重新审视之前的Duck代码。\n\n**1) 分开变化的内容和不变的内容**\n\nDuck类中的行为 fly(), quack(), 每个子类型可能有自己特有的表现，这就是所谓的变化的内容。\n\nDuck类中的行为 swim() 每个子类型的表现均相同，这就是所谓不变的内容。\n\n我们将变化的内容从Duck()类中剥离出来单独定义形成接口以及一系列的实现类型。将变化的内容定义形成接口可实现变化内容和不变内容的剥离。其实现类型可实现变化内容的重用。这些实现类并非Duck.java的子类型，而是专门的一组实现类，称之为\"行为类\"。由行为类而不是Duck.java的子类型来实现接口。这样，才能保证变化的行为独立于不变的内容。于是我们有：\n\n变化的内容：\n\n       //变化的 fly() 行为定义形成的接口\n       public interface FlyBehavior {\n        void fly();\n       }\n         \n       //变化的 fly() 行为的实现类之一\n       public class FlyWithWings implements FlyBehavior {\n        public void fly() {\n            System.out.println(\"I'm flying.\");\n        }\n       }\n\n       //变化的 fly() 行为的实现类之二\n       public class FlyNoWay implements FlyBehavior {\n        public void fly() {\n            System.out.println(\"I can't fly.\");\n        }\n       }\n\n           -----------------------------------------------------------------\n\n       //变化的 quack() 行为定义形成的接口\n       public interface QuackBehavior {\n        void quack();\n       }\n\n       //变化的 quack() 行为实现类之一\n       public class Quack implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"Quack\");\n        }\n       }\n\n       //变化的 quack() 行为实现类之二\n       public class Squeak implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"Squeak.\");\n        }\n       }\n\n       //变化的 quack() 行为实现类之三\n       public class MuteQuack implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"<< Slience >>\");\n        }\n       }\n\n通过以上设计，fly()行为以及quack()行为已经和Duck.java没有什么关系，可以充分得到复用。而且我们很容易增加新的行为, 既不影响现有的行为，也不影响Duck.java。但是，大家可能有个疑问，就是在面向对象中行为不是体现为方法吗？为什么现在被定义形成类(例如Squeak.java)？在OO中，类代表的\"东西\"一般是既有状态(实例变量）又有方法。只是在本例中碰巧\"东西\"是个行为。既使是行为，也有属性及方法，例如飞行行为，也需要一些属性记录飞行的状态，如飞行高度、速度等。\n\n**2) 整合变化的内容和不变的内容**\n\nDuck.java将 fly()以及quack()的行为委拖给行为类处理。\n\n不变的内容：\n\n       public abstract class Duck {\n            //将行为类声明为接口类型，降低对行为实现类型的依赖\n        FlyBehavior flyBehavior;\n        QuackBehavior quackBehavior;\n\n        public void performFly() {\n            //不自行处理fly()行为，而是委拖给引用flyBehavior所指向的行为对象\n            flyBehavior.fly();\n        }\n\n        public void performQuack() {\n            quackBehavior.quack();\n        }\n\n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        public abstract void display();\n       }\n\n       Duck.java不关心如何进行 fly()以及quack(), 这些细节交由具体的行为类完成。\n       \n       public class MallardDuck extends Duck{\n        public MallardDuck() {\n            flyBehavior=new FlyWithWings();\n            quackBehavior=new Quack();        \n        }\n        \n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n       }\n\n测试类：\n\n       public class DuckTest {\n        public static void main(String[] args) {\n            Duck duck=new MallardDuck();\n            duck.performFly();\n            duck.performQuack();        \n        }\n       }\n\n在Duck.java子类型MallardDuck.java的构造方法中，直接实例化行为类型，在编译的时侯便指定具体行为类型。当然，我们可以：\n       \n* 我们可以通过工厂模式或其它模式进一步解藕(可参考后续模式讲解);\n\n* 或做到在运行时动态地改变行为。\n\n**3) 动态设定行为**\n\n在父类Duck.java中增加设定行为类型的setter方法，接受行为类型对象的参数传入。为了降藕，行为参数被声明为接口类型。这样，既便在运行时，也可以通过调用这二个方法以改变行为。\n\n       public abstract class Duck {\n        //在刚才Duck.java中加入以下二个方法。\n        public void setFlyBehavior(FlyBehavior flyBehavior) {\n            this.flyBehavior=flyBehavior;\n        }\n        \n        public void setQuackBehavior(QuackBehavior quackBehavior) {\n            this.quackBehavior=quackBehavior;\n        }\n\n        //其它方法同，省略...\n       }\n\n测试类：\n\n       public class DuckTest {\n        public static void main(String[] args) {\n            Duck duck=new MallardDuck();\n            duck.performFly();\n            duck.performQuack();\n            duck.setFlyBehavior(new FlyNoWay());\n            duck.performFly();\n        }\n       }\n\n如果，我们要加上火箭助力的飞行行为，只需再新建FlyBehavior.java接口的实现类型。而子类型可通过调用setQuackBehavior(...)方法动态改变。至此，在Duck.java增加新的行为给我们代码所带来的困绕已不复存在。\n\n该是总结的时侯了，让我们从代码的水中浮出来，做一只在水面上自由游动的鸭子吧:\n\n## 3.  解决方案\n\n* MallardDuck 继承  Duck抽象类；          -> 不变的内容\n* FlyWithWings 实现 FlyBehavior接口；     -> 变化的内容,行为或算法\n* 在Duck.java提供setter方法以装配关系；    -> 动态设定行为\n\n以上就是策略模式的实现三步曲。接下来，让我们透过步骤看本质:\n    \n* 初始，我们通过继承实现行为的重用，导致了代码的维护问题。          -> 继承, is a\n* 接着，我们将行为剥离成单独的类型并声明为不变内容的实例变量并通过  -> 组合, has a\nsetter方法以装配关系；\n\n\t\t继承，可以实现静态代码的复用；\n\t\t组合，可以实现代码的弹性维护；\n\t\t使用组合代替继承，可以使代码更好地适应软件开发完后的需求变化。\n\t\t策略模式的本质：少用继承，多用组合\n\n\n\n","source":"_posts/design-pattern-strategy.md","raw":"---\ntitle: 设计模式解读之一： 策略模式\ndate: '2015-07-28'\ndescription: 设计模式解读之一： 策略模式/“组合”优于“继承” 例子\ncategories:\n- 设计模式\n\ntags:\n- 设计模式\n- 组合\n- 继承\n\n---\n\n转自：http://www.javaeye.com/topic/328262\n\n当我们掌握了Java的语法，当我们了解了面向对象的封装、继承、多态等特性，当我们可以用Swing、Servlet、JSP技术构建桌面以及Web应用，不意味着我们可以写出面向对象的程序，不意味着我们可以很好的实现代码复用，弹性维护，不意味着我们可以实现在维护、扩展基础上的代码复用。\n\n一把刀，可以使你制敌于无形而于江湖扬名，也可以只是一把利刃而使你切菜平静。Java，就是这把刀，它的威力取决于你使用的方式。当我们陷入无尽无止重复代码的泥沼，当我们面临牵一发而动全身的维护恶梦, 你应该想起“设计模式”这个行动秘笈。\n\n面向对象的精义，看似平淡，其实要经过艰苦实践才能成功。而构造OO系统的隐含经验于是被前人搜集而成并冠以“设计模式”之名。我们应该在编码行动初始就携带以它。接下来，让我们步“四人组”先行者之后，用中国文字、用实际案例领略模式于我们代码焕然一新的改变。\n\n## 设计模式解读之一： 策略模式\n\n**1. 模式定义**\n    \n把会变化的内容取出并封装起来，以便以后可以轻易地改动或扩充部分，而不影响不需要变化的其他部分；\n\n**2. 问题缘起**\n\n当涉及至代码维护时，为了复用目的而使用继承，结局并不完美。对父类的修改，会影响到子类型。在超类中增加的方法，会导致子类型有该方法，甚至连那些不该具备该方法的子类型也无法免除。示例，一个鸭子类型：\n\n    public abstract class Duck {\n        //所有的鸭子均会叫以及游泳，所以父类中处理这部分代码\n        public void quack() {\n            System.out.println(\"Quack\");\n        }\n        \n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        //因为每种鸭子的外观是不同的，所以父类中该方法是抽象的，由子类型自己完成。\n        public abstract void display();\n    }\n\n    public class MallardDuck extends Duck {\n        //野鸭外观显示为绿头\n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n    }\n\n    public class RedHeadDuck extends Duck {\n        //红头鸭显示为红头\n        public void display() {\n            System.out.println(\"Red head.\");\n        }\n    }\n\n    public class RubberDuck extends Duck {\n        //橡皮鸭叫声为吱吱叫，所以重写父类以改写行为\n        public void quack() {\n            System.out.println(\"Squeak\");\n        }\n\n        //橡皮鸭显示为黄头\n        public void display() {\n            System.out.println(\"Yellow head.\");\n        }\n    }\n\n上述代码，初始实现得非常好。现在我们如果给Duck.java中加入fly()方法的话，那么在子类型中均有了该方法，于是我们看到了 会飞的橡皮鸭子，你看过吗？当然，我们可以在子类中通过空实现重写该方法以解决该方法对于子类型的影响。但是父类中再增加其它的方法呢？\n\n通过继承在父类中提供行为，会导致以下缺点：\n\n* 代码在多个子类中重复;\n* 运行时的行为不容易改变；\n* 改变会牵一发动全身，造成部分子类型不想要的改变；\n\n好啦，还是刚才鸭子的例子，你也许想到使用接口，将飞的行为、叫的行为定义为接口，然后让Duck的各种子类型实现这些接口。这时侯代码类似于：\n\n    public abstract class Duck {\n        //将变化的行为 fly() 以及quake()从Duck类中分离出去定义形成接口，有需求的子类中自行去实现\n\n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        public abstract void display();\n    }\n\n    //变化的 fly() 行为定义形成的接口\n    public interface FlyBehavior {\n        void fly();\n    }\n\n    //变化的 quack() 行为定义形成的接口\n    public interface QuackBehavior {\n        void quack();\n    }\n\n    //野鸭子会飞以及叫，所以实现接口  FlyBehavior, QuackBehavior\n    public class MallardDuck extends Duck implements FlyBehavior, QuackBehavior{\n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n\n        public void fly() {\n            System.out.println(\"Fly.\");                \n        }\n\n        public void quack() {\n            System.out.println(\"Quack.\");                \n        }\n    }\n\n    //红头鸭子会飞以及叫，所以也实现接口  FlyBehavior, QuackBehavior\n    public class RedHeadDuck extends Duck implements FlyBehavior, QuackBehavior{\n        public void display() {\n            System.out.println(\"Red head.\");\n        }    \n\n        public void fly() {\n            System.out.println(\"Fly.\");                \n        }\n\n        public void quack() {\n            System.out.println(\"Quack.\");                \n        }    \n    }\n\n    //橡皮鸭不会飞，但会吱吱叫，所以只实现接口QuackBehavior\n    public class RubberDuck extends Duck implements QuackBehavior{\n        //橡皮鸭叫声为吱吱叫\n        public void quack() {\n            System.out.println(\"Squeak\");\n        }\n\n        //橡皮鸭显示为黄头\n        public void display() {\n            System.out.println(\"Yellow head.\");\n        }\n    }\n\n上述代码虽然解决了一部分问题，让子类型可以有选择地提供一些行为(例如 fly() 方法将不会出现在橡皮鸭中).但我们也看到，野鸭子MallardDuck.java和红头鸭子RedHeadDuck.java的一些相同行为代码不能得到重复使用。很大程度上这是从一个火坑跳到另一个火坑。\n\n在一段程序之后，让我们从细节中跳出来，关注一些共性问题。不管使用什么语言，构建什么应用，在软件开发上，一直伴随着的不变的真理是：需要一直在变化。不管当初软件设计得多好，一段时间之后，总是需要成长与改变，否则软件就会死亡。\n\n我们知道，继承在某种程度上可以实现代码重用，但是父类(例如鸭子类Duck)的行为在子类型中是不断变化的，让所有子类型都有这些行为是不恰当的。我们可以将这些行为定义为接口，让Duck的各种子类型去实现，但接口不具有实现代码，所以实现接口无法达到代码复用。这意味着，当我们需要修改某个行为，必须往下追踪并在每一个定义此行为的类中修改它，一不小心，会造成新的错误。\n\n设计原则：\n\n\t把应用中变化的地方独立出来，不要和那些不需要变化的代码混在一起。\n\t这样代码变化引起的不经意后果变少，系统变得更有弹性。\n\n按照上述设计原则，我们重新审视之前的Duck代码。\n\n**1) 分开变化的内容和不变的内容**\n\nDuck类中的行为 fly(), quack(), 每个子类型可能有自己特有的表现，这就是所谓的变化的内容。\n\nDuck类中的行为 swim() 每个子类型的表现均相同，这就是所谓不变的内容。\n\n我们将变化的内容从Duck()类中剥离出来单独定义形成接口以及一系列的实现类型。将变化的内容定义形成接口可实现变化内容和不变内容的剥离。其实现类型可实现变化内容的重用。这些实现类并非Duck.java的子类型，而是专门的一组实现类，称之为\"行为类\"。由行为类而不是Duck.java的子类型来实现接口。这样，才能保证变化的行为独立于不变的内容。于是我们有：\n\n变化的内容：\n\n       //变化的 fly() 行为定义形成的接口\n       public interface FlyBehavior {\n        void fly();\n       }\n         \n       //变化的 fly() 行为的实现类之一\n       public class FlyWithWings implements FlyBehavior {\n        public void fly() {\n            System.out.println(\"I'm flying.\");\n        }\n       }\n\n       //变化的 fly() 行为的实现类之二\n       public class FlyNoWay implements FlyBehavior {\n        public void fly() {\n            System.out.println(\"I can't fly.\");\n        }\n       }\n\n           -----------------------------------------------------------------\n\n       //变化的 quack() 行为定义形成的接口\n       public interface QuackBehavior {\n        void quack();\n       }\n\n       //变化的 quack() 行为实现类之一\n       public class Quack implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"Quack\");\n        }\n       }\n\n       //变化的 quack() 行为实现类之二\n       public class Squeak implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"Squeak.\");\n        }\n       }\n\n       //变化的 quack() 行为实现类之三\n       public class MuteQuack implements QuackBehavior {\n        public void quack() {\n            System.out.println(\"<< Slience >>\");\n        }\n       }\n\n通过以上设计，fly()行为以及quack()行为已经和Duck.java没有什么关系，可以充分得到复用。而且我们很容易增加新的行为, 既不影响现有的行为，也不影响Duck.java。但是，大家可能有个疑问，就是在面向对象中行为不是体现为方法吗？为什么现在被定义形成类(例如Squeak.java)？在OO中，类代表的\"东西\"一般是既有状态(实例变量）又有方法。只是在本例中碰巧\"东西\"是个行为。既使是行为，也有属性及方法，例如飞行行为，也需要一些属性记录飞行的状态，如飞行高度、速度等。\n\n**2) 整合变化的内容和不变的内容**\n\nDuck.java将 fly()以及quack()的行为委拖给行为类处理。\n\n不变的内容：\n\n       public abstract class Duck {\n            //将行为类声明为接口类型，降低对行为实现类型的依赖\n        FlyBehavior flyBehavior;\n        QuackBehavior quackBehavior;\n\n        public void performFly() {\n            //不自行处理fly()行为，而是委拖给引用flyBehavior所指向的行为对象\n            flyBehavior.fly();\n        }\n\n        public void performQuack() {\n            quackBehavior.quack();\n        }\n\n        public void swim() {\n            System.out.println(\"All ducks float, even decoys.\");        \n        }\n        \n        public abstract void display();\n       }\n\n       Duck.java不关心如何进行 fly()以及quack(), 这些细节交由具体的行为类完成。\n       \n       public class MallardDuck extends Duck{\n        public MallardDuck() {\n            flyBehavior=new FlyWithWings();\n            quackBehavior=new Quack();        \n        }\n        \n        public void display() {\n            System.out.println(\"Green head.\");\n        }\n       }\n\n测试类：\n\n       public class DuckTest {\n        public static void main(String[] args) {\n            Duck duck=new MallardDuck();\n            duck.performFly();\n            duck.performQuack();        \n        }\n       }\n\n在Duck.java子类型MallardDuck.java的构造方法中，直接实例化行为类型，在编译的时侯便指定具体行为类型。当然，我们可以：\n       \n* 我们可以通过工厂模式或其它模式进一步解藕(可参考后续模式讲解);\n\n* 或做到在运行时动态地改变行为。\n\n**3) 动态设定行为**\n\n在父类Duck.java中增加设定行为类型的setter方法，接受行为类型对象的参数传入。为了降藕，行为参数被声明为接口类型。这样，既便在运行时，也可以通过调用这二个方法以改变行为。\n\n       public abstract class Duck {\n        //在刚才Duck.java中加入以下二个方法。\n        public void setFlyBehavior(FlyBehavior flyBehavior) {\n            this.flyBehavior=flyBehavior;\n        }\n        \n        public void setQuackBehavior(QuackBehavior quackBehavior) {\n            this.quackBehavior=quackBehavior;\n        }\n\n        //其它方法同，省略...\n       }\n\n测试类：\n\n       public class DuckTest {\n        public static void main(String[] args) {\n            Duck duck=new MallardDuck();\n            duck.performFly();\n            duck.performQuack();\n            duck.setFlyBehavior(new FlyNoWay());\n            duck.performFly();\n        }\n       }\n\n如果，我们要加上火箭助力的飞行行为，只需再新建FlyBehavior.java接口的实现类型。而子类型可通过调用setQuackBehavior(...)方法动态改变。至此，在Duck.java增加新的行为给我们代码所带来的困绕已不复存在。\n\n该是总结的时侯了，让我们从代码的水中浮出来，做一只在水面上自由游动的鸭子吧:\n\n## 3.  解决方案\n\n* MallardDuck 继承  Duck抽象类；          -> 不变的内容\n* FlyWithWings 实现 FlyBehavior接口；     -> 变化的内容,行为或算法\n* 在Duck.java提供setter方法以装配关系；    -> 动态设定行为\n\n以上就是策略模式的实现三步曲。接下来，让我们透过步骤看本质:\n    \n* 初始，我们通过继承实现行为的重用，导致了代码的维护问题。          -> 继承, is a\n* 接着，我们将行为剥离成单独的类型并声明为不变内容的实例变量并通过  -> 组合, has a\nsetter方法以装配关系；\n\n\t\t继承，可以实现静态代码的复用；\n\t\t组合，可以实现代码的弹性维护；\n\t\t使用组合代替继承，可以使代码更好地适应软件开发完后的需求变化。\n\t\t策略模式的本质：少用继承，多用组合\n\n\n\n","slug":"design-pattern-strategy","published":1,"updated":"2018-06-20T02:59:39.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8gs0001vqqj9krjoxab","content":"<p>转自：<a href=\"http://www.javaeye.com/topic/328262\" target=\"_blank\" rel=\"noopener\">http://www.javaeye.com/topic/328262</a></p>\n<p>当我们掌握了Java的语法，当我们了解了面向对象的封装、继承、多态等特性，当我们可以用Swing、Servlet、JSP技术构建桌面以及Web应用，不意味着我们可以写出面向对象的程序，不意味着我们可以很好的实现代码复用，弹性维护，不意味着我们可以实现在维护、扩展基础上的代码复用。</p>\n<p>一把刀，可以使你制敌于无形而于江湖扬名，也可以只是一把利刃而使你切菜平静。Java，就是这把刀，它的威力取决于你使用的方式。当我们陷入无尽无止重复代码的泥沼，当我们面临牵一发而动全身的维护恶梦, 你应该想起“设计模式”这个行动秘笈。</p>\n<p>面向对象的精义，看似平淡，其实要经过艰苦实践才能成功。而构造OO系统的隐含经验于是被前人搜集而成并冠以“设计模式”之名。我们应该在编码行动初始就携带以它。接下来，让我们步“四人组”先行者之后，用中国文字、用实际案例领略模式于我们代码焕然一新的改变。</p>\n<h2 id=\"设计模式解读之一：-策略模式\"><a href=\"#设计模式解读之一：-策略模式\" class=\"headerlink\" title=\"设计模式解读之一： 策略模式\"></a>设计模式解读之一： 策略模式</h2><p><strong>1. 模式定义</strong></p>\n<p>把会变化的内容取出并封装起来，以便以后可以轻易地改动或扩充部分，而不影响不需要变化的其他部分；</p>\n<p><strong>2. 问题缘起</strong></p>\n<p>当涉及至代码维护时，为了复用目的而使用继承，结局并不完美。对父类的修改，会影响到子类型。在超类中增加的方法，会导致子类型有该方法，甚至连那些不该具备该方法的子类型也无法免除。示例，一个鸭子类型：</p>\n<pre><code>public abstract class Duck {\n    //所有的鸭子均会叫以及游泳，所以父类中处理这部分代码\n    public void quack() {\n        System.out.println(&quot;Quack&quot;);\n    }\n\n    public void swim() {\n        System.out.println(&quot;All ducks float, even decoys.&quot;);        \n    }\n\n    //因为每种鸭子的外观是不同的，所以父类中该方法是抽象的，由子类型自己完成。\n    public abstract void display();\n}\n\npublic class MallardDuck extends Duck {\n    //野鸭外观显示为绿头\n    public void display() {\n        System.out.println(&quot;Green head.&quot;);\n    }\n}\n\npublic class RedHeadDuck extends Duck {\n    //红头鸭显示为红头\n    public void display() {\n        System.out.println(&quot;Red head.&quot;);\n    }\n}\n\npublic class RubberDuck extends Duck {\n    //橡皮鸭叫声为吱吱叫，所以重写父类以改写行为\n    public void quack() {\n        System.out.println(&quot;Squeak&quot;);\n    }\n\n    //橡皮鸭显示为黄头\n    public void display() {\n        System.out.println(&quot;Yellow head.&quot;);\n    }\n}\n</code></pre><p>上述代码，初始实现得非常好。现在我们如果给Duck.java中加入fly()方法的话，那么在子类型中均有了该方法，于是我们看到了 会飞的橡皮鸭子，你看过吗？当然，我们可以在子类中通过空实现重写该方法以解决该方法对于子类型的影响。但是父类中再增加其它的方法呢？</p>\n<p>通过继承在父类中提供行为，会导致以下缺点：</p>\n<ul>\n<li>代码在多个子类中重复;</li>\n<li>运行时的行为不容易改变；</li>\n<li>改变会牵一发动全身，造成部分子类型不想要的改变；</li>\n</ul>\n<p>好啦，还是刚才鸭子的例子，你也许想到使用接口，将飞的行为、叫的行为定义为接口，然后让Duck的各种子类型实现这些接口。这时侯代码类似于：</p>\n<pre><code>public abstract class Duck {\n    //将变化的行为 fly() 以及quake()从Duck类中分离出去定义形成接口，有需求的子类中自行去实现\n\n    public void swim() {\n        System.out.println(&quot;All ducks float, even decoys.&quot;);        \n    }\n\n    public abstract void display();\n}\n\n//变化的 fly() 行为定义形成的接口\npublic interface FlyBehavior {\n    void fly();\n}\n\n//变化的 quack() 行为定义形成的接口\npublic interface QuackBehavior {\n    void quack();\n}\n\n//野鸭子会飞以及叫，所以实现接口  FlyBehavior, QuackBehavior\npublic class MallardDuck extends Duck implements FlyBehavior, QuackBehavior{\n    public void display() {\n        System.out.println(&quot;Green head.&quot;);\n    }\n\n    public void fly() {\n        System.out.println(&quot;Fly.&quot;);                \n    }\n\n    public void quack() {\n        System.out.println(&quot;Quack.&quot;);                \n    }\n}\n\n//红头鸭子会飞以及叫，所以也实现接口  FlyBehavior, QuackBehavior\npublic class RedHeadDuck extends Duck implements FlyBehavior, QuackBehavior{\n    public void display() {\n        System.out.println(&quot;Red head.&quot;);\n    }    \n\n    public void fly() {\n        System.out.println(&quot;Fly.&quot;);                \n    }\n\n    public void quack() {\n        System.out.println(&quot;Quack.&quot;);                \n    }    \n}\n\n//橡皮鸭不会飞，但会吱吱叫，所以只实现接口QuackBehavior\npublic class RubberDuck extends Duck implements QuackBehavior{\n    //橡皮鸭叫声为吱吱叫\n    public void quack() {\n        System.out.println(&quot;Squeak&quot;);\n    }\n\n    //橡皮鸭显示为黄头\n    public void display() {\n        System.out.println(&quot;Yellow head.&quot;);\n    }\n}\n</code></pre><p>上述代码虽然解决了一部分问题，让子类型可以有选择地提供一些行为(例如 fly() 方法将不会出现在橡皮鸭中).但我们也看到，野鸭子MallardDuck.java和红头鸭子RedHeadDuck.java的一些相同行为代码不能得到重复使用。很大程度上这是从一个火坑跳到另一个火坑。</p>\n<p>在一段程序之后，让我们从细节中跳出来，关注一些共性问题。不管使用什么语言，构建什么应用，在软件开发上，一直伴随着的不变的真理是：需要一直在变化。不管当初软件设计得多好，一段时间之后，总是需要成长与改变，否则软件就会死亡。</p>\n<p>我们知道，继承在某种程度上可以实现代码重用，但是父类(例如鸭子类Duck)的行为在子类型中是不断变化的，让所有子类型都有这些行为是不恰当的。我们可以将这些行为定义为接口，让Duck的各种子类型去实现，但接口不具有实现代码，所以实现接口无法达到代码复用。这意味着，当我们需要修改某个行为，必须往下追踪并在每一个定义此行为的类中修改它，一不小心，会造成新的错误。</p>\n<p>设计原则：</p>\n<pre><code>把应用中变化的地方独立出来，不要和那些不需要变化的代码混在一起。\n这样代码变化引起的不经意后果变少，系统变得更有弹性。\n</code></pre><p>按照上述设计原则，我们重新审视之前的Duck代码。</p>\n<p><strong>1) 分开变化的内容和不变的内容</strong></p>\n<p>Duck类中的行为 fly(), quack(), 每个子类型可能有自己特有的表现，这就是所谓的变化的内容。</p>\n<p>Duck类中的行为 swim() 每个子类型的表现均相同，这就是所谓不变的内容。</p>\n<p>我们将变化的内容从Duck()类中剥离出来单独定义形成接口以及一系列的实现类型。将变化的内容定义形成接口可实现变化内容和不变内容的剥离。其实现类型可实现变化内容的重用。这些实现类并非Duck.java的子类型，而是专门的一组实现类，称之为”行为类”。由行为类而不是Duck.java的子类型来实现接口。这样，才能保证变化的行为独立于不变的内容。于是我们有：</p>\n<p>变化的内容：</p>\n<pre><code>//变化的 fly() 行为定义形成的接口\npublic interface FlyBehavior {\n void fly();\n}\n\n//变化的 fly() 行为的实现类之一\npublic class FlyWithWings implements FlyBehavior {\n public void fly() {\n     System.out.println(&quot;I&apos;m flying.&quot;);\n }\n}\n\n//变化的 fly() 行为的实现类之二\npublic class FlyNoWay implements FlyBehavior {\n public void fly() {\n     System.out.println(&quot;I can&apos;t fly.&quot;);\n }\n}\n\n    -----------------------------------------------------------------\n\n//变化的 quack() 行为定义形成的接口\npublic interface QuackBehavior {\n void quack();\n}\n\n//变化的 quack() 行为实现类之一\npublic class Quack implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;Quack&quot;);\n }\n}\n\n//变化的 quack() 行为实现类之二\npublic class Squeak implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;Squeak.&quot;);\n }\n}\n\n//变化的 quack() 行为实现类之三\npublic class MuteQuack implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;&lt;&lt; Slience &gt;&gt;&quot;);\n }\n}\n</code></pre><p>通过以上设计，fly()行为以及quack()行为已经和Duck.java没有什么关系，可以充分得到复用。而且我们很容易增加新的行为, 既不影响现有的行为，也不影响Duck.java。但是，大家可能有个疑问，就是在面向对象中行为不是体现为方法吗？为什么现在被定义形成类(例如Squeak.java)？在OO中，类代表的”东西”一般是既有状态(实例变量）又有方法。只是在本例中碰巧”东西”是个行为。既使是行为，也有属性及方法，例如飞行行为，也需要一些属性记录飞行的状态，如飞行高度、速度等。</p>\n<p><strong>2) 整合变化的内容和不变的内容</strong></p>\n<p>Duck.java将 fly()以及quack()的行为委拖给行为类处理。</p>\n<p>不变的内容：</p>\n<pre><code>public abstract class Duck {\n     //将行为类声明为接口类型，降低对行为实现类型的依赖\n FlyBehavior flyBehavior;\n QuackBehavior quackBehavior;\n\n public void performFly() {\n     //不自行处理fly()行为，而是委拖给引用flyBehavior所指向的行为对象\n     flyBehavior.fly();\n }\n\n public void performQuack() {\n     quackBehavior.quack();\n }\n\n public void swim() {\n     System.out.println(&quot;All ducks float, even decoys.&quot;);        \n }\n\n public abstract void display();\n}\n\nDuck.java不关心如何进行 fly()以及quack(), 这些细节交由具体的行为类完成。\n\npublic class MallardDuck extends Duck{\n public MallardDuck() {\n     flyBehavior=new FlyWithWings();\n     quackBehavior=new Quack();        \n }\n\n public void display() {\n     System.out.println(&quot;Green head.&quot;);\n }\n}\n</code></pre><p>测试类：</p>\n<pre><code>public class DuckTest {\n public static void main(String[] args) {\n     Duck duck=new MallardDuck();\n     duck.performFly();\n     duck.performQuack();        \n }\n}\n</code></pre><p>在Duck.java子类型MallardDuck.java的构造方法中，直接实例化行为类型，在编译的时侯便指定具体行为类型。当然，我们可以：</p>\n<ul>\n<li><p>我们可以通过工厂模式或其它模式进一步解藕(可参考后续模式讲解);</p>\n</li>\n<li><p>或做到在运行时动态地改变行为。</p>\n</li>\n</ul>\n<p><strong>3) 动态设定行为</strong></p>\n<p>在父类Duck.java中增加设定行为类型的setter方法，接受行为类型对象的参数传入。为了降藕，行为参数被声明为接口类型。这样，既便在运行时，也可以通过调用这二个方法以改变行为。</p>\n<pre><code>public abstract class Duck {\n //在刚才Duck.java中加入以下二个方法。\n public void setFlyBehavior(FlyBehavior flyBehavior) {\n     this.flyBehavior=flyBehavior;\n }\n\n public void setQuackBehavior(QuackBehavior quackBehavior) {\n     this.quackBehavior=quackBehavior;\n }\n\n //其它方法同，省略...\n}\n</code></pre><p>测试类：</p>\n<pre><code>public class DuckTest {\n public static void main(String[] args) {\n     Duck duck=new MallardDuck();\n     duck.performFly();\n     duck.performQuack();\n     duck.setFlyBehavior(new FlyNoWay());\n     duck.performFly();\n }\n}\n</code></pre><p>如果，我们要加上火箭助力的飞行行为，只需再新建FlyBehavior.java接口的实现类型。而子类型可通过调用setQuackBehavior(…)方法动态改变。至此，在Duck.java增加新的行为给我们代码所带来的困绕已不复存在。</p>\n<p>该是总结的时侯了，让我们从代码的水中浮出来，做一只在水面上自由游动的鸭子吧:</p>\n<h2 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3.  解决方案\"></a>3.  解决方案</h2><ul>\n<li>MallardDuck 继承  Duck抽象类；          -&gt; 不变的内容</li>\n<li>FlyWithWings 实现 FlyBehavior接口；     -&gt; 变化的内容,行为或算法</li>\n<li>在Duck.java提供setter方法以装配关系；    -&gt; 动态设定行为</li>\n</ul>\n<p>以上就是策略模式的实现三步曲。接下来，让我们透过步骤看本质:</p>\n<ul>\n<li>初始，我们通过继承实现行为的重用，导致了代码的维护问题。          -&gt; 继承, is a</li>\n<li><p>接着，我们将行为剥离成单独的类型并声明为不变内容的实例变量并通过  -&gt; 组合, has a<br>setter方法以装配关系；</p>\n<pre><code>继承，可以实现静态代码的复用；\n组合，可以实现代码的弹性维护；\n使用组合代替继承，可以使代码更好地适应软件开发完后的需求变化。\n策略模式的本质：少用继承，多用组合\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>转自：<a href=\"http://www.javaeye.com/topic/328262\" target=\"_blank\" rel=\"noopener\">http://www.javaeye.com/topic/328262</a></p>\n<p>当我们掌握了Java的语法，当我们了解了面向对象的封装、继承、多态等特性，当我们可以用Swing、Servlet、JSP技术构建桌面以及Web应用，不意味着我们可以写出面向对象的程序，不意味着我们可以很好的实现代码复用，弹性维护，不意味着我们可以实现在维护、扩展基础上的代码复用。</p>\n<p>一把刀，可以使你制敌于无形而于江湖扬名，也可以只是一把利刃而使你切菜平静。Java，就是这把刀，它的威力取决于你使用的方式。当我们陷入无尽无止重复代码的泥沼，当我们面临牵一发而动全身的维护恶梦, 你应该想起“设计模式”这个行动秘笈。</p>\n<p>面向对象的精义，看似平淡，其实要经过艰苦实践才能成功。而构造OO系统的隐含经验于是被前人搜集而成并冠以“设计模式”之名。我们应该在编码行动初始就携带以它。接下来，让我们步“四人组”先行者之后，用中国文字、用实际案例领略模式于我们代码焕然一新的改变。</p>\n<h2 id=\"设计模式解读之一：-策略模式\"><a href=\"#设计模式解读之一：-策略模式\" class=\"headerlink\" title=\"设计模式解读之一： 策略模式\"></a>设计模式解读之一： 策略模式</h2><p><strong>1. 模式定义</strong></p>\n<p>把会变化的内容取出并封装起来，以便以后可以轻易地改动或扩充部分，而不影响不需要变化的其他部分；</p>\n<p><strong>2. 问题缘起</strong></p>\n<p>当涉及至代码维护时，为了复用目的而使用继承，结局并不完美。对父类的修改，会影响到子类型。在超类中增加的方法，会导致子类型有该方法，甚至连那些不该具备该方法的子类型也无法免除。示例，一个鸭子类型：</p>\n<pre><code>public abstract class Duck {\n    //所有的鸭子均会叫以及游泳，所以父类中处理这部分代码\n    public void quack() {\n        System.out.println(&quot;Quack&quot;);\n    }\n\n    public void swim() {\n        System.out.println(&quot;All ducks float, even decoys.&quot;);        \n    }\n\n    //因为每种鸭子的外观是不同的，所以父类中该方法是抽象的，由子类型自己完成。\n    public abstract void display();\n}\n\npublic class MallardDuck extends Duck {\n    //野鸭外观显示为绿头\n    public void display() {\n        System.out.println(&quot;Green head.&quot;);\n    }\n}\n\npublic class RedHeadDuck extends Duck {\n    //红头鸭显示为红头\n    public void display() {\n        System.out.println(&quot;Red head.&quot;);\n    }\n}\n\npublic class RubberDuck extends Duck {\n    //橡皮鸭叫声为吱吱叫，所以重写父类以改写行为\n    public void quack() {\n        System.out.println(&quot;Squeak&quot;);\n    }\n\n    //橡皮鸭显示为黄头\n    public void display() {\n        System.out.println(&quot;Yellow head.&quot;);\n    }\n}\n</code></pre><p>上述代码，初始实现得非常好。现在我们如果给Duck.java中加入fly()方法的话，那么在子类型中均有了该方法，于是我们看到了 会飞的橡皮鸭子，你看过吗？当然，我们可以在子类中通过空实现重写该方法以解决该方法对于子类型的影响。但是父类中再增加其它的方法呢？</p>\n<p>通过继承在父类中提供行为，会导致以下缺点：</p>\n<ul>\n<li>代码在多个子类中重复;</li>\n<li>运行时的行为不容易改变；</li>\n<li>改变会牵一发动全身，造成部分子类型不想要的改变；</li>\n</ul>\n<p>好啦，还是刚才鸭子的例子，你也许想到使用接口，将飞的行为、叫的行为定义为接口，然后让Duck的各种子类型实现这些接口。这时侯代码类似于：</p>\n<pre><code>public abstract class Duck {\n    //将变化的行为 fly() 以及quake()从Duck类中分离出去定义形成接口，有需求的子类中自行去实现\n\n    public void swim() {\n        System.out.println(&quot;All ducks float, even decoys.&quot;);        \n    }\n\n    public abstract void display();\n}\n\n//变化的 fly() 行为定义形成的接口\npublic interface FlyBehavior {\n    void fly();\n}\n\n//变化的 quack() 行为定义形成的接口\npublic interface QuackBehavior {\n    void quack();\n}\n\n//野鸭子会飞以及叫，所以实现接口  FlyBehavior, QuackBehavior\npublic class MallardDuck extends Duck implements FlyBehavior, QuackBehavior{\n    public void display() {\n        System.out.println(&quot;Green head.&quot;);\n    }\n\n    public void fly() {\n        System.out.println(&quot;Fly.&quot;);                \n    }\n\n    public void quack() {\n        System.out.println(&quot;Quack.&quot;);                \n    }\n}\n\n//红头鸭子会飞以及叫，所以也实现接口  FlyBehavior, QuackBehavior\npublic class RedHeadDuck extends Duck implements FlyBehavior, QuackBehavior{\n    public void display() {\n        System.out.println(&quot;Red head.&quot;);\n    }    \n\n    public void fly() {\n        System.out.println(&quot;Fly.&quot;);                \n    }\n\n    public void quack() {\n        System.out.println(&quot;Quack.&quot;);                \n    }    \n}\n\n//橡皮鸭不会飞，但会吱吱叫，所以只实现接口QuackBehavior\npublic class RubberDuck extends Duck implements QuackBehavior{\n    //橡皮鸭叫声为吱吱叫\n    public void quack() {\n        System.out.println(&quot;Squeak&quot;);\n    }\n\n    //橡皮鸭显示为黄头\n    public void display() {\n        System.out.println(&quot;Yellow head.&quot;);\n    }\n}\n</code></pre><p>上述代码虽然解决了一部分问题，让子类型可以有选择地提供一些行为(例如 fly() 方法将不会出现在橡皮鸭中).但我们也看到，野鸭子MallardDuck.java和红头鸭子RedHeadDuck.java的一些相同行为代码不能得到重复使用。很大程度上这是从一个火坑跳到另一个火坑。</p>\n<p>在一段程序之后，让我们从细节中跳出来，关注一些共性问题。不管使用什么语言，构建什么应用，在软件开发上，一直伴随着的不变的真理是：需要一直在变化。不管当初软件设计得多好，一段时间之后，总是需要成长与改变，否则软件就会死亡。</p>\n<p>我们知道，继承在某种程度上可以实现代码重用，但是父类(例如鸭子类Duck)的行为在子类型中是不断变化的，让所有子类型都有这些行为是不恰当的。我们可以将这些行为定义为接口，让Duck的各种子类型去实现，但接口不具有实现代码，所以实现接口无法达到代码复用。这意味着，当我们需要修改某个行为，必须往下追踪并在每一个定义此行为的类中修改它，一不小心，会造成新的错误。</p>\n<p>设计原则：</p>\n<pre><code>把应用中变化的地方独立出来，不要和那些不需要变化的代码混在一起。\n这样代码变化引起的不经意后果变少，系统变得更有弹性。\n</code></pre><p>按照上述设计原则，我们重新审视之前的Duck代码。</p>\n<p><strong>1) 分开变化的内容和不变的内容</strong></p>\n<p>Duck类中的行为 fly(), quack(), 每个子类型可能有自己特有的表现，这就是所谓的变化的内容。</p>\n<p>Duck类中的行为 swim() 每个子类型的表现均相同，这就是所谓不变的内容。</p>\n<p>我们将变化的内容从Duck()类中剥离出来单独定义形成接口以及一系列的实现类型。将变化的内容定义形成接口可实现变化内容和不变内容的剥离。其实现类型可实现变化内容的重用。这些实现类并非Duck.java的子类型，而是专门的一组实现类，称之为”行为类”。由行为类而不是Duck.java的子类型来实现接口。这样，才能保证变化的行为独立于不变的内容。于是我们有：</p>\n<p>变化的内容：</p>\n<pre><code>//变化的 fly() 行为定义形成的接口\npublic interface FlyBehavior {\n void fly();\n}\n\n//变化的 fly() 行为的实现类之一\npublic class FlyWithWings implements FlyBehavior {\n public void fly() {\n     System.out.println(&quot;I&apos;m flying.&quot;);\n }\n}\n\n//变化的 fly() 行为的实现类之二\npublic class FlyNoWay implements FlyBehavior {\n public void fly() {\n     System.out.println(&quot;I can&apos;t fly.&quot;);\n }\n}\n\n    -----------------------------------------------------------------\n\n//变化的 quack() 行为定义形成的接口\npublic interface QuackBehavior {\n void quack();\n}\n\n//变化的 quack() 行为实现类之一\npublic class Quack implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;Quack&quot;);\n }\n}\n\n//变化的 quack() 行为实现类之二\npublic class Squeak implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;Squeak.&quot;);\n }\n}\n\n//变化的 quack() 行为实现类之三\npublic class MuteQuack implements QuackBehavior {\n public void quack() {\n     System.out.println(&quot;&lt;&lt; Slience &gt;&gt;&quot;);\n }\n}\n</code></pre><p>通过以上设计，fly()行为以及quack()行为已经和Duck.java没有什么关系，可以充分得到复用。而且我们很容易增加新的行为, 既不影响现有的行为，也不影响Duck.java。但是，大家可能有个疑问，就是在面向对象中行为不是体现为方法吗？为什么现在被定义形成类(例如Squeak.java)？在OO中，类代表的”东西”一般是既有状态(实例变量）又有方法。只是在本例中碰巧”东西”是个行为。既使是行为，也有属性及方法，例如飞行行为，也需要一些属性记录飞行的状态，如飞行高度、速度等。</p>\n<p><strong>2) 整合变化的内容和不变的内容</strong></p>\n<p>Duck.java将 fly()以及quack()的行为委拖给行为类处理。</p>\n<p>不变的内容：</p>\n<pre><code>public abstract class Duck {\n     //将行为类声明为接口类型，降低对行为实现类型的依赖\n FlyBehavior flyBehavior;\n QuackBehavior quackBehavior;\n\n public void performFly() {\n     //不自行处理fly()行为，而是委拖给引用flyBehavior所指向的行为对象\n     flyBehavior.fly();\n }\n\n public void performQuack() {\n     quackBehavior.quack();\n }\n\n public void swim() {\n     System.out.println(&quot;All ducks float, even decoys.&quot;);        \n }\n\n public abstract void display();\n}\n\nDuck.java不关心如何进行 fly()以及quack(), 这些细节交由具体的行为类完成。\n\npublic class MallardDuck extends Duck{\n public MallardDuck() {\n     flyBehavior=new FlyWithWings();\n     quackBehavior=new Quack();        \n }\n\n public void display() {\n     System.out.println(&quot;Green head.&quot;);\n }\n}\n</code></pre><p>测试类：</p>\n<pre><code>public class DuckTest {\n public static void main(String[] args) {\n     Duck duck=new MallardDuck();\n     duck.performFly();\n     duck.performQuack();        \n }\n}\n</code></pre><p>在Duck.java子类型MallardDuck.java的构造方法中，直接实例化行为类型，在编译的时侯便指定具体行为类型。当然，我们可以：</p>\n<ul>\n<li><p>我们可以通过工厂模式或其它模式进一步解藕(可参考后续模式讲解);</p>\n</li>\n<li><p>或做到在运行时动态地改变行为。</p>\n</li>\n</ul>\n<p><strong>3) 动态设定行为</strong></p>\n<p>在父类Duck.java中增加设定行为类型的setter方法，接受行为类型对象的参数传入。为了降藕，行为参数被声明为接口类型。这样，既便在运行时，也可以通过调用这二个方法以改变行为。</p>\n<pre><code>public abstract class Duck {\n //在刚才Duck.java中加入以下二个方法。\n public void setFlyBehavior(FlyBehavior flyBehavior) {\n     this.flyBehavior=flyBehavior;\n }\n\n public void setQuackBehavior(QuackBehavior quackBehavior) {\n     this.quackBehavior=quackBehavior;\n }\n\n //其它方法同，省略...\n}\n</code></pre><p>测试类：</p>\n<pre><code>public class DuckTest {\n public static void main(String[] args) {\n     Duck duck=new MallardDuck();\n     duck.performFly();\n     duck.performQuack();\n     duck.setFlyBehavior(new FlyNoWay());\n     duck.performFly();\n }\n}\n</code></pre><p>如果，我们要加上火箭助力的飞行行为，只需再新建FlyBehavior.java接口的实现类型。而子类型可通过调用setQuackBehavior(…)方法动态改变。至此，在Duck.java增加新的行为给我们代码所带来的困绕已不复存在。</p>\n<p>该是总结的时侯了，让我们从代码的水中浮出来，做一只在水面上自由游动的鸭子吧:</p>\n<h2 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3.  解决方案\"></a>3.  解决方案</h2><ul>\n<li>MallardDuck 继承  Duck抽象类；          -&gt; 不变的内容</li>\n<li>FlyWithWings 实现 FlyBehavior接口；     -&gt; 变化的内容,行为或算法</li>\n<li>在Duck.java提供setter方法以装配关系；    -&gt; 动态设定行为</li>\n</ul>\n<p>以上就是策略模式的实现三步曲。接下来，让我们透过步骤看本质:</p>\n<ul>\n<li>初始，我们通过继承实现行为的重用，导致了代码的维护问题。          -&gt; 继承, is a</li>\n<li><p>接着，我们将行为剥离成单独的类型并声明为不变内容的实例变量并通过  -&gt; 组合, has a<br>setter方法以装配关系；</p>\n<pre><code>继承，可以实现静态代码的复用；\n组合，可以实现代码的弹性维护；\n使用组合代替继承，可以使代码更好地适应软件开发完后的需求变化。\n策略模式的本质：少用继承，多用组合\n</code></pre></li>\n</ul>\n"},{"title":"Centos7 安装配置elasticsearch-head","date":"2017-05-10T00:00:00.000Z","description":"Centos7 安装配置elasticsearch-head","_content":"\n# Centos7 安装配置elasticsearch-head\n\n## 安装nodejs\n\n1. 配置yum源\n\n        curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -\n\n2. 安装nodejs和npm\n    \n        yum install -y nodejs\n\n## 配置淘宝npm镜像\n\n1. 通过config命令\n\n        npm config set registry https://registry.npm.taobao.org \n        npm info underscore （如果上面配置正确这个命令会有字符串response）\n\n2. 命令行指定\n\n        npm --registry https://registry.npm.taobao.org info underscore \n\n3. 编辑 ~/.npmrc 加入下面内容\n\n        registry = https://registry.npm.taobao.org\n\n## 安装phantomjs（elasticsearch-head依赖）\n\n1. [下载](https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2)\n2. 安装配置\n    \n        tar xvf phantomjs-2.1.1-linux-x86_64.tar.bz2\n        export PHANTOMJS_HOME=/path/phantomjs/bin\n\n## 安装配置运行elasticsearch-head\n\n1. 安装\n    \n        git clone git://github.com/mobz/elasticsearch-head.git\n\n2. 配置\n\n        npm install\n\n        vim ./_site/app.js\n        app.App = ui.AbstractWidget.extend({\n                defaults: {\n                        base_uri: \"http://10.2.6.2:9200\"\n                }\n\n3. 运行访问\n    \n        npm run start\n        http://10.2.6.2:9100\n","source":"_posts/es-head.md","raw":"---\ntitle: Centos7 安装配置elasticsearch-head\ndate: '2017-05-10'\ndescription: Centos7 安装配置elasticsearch-head\ncategories:\n- nodejs\n\ntags:\n- nodejs\n- yum\n- centos\n- elasticsearch\n\n---\n\n# Centos7 安装配置elasticsearch-head\n\n## 安装nodejs\n\n1. 配置yum源\n\n        curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -\n\n2. 安装nodejs和npm\n    \n        yum install -y nodejs\n\n## 配置淘宝npm镜像\n\n1. 通过config命令\n\n        npm config set registry https://registry.npm.taobao.org \n        npm info underscore （如果上面配置正确这个命令会有字符串response）\n\n2. 命令行指定\n\n        npm --registry https://registry.npm.taobao.org info underscore \n\n3. 编辑 ~/.npmrc 加入下面内容\n\n        registry = https://registry.npm.taobao.org\n\n## 安装phantomjs（elasticsearch-head依赖）\n\n1. [下载](https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2)\n2. 安装配置\n    \n        tar xvf phantomjs-2.1.1-linux-x86_64.tar.bz2\n        export PHANTOMJS_HOME=/path/phantomjs/bin\n\n## 安装配置运行elasticsearch-head\n\n1. 安装\n    \n        git clone git://github.com/mobz/elasticsearch-head.git\n\n2. 配置\n\n        npm install\n\n        vim ./_site/app.js\n        app.App = ui.AbstractWidget.extend({\n                defaults: {\n                        base_uri: \"http://10.2.6.2:9200\"\n                }\n\n3. 运行访问\n    \n        npm run start\n        http://10.2.6.2:9100\n","slug":"es-head","published":1,"updated":"2018-06-20T02:59:55.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8gy0003vqqjj2v5fbep","content":"<h1 id=\"Centos7-安装配置elasticsearch-head\"><a href=\"#Centos7-安装配置elasticsearch-head\" class=\"headerlink\" title=\"Centos7 安装配置elasticsearch-head\"></a>Centos7 安装配置elasticsearch-head</h1><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li><p>配置yum源</p>\n<pre><code>curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -\n</code></pre></li>\n<li><p>安装nodejs和npm</p>\n<pre><code>yum install -y nodejs\n</code></pre></li>\n</ol>\n<h2 id=\"配置淘宝npm镜像\"><a href=\"#配置淘宝npm镜像\" class=\"headerlink\" title=\"配置淘宝npm镜像\"></a>配置淘宝npm镜像</h2><ol>\n<li><p>通过config命令</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n</code></pre></li>\n<li><p>命令行指定</p>\n<pre><code>npm --registry https://registry.npm.taobao.org info underscore \n</code></pre></li>\n<li><p>编辑 ~/.npmrc 加入下面内容</p>\n<pre><code>registry = https://registry.npm.taobao.org\n</code></pre></li>\n</ol>\n<h2 id=\"安装phantomjs（elasticsearch-head依赖）\"><a href=\"#安装phantomjs（elasticsearch-head依赖）\" class=\"headerlink\" title=\"安装phantomjs（elasticsearch-head依赖）\"></a>安装phantomjs（elasticsearch-head依赖）</h2><ol>\n<li><a href=\"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li><p>安装配置</p>\n<pre><code>tar xvf phantomjs-2.1.1-linux-x86_64.tar.bz2\nexport PHANTOMJS_HOME=/path/phantomjs/bin\n</code></pre></li>\n</ol>\n<h2 id=\"安装配置运行elasticsearch-head\"><a href=\"#安装配置运行elasticsearch-head\" class=\"headerlink\" title=\"安装配置运行elasticsearch-head\"></a>安装配置运行elasticsearch-head</h2><ol>\n<li><p>安装</p>\n<pre><code>git clone git://github.com/mobz/elasticsearch-head.git\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>npm install\n\nvim ./_site/app.js\napp.App = ui.AbstractWidget.extend({\n        defaults: {\n                base_uri: &quot;http://10.2.6.2:9200&quot;\n        }\n</code></pre></li>\n<li><p>运行访问</p>\n<pre><code>npm run start\nhttp://10.2.6.2:9100\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Centos7-安装配置elasticsearch-head\"><a href=\"#Centos7-安装配置elasticsearch-head\" class=\"headerlink\" title=\"Centos7 安装配置elasticsearch-head\"></a>Centos7 安装配置elasticsearch-head</h1><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li><p>配置yum源</p>\n<pre><code>curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -\n</code></pre></li>\n<li><p>安装nodejs和npm</p>\n<pre><code>yum install -y nodejs\n</code></pre></li>\n</ol>\n<h2 id=\"配置淘宝npm镜像\"><a href=\"#配置淘宝npm镜像\" class=\"headerlink\" title=\"配置淘宝npm镜像\"></a>配置淘宝npm镜像</h2><ol>\n<li><p>通过config命令</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n</code></pre></li>\n<li><p>命令行指定</p>\n<pre><code>npm --registry https://registry.npm.taobao.org info underscore \n</code></pre></li>\n<li><p>编辑 ~/.npmrc 加入下面内容</p>\n<pre><code>registry = https://registry.npm.taobao.org\n</code></pre></li>\n</ol>\n<h2 id=\"安装phantomjs（elasticsearch-head依赖）\"><a href=\"#安装phantomjs（elasticsearch-head依赖）\" class=\"headerlink\" title=\"安装phantomjs（elasticsearch-head依赖）\"></a>安装phantomjs（elasticsearch-head依赖）</h2><ol>\n<li><a href=\"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n<li><p>安装配置</p>\n<pre><code>tar xvf phantomjs-2.1.1-linux-x86_64.tar.bz2\nexport PHANTOMJS_HOME=/path/phantomjs/bin\n</code></pre></li>\n</ol>\n<h2 id=\"安装配置运行elasticsearch-head\"><a href=\"#安装配置运行elasticsearch-head\" class=\"headerlink\" title=\"安装配置运行elasticsearch-head\"></a>安装配置运行elasticsearch-head</h2><ol>\n<li><p>安装</p>\n<pre><code>git clone git://github.com/mobz/elasticsearch-head.git\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>npm install\n\nvim ./_site/app.js\napp.App = ui.AbstractWidget.extend({\n        defaults: {\n                base_uri: &quot;http://10.2.6.2:9200&quot;\n        }\n</code></pre></li>\n<li><p>运行访问</p>\n<pre><code>npm run start\nhttp://10.2.6.2:9100\n</code></pre></li>\n</ol>\n"},{"title":"gor搭建个人博客","date":"2015-07-08T00:00:00.000Z","description":"使用golang开源项目gor搭建个人博客","_content":"\n## 环境 ##\n\nwin7、golang、git\n\n## 下载安装gor ##\n\n[gor github](https://github.com/wendal/gor)\n里面有gor的安装和使用说明。\n\n这里主要说一下使用中遇到的问题：\n\n执行 go install github.com/wendal/gor/gor 操作的时候\n会报错：\n\nconnot find package \"github.com/howeyc/fsnotify\"\n\n处理方案如下：\n\n[https://github.com/howeyc/fsnotify](https://github.com/howeyc/fsnotify)\n\n下载zip包。\n\n解压缩zip包内容到$GOPATH/src/github.com/howeyc/fsnotify \n\n注意fsnotify目录下就是文件。\n\n然后再执行 go install github.com/wendal/gor/gor\n\n## 搭建github个人博客 ##\n\n参考 [http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html](http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html)\n\n首先要有一个github个人账号。\n\n创建public仓库，名字以username.github.com命名。\n\n进入username.github.com仓库，选择右侧的setting。\n\n在github Pages里面选择Launch automatic page generator按钮。\n\n在新页面选择博客主题然后保存。\n\n访问username.github.io即可看到个人主页。\n\n## 提交个人博客到github ##\n\n使用git 命令行或者客户端clone username.github.com库到本地git库。\n\n把gor编译生成的compile文件加下的内容，添加更新到本地git库。\n\n提交更新到github。\n\n访问username.github.io查看更新。\n\n（因为七牛认证还未通过，暂时无法提供图片外链，认证通过之后补充操作截图）\n\n\n\n\n","source":"_posts/gor-build-blog.md","raw":"---\ntitle: gor搭建个人博客\ndate: '2015-07-08'\ndescription: 使用golang开源项目gor搭建个人博客\ncategories:\n- golang\n\ntags:\n- blog\n- golang\n- gor\n\n---\n\n## 环境 ##\n\nwin7、golang、git\n\n## 下载安装gor ##\n\n[gor github](https://github.com/wendal/gor)\n里面有gor的安装和使用说明。\n\n这里主要说一下使用中遇到的问题：\n\n执行 go install github.com/wendal/gor/gor 操作的时候\n会报错：\n\nconnot find package \"github.com/howeyc/fsnotify\"\n\n处理方案如下：\n\n[https://github.com/howeyc/fsnotify](https://github.com/howeyc/fsnotify)\n\n下载zip包。\n\n解压缩zip包内容到$GOPATH/src/github.com/howeyc/fsnotify \n\n注意fsnotify目录下就是文件。\n\n然后再执行 go install github.com/wendal/gor/gor\n\n## 搭建github个人博客 ##\n\n参考 [http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html](http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html)\n\n首先要有一个github个人账号。\n\n创建public仓库，名字以username.github.com命名。\n\n进入username.github.com仓库，选择右侧的setting。\n\n在github Pages里面选择Launch automatic page generator按钮。\n\n在新页面选择博客主题然后保存。\n\n访问username.github.io即可看到个人主页。\n\n## 提交个人博客到github ##\n\n使用git 命令行或者客户端clone username.github.com库到本地git库。\n\n把gor编译生成的compile文件加下的内容，添加更新到本地git库。\n\n提交更新到github。\n\n访问username.github.io查看更新。\n\n（因为七牛认证还未通过，暂时无法提供图片外链，认证通过之后补充操作截图）\n\n\n\n\n","slug":"gor-build-blog","published":1,"updated":"2018-06-20T03:00:03.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8h50007vqqj5recliu8","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、golang、git</p>\n<h2 id=\"下载安装gor\"><a href=\"#下载安装gor\" class=\"headerlink\" title=\"下载安装gor\"></a>下载安装gor</h2><p><a href=\"https://github.com/wendal/gor\" target=\"_blank\" rel=\"noopener\">gor github</a><br>里面有gor的安装和使用说明。</p>\n<p>这里主要说一下使用中遇到的问题：</p>\n<p>执行 go install github.com/wendal/gor/gor 操作的时候<br>会报错：</p>\n<p>connot find package “github.com/howeyc/fsnotify”</p>\n<p>处理方案如下：</p>\n<p><a href=\"https://github.com/howeyc/fsnotify\" target=\"_blank\" rel=\"noopener\">https://github.com/howeyc/fsnotify</a></p>\n<p>下载zip包。</p>\n<p>解压缩zip包内容到$GOPATH/src/github.com/howeyc/fsnotify </p>\n<p>注意fsnotify目录下就是文件。</p>\n<p>然后再执行 go install github.com/wendal/gor/gor</p>\n<h2 id=\"搭建github个人博客\"><a href=\"#搭建github个人博客\" class=\"headerlink\" title=\"搭建github个人博客\"></a>搭建github个人博客</h2><p>参考 <a href=\"http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html</a></p>\n<p>首先要有一个github个人账号。</p>\n<p>创建public仓库，名字以username.github.com命名。</p>\n<p>进入username.github.com仓库，选择右侧的setting。</p>\n<p>在github Pages里面选择Launch automatic page generator按钮。</p>\n<p>在新页面选择博客主题然后保存。</p>\n<p>访问username.github.io即可看到个人主页。</p>\n<h2 id=\"提交个人博客到github\"><a href=\"#提交个人博客到github\" class=\"headerlink\" title=\"提交个人博客到github\"></a>提交个人博客到github</h2><p>使用git 命令行或者客户端clone username.github.com库到本地git库。</p>\n<p>把gor编译生成的compile文件加下的内容，添加更新到本地git库。</p>\n<p>提交更新到github。</p>\n<p>访问username.github.io查看更新。</p>\n<p>（因为七牛认证还未通过，暂时无法提供图片外链，认证通过之后补充操作截图）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、golang、git</p>\n<h2 id=\"下载安装gor\"><a href=\"#下载安装gor\" class=\"headerlink\" title=\"下载安装gor\"></a>下载安装gor</h2><p><a href=\"https://github.com/wendal/gor\" target=\"_blank\" rel=\"noopener\">gor github</a><br>里面有gor的安装和使用说明。</p>\n<p>这里主要说一下使用中遇到的问题：</p>\n<p>执行 go install github.com/wendal/gor/gor 操作的时候<br>会报错：</p>\n<p>connot find package “github.com/howeyc/fsnotify”</p>\n<p>处理方案如下：</p>\n<p><a href=\"https://github.com/howeyc/fsnotify\" target=\"_blank\" rel=\"noopener\">https://github.com/howeyc/fsnotify</a></p>\n<p>下载zip包。</p>\n<p>解压缩zip包内容到$GOPATH/src/github.com/howeyc/fsnotify </p>\n<p>注意fsnotify目录下就是文件。</p>\n<p>然后再执行 go install github.com/wendal/gor/gor</p>\n<h2 id=\"搭建github个人博客\"><a href=\"#搭建github个人博客\" class=\"headerlink\" title=\"搭建github个人博客\"></a>搭建github个人博客</h2><p>参考 <a href=\"http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html</a></p>\n<p>首先要有一个github个人账号。</p>\n<p>创建public仓库，名字以username.github.com命名。</p>\n<p>进入username.github.com仓库，选择右侧的setting。</p>\n<p>在github Pages里面选择Launch automatic page generator按钮。</p>\n<p>在新页面选择博客主题然后保存。</p>\n<p>访问username.github.io即可看到个人主页。</p>\n<h2 id=\"提交个人博客到github\"><a href=\"#提交个人博客到github\" class=\"headerlink\" title=\"提交个人博客到github\"></a>提交个人博客到github</h2><p>使用git 命令行或者客户端clone username.github.com库到本地git库。</p>\n<p>把gor编译生成的compile文件加下的内容，添加更新到本地git库。</p>\n<p>提交更新到github。</p>\n<p>访问username.github.io查看更新。</p>\n<p>（因为七牛认证还未通过，暂时无法提供图片外链，认证通过之后补充操作截图）</p>\n"},{"title":"java des加密实践","date":"2015-07-09T00:00:00.000Z","description":"java des加密算法实践","_content":"## 背景 ##\n\n工作中数据加密是C++实现的des加密，业务方是java语言。现在需要使用java对C++加密的内容进行解密。\n\n思路： \n\n根据C++的des加密算法实现，使用java进行逆向处理。\n\n具体代码如下：\n\n\timport javax.crypto.Cipher;\n\timport javax.crypto.SecretKey;\n\timport javax.crypto.spec.SecretKeySpec;\n\n\tpublic class DESUtil {\n\n\t    private static final String Key = \"d4odQA#5\";\n\t    private static final String Algorithm = \"DES\";  //定义 加密算法,可用 DES,DESede,Blowfish\n\t\n\t    // 加密字符串\n\t    public static String encryptMode(String src) {\n\t        String hexStr = \"\";\n\t        try {\n\t            Cipher c1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\t            SecretKey key = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n\t            c1.init(Cipher.ENCRYPT_MODE, key);\n\t            byte[] bytes = c1.doFinal(getByte(src));\n\t            hexStr = bytesToHexString(bytes);\n\t        } catch (java.security.NoSuchAlgorithmException e1) {\n\t            e1.printStackTrace();\n\t        } catch (javax.crypto.NoSuchPaddingException e2) {\n\t            e2.printStackTrace();\n\t        } catch (java.lang.Exception e3) {\n\t            e3.printStackTrace();\n\t        }\n\t        return hexStr;\n\t    }\n\t\n\t    // 解密字符串\n\t    public static String decryptMode(String hexStr) {\n\t        String src = \"\";\n\t        try {\n\t            Cipher c1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\t            SecretKey deskey = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n\t            c1.init(Cipher.DECRYPT_MODE , deskey);\n\t            byte[] bytes = c1.doFinal(hexString2Bytes(hexStr));\n\t            src = new String(bytes).trim();\n\t        } catch (java.security.NoSuchAlgorithmException e1) {\n\t            e1.printStackTrace();\n\t        } catch (javax.crypto.NoSuchPaddingException e2) {\n\t            e2.printStackTrace();\n\t        } catch (java.lang.Exception e3) {\n\t            e3.printStackTrace();\n\t        }\n\t        return src;\n\t    }\n\t\n\t    public static String bytesToHexString(byte[] digestByte) {\n\t        byte[] rtChar = new byte[digestByte.length * 2];\n\t        for (int i = 0; i < digestByte.length; i++) {\n\t            byte b1 = (byte) (digestByte[i] >> 4 & 0x0f);\n\t            byte b2 = (byte) (digestByte[i] & 0x0f);\n\t            rtChar[i * 2] = (byte) (b1 < 10 ? b1 + 48 : b1 + 55);\n\t            rtChar[i * 2 + 1] = (byte) (b2 < 10 ? b2 + 48 : b2 + 55);\n\t        }\n\t        return new String(rtChar).toLowerCase();\n\t    }\n\t\n\t    public static byte[] getByte(String szSrc){\n\t\n\t        int length = szSrc.length();\n\t        int a = length % 8;\n\t        int b = length / 8;\n\t        int len = 0;\n\t        if (a == 0){\n\t            len = b*8;\n\t        }else{\n\t            len = (b+1)*8;\n\t        }\n\t        byte[] src = new byte[len];\n\t        byte[] bytes = szSrc.getBytes();\n\t        for (int i = 0;i<bytes.length;i++){\n\t            src[i] = bytes[i];\n\t        }\n\t        return src;\n\t    }\n\t\n\t    public static byte[] hexString2Bytes(String src)\n\t    {\n\t        int len = src.length();\n\t        byte[] ret = new byte[len/2];\n\t        byte[] tmp = src.getBytes();\n\t        for(int i=0; i<len/2; ++i )\n\t        {\n\t            ret[i] = uniteBytes(tmp[i*2], tmp[i*2+1]);\n\t        }\n\t        return ret;\n\t    }\n\t\n\t    private static byte uniteBytes(byte src0, byte src1) {\n\t        byte _b0 = Byte.decode(\"0x\" + new String(new byte[]{src0})).byteValue();\n\t        _b0 = (byte) (_b0 << 4);\n\t        byte _b1 = Byte.decode(\"0x\" + new String(new byte[]{src1})).byteValue();\n\t        byte ret = (byte) (_b0 | _b1);\n\t        return ret;\n\t    }\n\t\n\t    public static void main(String[] args) {\n\t        String szSrc = \"root\";\n\t        System.out.println(\"加密前的字符串:\" + szSrc);\n\t        String s = encryptMode(szSrc);\n\t        System.out.println(\"加密后的字符串:\" + s);\n\t        String s1 = decryptMode(s);\n\t        System.out.println(\"解密后的字符串:\" + s1);\n\t    }\n\n\t}\n","source":"_posts/java-des.md","raw":"---\ntitle: java des加密实践\ndate: '2015-07-09'\ndescription: java des加密算法实践\ncategories:\n- java\ntags:\n- java\n- des\n\n---\n## 背景 ##\n\n工作中数据加密是C++实现的des加密，业务方是java语言。现在需要使用java对C++加密的内容进行解密。\n\n思路： \n\n根据C++的des加密算法实现，使用java进行逆向处理。\n\n具体代码如下：\n\n\timport javax.crypto.Cipher;\n\timport javax.crypto.SecretKey;\n\timport javax.crypto.spec.SecretKeySpec;\n\n\tpublic class DESUtil {\n\n\t    private static final String Key = \"d4odQA#5\";\n\t    private static final String Algorithm = \"DES\";  //定义 加密算法,可用 DES,DESede,Blowfish\n\t\n\t    // 加密字符串\n\t    public static String encryptMode(String src) {\n\t        String hexStr = \"\";\n\t        try {\n\t            Cipher c1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\t            SecretKey key = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n\t            c1.init(Cipher.ENCRYPT_MODE, key);\n\t            byte[] bytes = c1.doFinal(getByte(src));\n\t            hexStr = bytesToHexString(bytes);\n\t        } catch (java.security.NoSuchAlgorithmException e1) {\n\t            e1.printStackTrace();\n\t        } catch (javax.crypto.NoSuchPaddingException e2) {\n\t            e2.printStackTrace();\n\t        } catch (java.lang.Exception e3) {\n\t            e3.printStackTrace();\n\t        }\n\t        return hexStr;\n\t    }\n\t\n\t    // 解密字符串\n\t    public static String decryptMode(String hexStr) {\n\t        String src = \"\";\n\t        try {\n\t            Cipher c1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\t            SecretKey deskey = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n\t            c1.init(Cipher.DECRYPT_MODE , deskey);\n\t            byte[] bytes = c1.doFinal(hexString2Bytes(hexStr));\n\t            src = new String(bytes).trim();\n\t        } catch (java.security.NoSuchAlgorithmException e1) {\n\t            e1.printStackTrace();\n\t        } catch (javax.crypto.NoSuchPaddingException e2) {\n\t            e2.printStackTrace();\n\t        } catch (java.lang.Exception e3) {\n\t            e3.printStackTrace();\n\t        }\n\t        return src;\n\t    }\n\t\n\t    public static String bytesToHexString(byte[] digestByte) {\n\t        byte[] rtChar = new byte[digestByte.length * 2];\n\t        for (int i = 0; i < digestByte.length; i++) {\n\t            byte b1 = (byte) (digestByte[i] >> 4 & 0x0f);\n\t            byte b2 = (byte) (digestByte[i] & 0x0f);\n\t            rtChar[i * 2] = (byte) (b1 < 10 ? b1 + 48 : b1 + 55);\n\t            rtChar[i * 2 + 1] = (byte) (b2 < 10 ? b2 + 48 : b2 + 55);\n\t        }\n\t        return new String(rtChar).toLowerCase();\n\t    }\n\t\n\t    public static byte[] getByte(String szSrc){\n\t\n\t        int length = szSrc.length();\n\t        int a = length % 8;\n\t        int b = length / 8;\n\t        int len = 0;\n\t        if (a == 0){\n\t            len = b*8;\n\t        }else{\n\t            len = (b+1)*8;\n\t        }\n\t        byte[] src = new byte[len];\n\t        byte[] bytes = szSrc.getBytes();\n\t        for (int i = 0;i<bytes.length;i++){\n\t            src[i] = bytes[i];\n\t        }\n\t        return src;\n\t    }\n\t\n\t    public static byte[] hexString2Bytes(String src)\n\t    {\n\t        int len = src.length();\n\t        byte[] ret = new byte[len/2];\n\t        byte[] tmp = src.getBytes();\n\t        for(int i=0; i<len/2; ++i )\n\t        {\n\t            ret[i] = uniteBytes(tmp[i*2], tmp[i*2+1]);\n\t        }\n\t        return ret;\n\t    }\n\t\n\t    private static byte uniteBytes(byte src0, byte src1) {\n\t        byte _b0 = Byte.decode(\"0x\" + new String(new byte[]{src0})).byteValue();\n\t        _b0 = (byte) (_b0 << 4);\n\t        byte _b1 = Byte.decode(\"0x\" + new String(new byte[]{src1})).byteValue();\n\t        byte ret = (byte) (_b0 | _b1);\n\t        return ret;\n\t    }\n\t\n\t    public static void main(String[] args) {\n\t        String szSrc = \"root\";\n\t        System.out.println(\"加密前的字符串:\" + szSrc);\n\t        String s = encryptMode(szSrc);\n\t        System.out.println(\"加密后的字符串:\" + s);\n\t        String s1 = decryptMode(s);\n\t        System.out.println(\"解密后的字符串:\" + s1);\n\t    }\n\n\t}\n","slug":"java-des","published":1,"updated":"2018-06-20T03:00:26.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8h80008vqqjthxljeb6","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>工作中数据加密是C++实现的des加密，业务方是java语言。现在需要使用java对C++加密的内容进行解密。</p>\n<p>思路： </p>\n<p>根据C++的des加密算法实现，使用java进行逆向处理。</p>\n<p>具体代码如下：</p>\n<pre><code>import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DESUtil {\n\n    private static final String Key = &quot;d4odQA#5&quot;;\n    private static final String Algorithm = &quot;DES&quot;;  //定义 加密算法,可用 DES,DESede,Blowfish\n\n    // 加密字符串\n    public static String encryptMode(String src) {\n        String hexStr = &quot;&quot;;\n        try {\n            Cipher c1 = Cipher.getInstance(&quot;DES/ECB/NoPadding&quot;);\n            SecretKey key = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n            c1.init(Cipher.ENCRYPT_MODE, key);\n            byte[] bytes = c1.doFinal(getByte(src));\n            hexStr = bytesToHexString(bytes);\n        } catch (java.security.NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (javax.crypto.NoSuchPaddingException e2) {\n            e2.printStackTrace();\n        } catch (java.lang.Exception e3) {\n            e3.printStackTrace();\n        }\n        return hexStr;\n    }\n\n    // 解密字符串\n    public static String decryptMode(String hexStr) {\n        String src = &quot;&quot;;\n        try {\n            Cipher c1 = Cipher.getInstance(&quot;DES/ECB/NoPadding&quot;);\n            SecretKey deskey = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n            c1.init(Cipher.DECRYPT_MODE , deskey);\n            byte[] bytes = c1.doFinal(hexString2Bytes(hexStr));\n            src = new String(bytes).trim();\n        } catch (java.security.NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (javax.crypto.NoSuchPaddingException e2) {\n            e2.printStackTrace();\n        } catch (java.lang.Exception e3) {\n            e3.printStackTrace();\n        }\n        return src;\n    }\n\n    public static String bytesToHexString(byte[] digestByte) {\n        byte[] rtChar = new byte[digestByte.length * 2];\n        for (int i = 0; i &lt; digestByte.length; i++) {\n            byte b1 = (byte) (digestByte[i] &gt;&gt; 4 &amp; 0x0f);\n            byte b2 = (byte) (digestByte[i] &amp; 0x0f);\n            rtChar[i * 2] = (byte) (b1 &lt; 10 ? b1 + 48 : b1 + 55);\n            rtChar[i * 2 + 1] = (byte) (b2 &lt; 10 ? b2 + 48 : b2 + 55);\n        }\n        return new String(rtChar).toLowerCase();\n    }\n\n    public static byte[] getByte(String szSrc){\n\n        int length = szSrc.length();\n        int a = length % 8;\n        int b = length / 8;\n        int len = 0;\n        if (a == 0){\n            len = b*8;\n        }else{\n            len = (b+1)*8;\n        }\n        byte[] src = new byte[len];\n        byte[] bytes = szSrc.getBytes();\n        for (int i = 0;i&lt;bytes.length;i++){\n            src[i] = bytes[i];\n        }\n        return src;\n    }\n\n    public static byte[] hexString2Bytes(String src)\n    {\n        int len = src.length();\n        byte[] ret = new byte[len/2];\n        byte[] tmp = src.getBytes();\n        for(int i=0; i&lt;len/2; ++i )\n        {\n            ret[i] = uniteBytes(tmp[i*2], tmp[i*2+1]);\n        }\n        return ret;\n    }\n\n    private static byte uniteBytes(byte src0, byte src1) {\n        byte _b0 = Byte.decode(&quot;0x&quot; + new String(new byte[]{src0})).byteValue();\n        _b0 = (byte) (_b0 &lt;&lt; 4);\n        byte _b1 = Byte.decode(&quot;0x&quot; + new String(new byte[]{src1})).byteValue();\n        byte ret = (byte) (_b0 | _b1);\n        return ret;\n    }\n\n    public static void main(String[] args) {\n        String szSrc = &quot;root&quot;;\n        System.out.println(&quot;加密前的字符串:&quot; + szSrc);\n        String s = encryptMode(szSrc);\n        System.out.println(&quot;加密后的字符串:&quot; + s);\n        String s1 = decryptMode(s);\n        System.out.println(&quot;解密后的字符串:&quot; + s1);\n    }\n\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>工作中数据加密是C++实现的des加密，业务方是java语言。现在需要使用java对C++加密的内容进行解密。</p>\n<p>思路： </p>\n<p>根据C++的des加密算法实现，使用java进行逆向处理。</p>\n<p>具体代码如下：</p>\n<pre><code>import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DESUtil {\n\n    private static final String Key = &quot;d4odQA#5&quot;;\n    private static final String Algorithm = &quot;DES&quot;;  //定义 加密算法,可用 DES,DESede,Blowfish\n\n    // 加密字符串\n    public static String encryptMode(String src) {\n        String hexStr = &quot;&quot;;\n        try {\n            Cipher c1 = Cipher.getInstance(&quot;DES/ECB/NoPadding&quot;);\n            SecretKey key = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n            c1.init(Cipher.ENCRYPT_MODE, key);\n            byte[] bytes = c1.doFinal(getByte(src));\n            hexStr = bytesToHexString(bytes);\n        } catch (java.security.NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (javax.crypto.NoSuchPaddingException e2) {\n            e2.printStackTrace();\n        } catch (java.lang.Exception e3) {\n            e3.printStackTrace();\n        }\n        return hexStr;\n    }\n\n    // 解密字符串\n    public static String decryptMode(String hexStr) {\n        String src = &quot;&quot;;\n        try {\n            Cipher c1 = Cipher.getInstance(&quot;DES/ECB/NoPadding&quot;);\n            SecretKey deskey = new SecretKeySpec(Key.getBytes(), Algorithm);//生成加密解密需要的Key\n            c1.init(Cipher.DECRYPT_MODE , deskey);\n            byte[] bytes = c1.doFinal(hexString2Bytes(hexStr));\n            src = new String(bytes).trim();\n        } catch (java.security.NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (javax.crypto.NoSuchPaddingException e2) {\n            e2.printStackTrace();\n        } catch (java.lang.Exception e3) {\n            e3.printStackTrace();\n        }\n        return src;\n    }\n\n    public static String bytesToHexString(byte[] digestByte) {\n        byte[] rtChar = new byte[digestByte.length * 2];\n        for (int i = 0; i &lt; digestByte.length; i++) {\n            byte b1 = (byte) (digestByte[i] &gt;&gt; 4 &amp; 0x0f);\n            byte b2 = (byte) (digestByte[i] &amp; 0x0f);\n            rtChar[i * 2] = (byte) (b1 &lt; 10 ? b1 + 48 : b1 + 55);\n            rtChar[i * 2 + 1] = (byte) (b2 &lt; 10 ? b2 + 48 : b2 + 55);\n        }\n        return new String(rtChar).toLowerCase();\n    }\n\n    public static byte[] getByte(String szSrc){\n\n        int length = szSrc.length();\n        int a = length % 8;\n        int b = length / 8;\n        int len = 0;\n        if (a == 0){\n            len = b*8;\n        }else{\n            len = (b+1)*8;\n        }\n        byte[] src = new byte[len];\n        byte[] bytes = szSrc.getBytes();\n        for (int i = 0;i&lt;bytes.length;i++){\n            src[i] = bytes[i];\n        }\n        return src;\n    }\n\n    public static byte[] hexString2Bytes(String src)\n    {\n        int len = src.length();\n        byte[] ret = new byte[len/2];\n        byte[] tmp = src.getBytes();\n        for(int i=0; i&lt;len/2; ++i )\n        {\n            ret[i] = uniteBytes(tmp[i*2], tmp[i*2+1]);\n        }\n        return ret;\n    }\n\n    private static byte uniteBytes(byte src0, byte src1) {\n        byte _b0 = Byte.decode(&quot;0x&quot; + new String(new byte[]{src0})).byteValue();\n        _b0 = (byte) (_b0 &lt;&lt; 4);\n        byte _b1 = Byte.decode(&quot;0x&quot; + new String(new byte[]{src1})).byteValue();\n        byte ret = (byte) (_b0 | _b1);\n        return ret;\n    }\n\n    public static void main(String[] args) {\n        String szSrc = &quot;root&quot;;\n        System.out.println(&quot;加密前的字符串:&quot; + szSrc);\n        String s = encryptMode(szSrc);\n        System.out.println(&quot;加密后的字符串:&quot; + s);\n        String s1 = decryptMode(s);\n        System.out.println(&quot;解密后的字符串:&quot; + s1);\n    }\n\n}\n</code></pre>"},{"title":"本地搭建golang开发学习环境","date":"2015-07-07T02:19:33.000Z","description":"Win7环境搭建golang开发学习环境","_content":"由于工作原因要学习golang，根据golang推荐学习方法搭建本地A tour of GO环境，记录操作过程。\n\n<font size=\"5\">**环境**</font>\n\nwin7 64位\n\n<font size=\"4\">**下载并安装golang**</font>\n\n[http://www.golangtc.com/download](http://www.golangtc.com/download)\n\nexe文件install安装\n\n<font size=\"4\">**配置go环境变量**</font>\n\n环境变量添加GOROOT为GO的安装目录。\n\n环境变量添加GOPATH是GO的项目目录。\n\n当使用go get 获取内容时保存在GOPATH下，相当于workspace。\n\n![go环境变量配置](http://7xj99v.com1.z0.glb.clouddn.com/goenv.png)\n\n安装完成之后，cmd下执行go\n\n![go测试](http://7xj99v.com1.z0.glb.clouddn.com/gocmd.png)\n\n如图则安装配置成功\n\n\n<font size=\"4\">**安装Mercurial**</font>\n\n Mercurial 是一个跨平台的分布式版本控制软件。Mercurial主要由Python语言实现，不过也包含一个用C实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux。现在Mercurial已经被移植到Windows、Mac OS X 和大多数类Unix系统中。Mercurial主要由一个命令行程序组成，但现在也有了图形用户界面。\n\n 如果你的系统中没有安装Mercurial，你就无法使用hg命令。\n 下载：[https://mercurial.selenic.com/wiki/Download#Windows](https://mercurial.selenic.com/wiki/Download#Windows)\n\n\n<font size=\"4\">**安装python2.7**</font>\n\n因为Mercurial依赖python2.7 ，需安装python2.7\n下载：[https://www.python.org/downloads/release/python-2710/](https://www.python.org/downloads/release/python-2710/)\n\ninstall安装配置环境变量\n\n<font size=\"4\">**安装go-tour**</font>\n\n墙外用户命令行下执行：\n\n go get code.google.com/p/go-tour/gotour\n\n墙内用户：\n\ngo get github.com/zhanming/go-tour-cn/gotour.cn\n\ngo install github.com/zhanming/go-tour-cn/gotour.cn\n\n成功的话会在，$GOPATH/bin目录下生成gotour.cn.exe文件\n\n如果获取失败，可以在github：\n\n[https://github.com/zhanming/go-tour-cn.git](https://github.com/zhanming/go-tour-cn.git)\n\n下载zip包文件。然后解压缩到GOPATH下面的src目录。\n\n![tour 目录结构](http://7xj99v.com1.z0.glb.clouddn.com/tour.png)\n\n<font size=\"4\">**编译本地go tour**</font>\n\ngo install github.com/zhanming/go-tour-cn/gotour.cn\n\n在$GOPATH/src/github**/***/gotour.cn 目录下命令行执行 go build\n生成gotour.cn.exe\n\n<font size=\"4\">**运行go tour**</font>\n\ncmd下运行gotour.cn.exe 然后在浏览器输入http://127.0.0.1:3999\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/gostart.md","raw":"---\ntitle: 本地搭建golang开发学习环境\ndate: 2015-07-07 10:19:33\ndescription: Win7环境搭建golang开发学习环境\ncategories:\n- golang\n\ntags:\n- golang \n- tour\n\n---\n由于工作原因要学习golang，根据golang推荐学习方法搭建本地A tour of GO环境，记录操作过程。\n\n<font size=\"5\">**环境**</font>\n\nwin7 64位\n\n<font size=\"4\">**下载并安装golang**</font>\n\n[http://www.golangtc.com/download](http://www.golangtc.com/download)\n\nexe文件install安装\n\n<font size=\"4\">**配置go环境变量**</font>\n\n环境变量添加GOROOT为GO的安装目录。\n\n环境变量添加GOPATH是GO的项目目录。\n\n当使用go get 获取内容时保存在GOPATH下，相当于workspace。\n\n![go环境变量配置](http://7xj99v.com1.z0.glb.clouddn.com/goenv.png)\n\n安装完成之后，cmd下执行go\n\n![go测试](http://7xj99v.com1.z0.glb.clouddn.com/gocmd.png)\n\n如图则安装配置成功\n\n\n<font size=\"4\">**安装Mercurial**</font>\n\n Mercurial 是一个跨平台的分布式版本控制软件。Mercurial主要由Python语言实现，不过也包含一个用C实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux。现在Mercurial已经被移植到Windows、Mac OS X 和大多数类Unix系统中。Mercurial主要由一个命令行程序组成，但现在也有了图形用户界面。\n\n 如果你的系统中没有安装Mercurial，你就无法使用hg命令。\n 下载：[https://mercurial.selenic.com/wiki/Download#Windows](https://mercurial.selenic.com/wiki/Download#Windows)\n\n\n<font size=\"4\">**安装python2.7**</font>\n\n因为Mercurial依赖python2.7 ，需安装python2.7\n下载：[https://www.python.org/downloads/release/python-2710/](https://www.python.org/downloads/release/python-2710/)\n\ninstall安装配置环境变量\n\n<font size=\"4\">**安装go-tour**</font>\n\n墙外用户命令行下执行：\n\n go get code.google.com/p/go-tour/gotour\n\n墙内用户：\n\ngo get github.com/zhanming/go-tour-cn/gotour.cn\n\ngo install github.com/zhanming/go-tour-cn/gotour.cn\n\n成功的话会在，$GOPATH/bin目录下生成gotour.cn.exe文件\n\n如果获取失败，可以在github：\n\n[https://github.com/zhanming/go-tour-cn.git](https://github.com/zhanming/go-tour-cn.git)\n\n下载zip包文件。然后解压缩到GOPATH下面的src目录。\n\n![tour 目录结构](http://7xj99v.com1.z0.glb.clouddn.com/tour.png)\n\n<font size=\"4\">**编译本地go tour**</font>\n\ngo install github.com/zhanming/go-tour-cn/gotour.cn\n\n在$GOPATH/src/github**/***/gotour.cn 目录下命令行执行 go build\n生成gotour.cn.exe\n\n<font size=\"4\">**运行go tour**</font>\n\ncmd下运行gotour.cn.exe 然后在浏览器输入http://127.0.0.1:3999\n\n\n\n\n\n\n\n\n\n\n","slug":"gostart","published":1,"updated":"2018-06-20T02:19:50.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ha0009vqqj0jp9bg0h","content":"<p>由于工作原因要学习golang，根据golang推荐学习方法搭建本地A tour of GO环境，记录操作过程。</p>\n<font size=\"5\"><strong>环境</strong></font>\n\n<p>win7 64位</p>\n<font size=\"4\"><strong>下载并安装golang</strong></font>\n\n<p><a href=\"http://www.golangtc.com/download\" target=\"_blank\" rel=\"noopener\">http://www.golangtc.com/download</a></p>\n<p>exe文件install安装</p>\n<font size=\"4\"><strong>配置go环境变量</strong></font>\n\n<p>环境变量添加GOROOT为GO的安装目录。</p>\n<p>环境变量添加GOPATH是GO的项目目录。</p>\n<p>当使用go get 获取内容时保存在GOPATH下，相当于workspace。</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/goenv.png\" alt=\"go环境变量配置\"></p>\n<p>安装完成之后，cmd下执行go</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/gocmd.png\" alt=\"go测试\"></p>\n<p>如图则安装配置成功</p>\n<font size=\"4\"><strong>安装Mercurial</strong></font>\n\n<p> Mercurial 是一个跨平台的分布式版本控制软件。Mercurial主要由Python语言实现，不过也包含一个用C实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux。现在Mercurial已经被移植到Windows、Mac OS X 和大多数类Unix系统中。Mercurial主要由一个命令行程序组成，但现在也有了图形用户界面。</p>\n<p> 如果你的系统中没有安装Mercurial，你就无法使用hg命令。<br> 下载：<a href=\"https://mercurial.selenic.com/wiki/Download#Windows\" target=\"_blank\" rel=\"noopener\">https://mercurial.selenic.com/wiki/Download#Windows</a></p>\n<font size=\"4\"><strong>安装python2.7</strong></font>\n\n<p>因为Mercurial依赖python2.7 ，需安装python2.7<br>下载：<a href=\"https://www.python.org/downloads/release/python-2710/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/release/python-2710/</a></p>\n<p>install安装配置环境变量</p>\n<font size=\"4\"><strong>安装go-tour</strong></font>\n\n<p>墙外用户命令行下执行：</p>\n<p> go get code.google.com/p/go-tour/gotour</p>\n<p>墙内用户：</p>\n<p>go get github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>go install github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>成功的话会在，$GOPATH/bin目录下生成gotour.cn.exe文件</p>\n<p>如果获取失败，可以在github：</p>\n<p><a href=\"https://github.com/zhanming/go-tour-cn.git\" target=\"_blank\" rel=\"noopener\">https://github.com/zhanming/go-tour-cn.git</a></p>\n<p>下载zip包文件。然后解压缩到GOPATH下面的src目录。</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/tour.png\" alt=\"tour 目录结构\"></p>\n<font size=\"4\"><strong>编译本地go tour</strong></font>\n\n<p>go install github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>在$GOPATH/src/github<strong>/*</strong>/gotour.cn 目录下命令行执行 go build<br>生成gotour.cn.exe</p>\n<font size=\"4\"><strong>运行go tour</strong></font>\n\n<p>cmd下运行gotour.cn.exe 然后在浏览器输入<a href=\"http://127.0.0.1:3999\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3999</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于工作原因要学习golang，根据golang推荐学习方法搭建本地A tour of GO环境，记录操作过程。</p>\n<font size=\"5\"><strong>环境</strong></font>\n\n<p>win7 64位</p>\n<font size=\"4\"><strong>下载并安装golang</strong></font>\n\n<p><a href=\"http://www.golangtc.com/download\" target=\"_blank\" rel=\"noopener\">http://www.golangtc.com/download</a></p>\n<p>exe文件install安装</p>\n<font size=\"4\"><strong>配置go环境变量</strong></font>\n\n<p>环境变量添加GOROOT为GO的安装目录。</p>\n<p>环境变量添加GOPATH是GO的项目目录。</p>\n<p>当使用go get 获取内容时保存在GOPATH下，相当于workspace。</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/goenv.png\" alt=\"go环境变量配置\"></p>\n<p>安装完成之后，cmd下执行go</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/gocmd.png\" alt=\"go测试\"></p>\n<p>如图则安装配置成功</p>\n<font size=\"4\"><strong>安装Mercurial</strong></font>\n\n<p> Mercurial 是一个跨平台的分布式版本控制软件。Mercurial主要由Python语言实现，不过也包含一个用C实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux。现在Mercurial已经被移植到Windows、Mac OS X 和大多数类Unix系统中。Mercurial主要由一个命令行程序组成，但现在也有了图形用户界面。</p>\n<p> 如果你的系统中没有安装Mercurial，你就无法使用hg命令。<br> 下载：<a href=\"https://mercurial.selenic.com/wiki/Download#Windows\" target=\"_blank\" rel=\"noopener\">https://mercurial.selenic.com/wiki/Download#Windows</a></p>\n<font size=\"4\"><strong>安装python2.7</strong></font>\n\n<p>因为Mercurial依赖python2.7 ，需安装python2.7<br>下载：<a href=\"https://www.python.org/downloads/release/python-2710/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/release/python-2710/</a></p>\n<p>install安装配置环境变量</p>\n<font size=\"4\"><strong>安装go-tour</strong></font>\n\n<p>墙外用户命令行下执行：</p>\n<p> go get code.google.com/p/go-tour/gotour</p>\n<p>墙内用户：</p>\n<p>go get github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>go install github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>成功的话会在，$GOPATH/bin目录下生成gotour.cn.exe文件</p>\n<p>如果获取失败，可以在github：</p>\n<p><a href=\"https://github.com/zhanming/go-tour-cn.git\" target=\"_blank\" rel=\"noopener\">https://github.com/zhanming/go-tour-cn.git</a></p>\n<p>下载zip包文件。然后解压缩到GOPATH下面的src目录。</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/tour.png\" alt=\"tour 目录结构\"></p>\n<font size=\"4\"><strong>编译本地go tour</strong></font>\n\n<p>go install github.com/zhanming/go-tour-cn/gotour.cn</p>\n<p>在$GOPATH/src/github<strong>/*</strong>/gotour.cn 目录下命令行执行 go build<br>生成gotour.cn.exe</p>\n<font size=\"4\"><strong>运行go tour</strong></font>\n\n<p>cmd下运行gotour.cn.exe 然后在浏览器输入<a href=\"http://127.0.0.1:3999\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3999</a></p>\n"},{"title":"java代理","date":"2015-07-29T00:00:00.000Z","description":null,"_content":"\n（1）Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大 10 倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。\n\n（2）CGLib封装了asm，可以再运行期动态生成新的class。ASM 能够通过改造既有类，直接生成需要的代码。增强的代码是硬编码在新生成的类文件内部的，没有反射带来性能上的付出。同时，ASM 与 Proxy 编程不同，不需要为增强代码而新定义一个接口，生成的代码可以覆盖原来的类，或者是原始类的子类。\n\n（3）CGLib在不同频次的调用性能会发生变化，体现为调用频次越高、性能越好。\n\n（4）不同版本的JDK中JDK Proxy的性能也不尽相同，越高版本的JDK（JDK7及以上），性能提升越明显。\n","source":"_posts/java-proxy.md","raw":"---\ntitle: java代理\ndate: '2015-07-29'\ndescription:\ncategories:\n- java\ntags:\n- java\n- proxy\n---\n\n（1）Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大 10 倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。\n\n（2）CGLib封装了asm，可以再运行期动态生成新的class。ASM 能够通过改造既有类，直接生成需要的代码。增强的代码是硬编码在新生成的类文件内部的，没有反射带来性能上的付出。同时，ASM 与 Proxy 编程不同，不需要为增强代码而新定义一个接口，生成的代码可以覆盖原来的类，或者是原始类的子类。\n\n（3）CGLib在不同频次的调用性能会发生变化，体现为调用频次越高、性能越好。\n\n（4）不同版本的JDK中JDK Proxy的性能也不尽相同，越高版本的JDK（JDK7及以上），性能提升越明显。\n","slug":"java-proxy","published":1,"updated":"2018-06-20T03:01:31.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hc000cvqqjl06nsjwt","content":"<p>（1）Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大 10 倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。</p>\n<p>（2）CGLib封装了asm，可以再运行期动态生成新的class。ASM 能够通过改造既有类，直接生成需要的代码。增强的代码是硬编码在新生成的类文件内部的，没有反射带来性能上的付出。同时，ASM 与 Proxy 编程不同，不需要为增强代码而新定义一个接口，生成的代码可以覆盖原来的类，或者是原始类的子类。</p>\n<p>（3）CGLib在不同频次的调用性能会发生变化，体现为调用频次越高、性能越好。</p>\n<p>（4）不同版本的JDK中JDK Proxy的性能也不尽相同，越高版本的JDK（JDK7及以上），性能提升越明显。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>（1）Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大 10 倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。</p>\n<p>（2）CGLib封装了asm，可以再运行期动态生成新的class。ASM 能够通过改造既有类，直接生成需要的代码。增强的代码是硬编码在新生成的类文件内部的，没有反射带来性能上的付出。同时，ASM 与 Proxy 编程不同，不需要为增强代码而新定义一个接口，生成的代码可以覆盖原来的类，或者是原始类的子类。</p>\n<p>（3）CGLib在不同频次的调用性能会发生变化，体现为调用频次越高、性能越好。</p>\n<p>（4）不同版本的JDK中JDK Proxy的性能也不尽相同，越高版本的JDK（JDK7及以上），性能提升越明显。</p>\n"},{"title":"记一次处理http请求返回json数据中文乱码问题","date":"2015-07-10T00:00:00.000Z","description":"记录一次http请求返回json数据中文乱码问题","_content":"## 背景 ##\n\n项目中rest接口返回中文错误提示信息显示乱码。\n\n## 环境 ##\n\napache httpClient \n\nspring mvc\n\ntomcat\n\n## 处理过程 ##\n\n### 分析理清问题 ###\n\n接口部署在本地tomcat上时，使用Apache httpClient客户端访问无乱码。\n\n接口部署到服务器上的tomcat时，使用Apache httpClient客户端访问返回结果中文乱码。\n\n### 初次排查 ###\n\n检查HttpClient请求Content-type为UTF-8，排除客户端编码问题。\n\n### 再次排查 ###\n\n查看本地tomcat编码为默认编码，服务器tomcat编码为UTF-8编码。怀疑是tomcat编码问题导致的，\n修改本地tomcat编码为UTF-8，测试无乱码，排除tomcat编码问题。\n\n### 第三次排查 ###\n\n因为客户端和服务器编码都没有问题，怀疑是接口输出数据有问题。添加日志记录输出结果，发现数据无乱码。\n\n怀疑是spring mvc 视图返回json字符串时编码有问题。百度一下发现spring mvc确实存在视图返回json字符串时使用的是iso-8859-1编码。\n\n测试之，使用response out流输出json字符串，结果无乱码。\n\n确定问题和spring mvc返回json数据编码导致。\n\n暂时使用输出流直接输出json字符串。\n\n后续再测试网上提供的其他解决方案。\n\n\n","source":"_posts/json-encode.md","raw":"---\ntitle: 记一次处理http请求返回json数据中文乱码问题\ndate: '2015-07-10'\ndescription: 记录一次http请求返回json数据中文乱码问题\ncategories:\n- java\ntags:\n- java\n- spring mvc\n- http\n- json\n\n---\n## 背景 ##\n\n项目中rest接口返回中文错误提示信息显示乱码。\n\n## 环境 ##\n\napache httpClient \n\nspring mvc\n\ntomcat\n\n## 处理过程 ##\n\n### 分析理清问题 ###\n\n接口部署在本地tomcat上时，使用Apache httpClient客户端访问无乱码。\n\n接口部署到服务器上的tomcat时，使用Apache httpClient客户端访问返回结果中文乱码。\n\n### 初次排查 ###\n\n检查HttpClient请求Content-type为UTF-8，排除客户端编码问题。\n\n### 再次排查 ###\n\n查看本地tomcat编码为默认编码，服务器tomcat编码为UTF-8编码。怀疑是tomcat编码问题导致的，\n修改本地tomcat编码为UTF-8，测试无乱码，排除tomcat编码问题。\n\n### 第三次排查 ###\n\n因为客户端和服务器编码都没有问题，怀疑是接口输出数据有问题。添加日志记录输出结果，发现数据无乱码。\n\n怀疑是spring mvc 视图返回json字符串时编码有问题。百度一下发现spring mvc确实存在视图返回json字符串时使用的是iso-8859-1编码。\n\n测试之，使用response out流输出json字符串，结果无乱码。\n\n确定问题和spring mvc返回json数据编码导致。\n\n暂时使用输出流直接输出json字符串。\n\n后续再测试网上提供的其他解决方案。\n\n\n","slug":"json-encode","published":1,"updated":"2018-06-20T03:01:47.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8he000dvqqjgxfiysga","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>项目中rest接口返回中文错误提示信息显示乱码。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>apache httpClient </p>\n<p>spring mvc</p>\n<p>tomcat</p>\n<h2 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h2><h3 id=\"分析理清问题\"><a href=\"#分析理清问题\" class=\"headerlink\" title=\"分析理清问题\"></a>分析理清问题</h3><p>接口部署在本地tomcat上时，使用Apache httpClient客户端访问无乱码。</p>\n<p>接口部署到服务器上的tomcat时，使用Apache httpClient客户端访问返回结果中文乱码。</p>\n<h3 id=\"初次排查\"><a href=\"#初次排查\" class=\"headerlink\" title=\"初次排查\"></a>初次排查</h3><p>检查HttpClient请求Content-type为UTF-8，排除客户端编码问题。</p>\n<h3 id=\"再次排查\"><a href=\"#再次排查\" class=\"headerlink\" title=\"再次排查\"></a>再次排查</h3><p>查看本地tomcat编码为默认编码，服务器tomcat编码为UTF-8编码。怀疑是tomcat编码问题导致的，<br>修改本地tomcat编码为UTF-8，测试无乱码，排除tomcat编码问题。</p>\n<h3 id=\"第三次排查\"><a href=\"#第三次排查\" class=\"headerlink\" title=\"第三次排查\"></a>第三次排查</h3><p>因为客户端和服务器编码都没有问题，怀疑是接口输出数据有问题。添加日志记录输出结果，发现数据无乱码。</p>\n<p>怀疑是spring mvc 视图返回json字符串时编码有问题。百度一下发现spring mvc确实存在视图返回json字符串时使用的是iso-8859-1编码。</p>\n<p>测试之，使用response out流输出json字符串，结果无乱码。</p>\n<p>确定问题和spring mvc返回json数据编码导致。</p>\n<p>暂时使用输出流直接输出json字符串。</p>\n<p>后续再测试网上提供的其他解决方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>项目中rest接口返回中文错误提示信息显示乱码。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>apache httpClient </p>\n<p>spring mvc</p>\n<p>tomcat</p>\n<h2 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h2><h3 id=\"分析理清问题\"><a href=\"#分析理清问题\" class=\"headerlink\" title=\"分析理清问题\"></a>分析理清问题</h3><p>接口部署在本地tomcat上时，使用Apache httpClient客户端访问无乱码。</p>\n<p>接口部署到服务器上的tomcat时，使用Apache httpClient客户端访问返回结果中文乱码。</p>\n<h3 id=\"初次排查\"><a href=\"#初次排查\" class=\"headerlink\" title=\"初次排查\"></a>初次排查</h3><p>检查HttpClient请求Content-type为UTF-8，排除客户端编码问题。</p>\n<h3 id=\"再次排查\"><a href=\"#再次排查\" class=\"headerlink\" title=\"再次排查\"></a>再次排查</h3><p>查看本地tomcat编码为默认编码，服务器tomcat编码为UTF-8编码。怀疑是tomcat编码问题导致的，<br>修改本地tomcat编码为UTF-8，测试无乱码，排除tomcat编码问题。</p>\n<h3 id=\"第三次排查\"><a href=\"#第三次排查\" class=\"headerlink\" title=\"第三次排查\"></a>第三次排查</h3><p>因为客户端和服务器编码都没有问题，怀疑是接口输出数据有问题。添加日志记录输出结果，发现数据无乱码。</p>\n<p>怀疑是spring mvc 视图返回json字符串时编码有问题。百度一下发现spring mvc确实存在视图返回json字符串时使用的是iso-8859-1编码。</p>\n<p>测试之，使用response out流输出json字符串，结果无乱码。</p>\n<p>确定问题和spring mvc返回json数据编码导致。</p>\n<p>暂时使用输出流直接输出json字符串。</p>\n<p>后续再测试网上提供的其他解决方案。</p>\n"},{"title":"JSX简单说明","date":"2017-11-13T00:00:00.000Z","description":"JSX简单说明","_content":"\n# JSX使用说明\n\n看下面的代码段：\n\n```js\nconst element = <h1>Hello, world!</h1>;\n```\n\n这就是JSX，它既不是字符串也不是HTML，它是javascript的语言扩展。在React中推荐使用JSX来描述一个组件。虽然它看起来和模板语言有点相似，但是他具有js的所有功能。\n\n下面是JSX的一些基本知识。\n\n## 在JSX中使用表达式\n\n在JSX中可以使用js表达式，需要用大括号把js表达式包起来。\n\n比如，`2+2`、`user.name`、`format(name)`等有效的js表达式：\n```js\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n## JSX是一个js表达式\n\nJSX表达式编译之后是一个普通的js对象。\n```js\nfunction getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n```\n\n## 指定JSX对象属性\n\n可以使用字符串直接包起来：\n```js\nconst element = <div tabIndex=\"0\"></div>;\n```\n\n也可以用大括号包裹js表达式：\n```js\nconst element = <img src={user.avatarUrl}></img>;\n```\n这么设置属性的时候不能用双引号把大括号包起来。\n\n> **注意：**\n> 由于JSX语法更接近js语法，所以html元素的属性名转化为驼峰命名法表示。\n> \n> 比如，`class`变为`className`,`tabindex`变为`tabIndex`.\n\n## 在JSX中指定子元素\n\n对于没有text的标签直接用`/>`结束一个节点。\n\n对于开放的标签元素，JSX可以设置子元素。\n```js\nconst element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n```\n\n## JSX放xss注入攻击\n\n下面是用户输入安全的写法：\n```js\nconst title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n```\nReact DOM引擎会在渲染把嵌入的数据前进行转义。因此，可以防止注入不确定的XSS数据。所有的数据在渲染之前都会转为字符串。\n\n## JSX对象表示\n\nBabel会把JSX表达式编译为`React.createElement()`格式代码。\n\n下面两段代码表达的意思是一样的：\n```js\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\n```\n```js\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n```\n`React.createElement() `执行的时候会进行一些代码语法检查来减少一些bug，实际上它会生成这么一个对象：\n```js\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world'\n  }\n};\n```\n这些对象叫“React elements”.可以把它们想象成你在屏幕上看到的显示内容。React读取这些对象然后渲染浏览器并维护对象的状态。\n\n","source":"_posts/jsx.md","raw":"---\ntitle: JSX简单说明\ndate: '2017-11-13'\ndescription: JSX简单说明\ncategories: \n- react\n\ntags:\n\n- react\n- jsx\n\n---\n\n# JSX使用说明\n\n看下面的代码段：\n\n```js\nconst element = <h1>Hello, world!</h1>;\n```\n\n这就是JSX，它既不是字符串也不是HTML，它是javascript的语言扩展。在React中推荐使用JSX来描述一个组件。虽然它看起来和模板语言有点相似，但是他具有js的所有功能。\n\n下面是JSX的一些基本知识。\n\n## 在JSX中使用表达式\n\n在JSX中可以使用js表达式，需要用大括号把js表达式包起来。\n\n比如，`2+2`、`user.name`、`format(name)`等有效的js表达式：\n```js\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n## JSX是一个js表达式\n\nJSX表达式编译之后是一个普通的js对象。\n```js\nfunction getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n```\n\n## 指定JSX对象属性\n\n可以使用字符串直接包起来：\n```js\nconst element = <div tabIndex=\"0\"></div>;\n```\n\n也可以用大括号包裹js表达式：\n```js\nconst element = <img src={user.avatarUrl}></img>;\n```\n这么设置属性的时候不能用双引号把大括号包起来。\n\n> **注意：**\n> 由于JSX语法更接近js语法，所以html元素的属性名转化为驼峰命名法表示。\n> \n> 比如，`class`变为`className`,`tabindex`变为`tabIndex`.\n\n## 在JSX中指定子元素\n\n对于没有text的标签直接用`/>`结束一个节点。\n\n对于开放的标签元素，JSX可以设置子元素。\n```js\nconst element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n```\n\n## JSX放xss注入攻击\n\n下面是用户输入安全的写法：\n```js\nconst title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n```\nReact DOM引擎会在渲染把嵌入的数据前进行转义。因此，可以防止注入不确定的XSS数据。所有的数据在渲染之前都会转为字符串。\n\n## JSX对象表示\n\nBabel会把JSX表达式编译为`React.createElement()`格式代码。\n\n下面两段代码表达的意思是一样的：\n```js\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\n```\n```js\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n```\n`React.createElement() `执行的时候会进行一些代码语法检查来减少一些bug，实际上它会生成这么一个对象：\n```js\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world'\n  }\n};\n```\n这些对象叫“React elements”.可以把它们想象成你在屏幕上看到的显示内容。React读取这些对象然后渲染浏览器并维护对象的状态。\n\n","slug":"jsx","published":1,"updated":"2018-06-20T03:02:04.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hg000hvqqj1le1cxsf","content":"<h1 id=\"JSX使用说明\"><a href=\"#JSX使用说明\" class=\"headerlink\" title=\"JSX使用说明\"></a>JSX使用说明</h1><p>看下面的代码段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure>\n<p>这就是JSX，它既不是字符串也不是HTML，它是javascript的语言扩展。在React中推荐使用JSX来描述一个组件。虽然它看起来和模板语言有点相似，但是他具有js的所有功能。</p>\n<p>下面是JSX的一些基本知识。</p>\n<h2 id=\"在JSX中使用表达式\"><a href=\"#在JSX中使用表达式\" class=\"headerlink\" title=\"在JSX中使用表达式\"></a>在JSX中使用表达式</h2><p>在JSX中可以使用js表达式，需要用大括号把js表达式包起来。</p>\n<p>比如，<code>2+2</code>、<code>user.name</code>、<code>format(name)</code>等有效的js表达式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.firstName + <span class=\"string\">' '</span> + user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Harper'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Perez'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;h1&gt;</span><br><span class=\"line\">    Hello, &#123;formatName(user)&#125;!</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  element,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JSX是一个js表达式\"><a href=\"#JSX是一个js表达式\" class=\"headerlink\" title=\"JSX是一个js表达式\"></a>JSX是一个js表达式</h2><p>JSX表达式编译之后是一个普通的js对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGreeting</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指定JSX对象属性\"><a href=\"#指定JSX对象属性\" class=\"headerlink\" title=\"指定JSX对象属性\"></a>指定JSX对象属性</h2><p>可以使用字符串直接包起来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;div tabIndex=\"0\"&gt;&lt;/div&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>也可以用大括号包裹js表达式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;img src=&#123;user.avatarUrl&#125;&gt;&lt;/img&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>这么设置属性的时候不能用双引号把大括号包起来。</p>\n<blockquote>\n<p><strong>注意：</strong><br>由于JSX语法更接近js语法，所以html元素的属性名转化为驼峰命名法表示。</p>\n<p>比如，<code>class</code>变为<code>className</code>,<code>tabindex</code>变为<code>tabIndex</code>.</p>\n</blockquote>\n<h2 id=\"在JSX中指定子元素\"><a href=\"#在JSX中指定子元素\" class=\"headerlink\" title=\"在JSX中指定子元素\"></a>在JSX中指定子元素</h2><p>对于没有text的标签直接用<code>/&gt;</code>结束一个节点。</p>\n<p>对于开放的标签元素，JSX可以设置子元素。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;Good to see you here.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JSX放xss注入攻击\"><a href=\"#JSX放xss注入攻击\" class=\"headerlink\" title=\"JSX放xss注入攻击\"></a>JSX放xss注入攻击</h2><p>下面是用户输入安全的写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> title = response.potentiallyMaliciousInput;</span><br><span class=\"line\"><span class=\"comment\">// This is safe:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>React DOM引擎会在渲染把嵌入的数据前进行转义。因此，可以防止注入不确定的XSS数据。所有的数据在渲染之前都会转为字符串。</p>\n<h2 id=\"JSX对象表示\"><a href=\"#JSX对象表示\" class=\"headerlink\" title=\"JSX对象表示\"></a>JSX对象表示</h2><p>Babel会把JSX表达式编译为<code>React.createElement()</code>格式代码。</p>\n<p>下面两段代码表达的意思是一样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;h1 className=<span class=\"string\">\"greeting\"</span>&gt;</span><br><span class=\"line\">    Hello, world!</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">  &#123;<span class=\"attr\">className</span>: <span class=\"string\">'greeting'</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">'Hello, world!'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><code>React.createElement()</code>执行的时候会进行一些代码语法检查来减少一些bug，实际上它会生成这么一个对象：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    className: <span class=\"string\">'greeting'</span>,</span><br><span class=\"line\">    children: <span class=\"string\">'Hello, world'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这些对象叫“React elements”.可以把它们想象成你在屏幕上看到的显示内容。React读取这些对象然后渲染浏览器并维护对象的状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JSX使用说明\"><a href=\"#JSX使用说明\" class=\"headerlink\" title=\"JSX使用说明\"></a>JSX使用说明</h1><p>看下面的代码段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure>\n<p>这就是JSX，它既不是字符串也不是HTML，它是javascript的语言扩展。在React中推荐使用JSX来描述一个组件。虽然它看起来和模板语言有点相似，但是他具有js的所有功能。</p>\n<p>下面是JSX的一些基本知识。</p>\n<h2 id=\"在JSX中使用表达式\"><a href=\"#在JSX中使用表达式\" class=\"headerlink\" title=\"在JSX中使用表达式\"></a>在JSX中使用表达式</h2><p>在JSX中可以使用js表达式，需要用大括号把js表达式包起来。</p>\n<p>比如，<code>2+2</code>、<code>user.name</code>、<code>format(name)</code>等有效的js表达式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.firstName + <span class=\"string\">' '</span> + user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Harper'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Perez'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;h1&gt;</span><br><span class=\"line\">    Hello, &#123;formatName(user)&#125;!</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  element,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JSX是一个js表达式\"><a href=\"#JSX是一个js表达式\" class=\"headerlink\" title=\"JSX是一个js表达式\"></a>JSX是一个js表达式</h2><p>JSX表达式编译之后是一个普通的js对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGreeting</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指定JSX对象属性\"><a href=\"#指定JSX对象属性\" class=\"headerlink\" title=\"指定JSX对象属性\"></a>指定JSX对象属性</h2><p>可以使用字符串直接包起来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;div tabIndex=\"0\"&gt;&lt;/div&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>也可以用大括号包裹js表达式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;img src=&#123;user.avatarUrl&#125;&gt;&lt;/img&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>这么设置属性的时候不能用双引号把大括号包起来。</p>\n<blockquote>\n<p><strong>注意：</strong><br>由于JSX语法更接近js语法，所以html元素的属性名转化为驼峰命名法表示。</p>\n<p>比如，<code>class</code>变为<code>className</code>,<code>tabindex</code>变为<code>tabIndex</code>.</p>\n</blockquote>\n<h2 id=\"在JSX中指定子元素\"><a href=\"#在JSX中指定子元素\" class=\"headerlink\" title=\"在JSX中指定子元素\"></a>在JSX中指定子元素</h2><p>对于没有text的标签直接用<code>/&gt;</code>结束一个节点。</p>\n<p>对于开放的标签元素，JSX可以设置子元素。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;Good to see you here.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JSX放xss注入攻击\"><a href=\"#JSX放xss注入攻击\" class=\"headerlink\" title=\"JSX放xss注入攻击\"></a>JSX放xss注入攻击</h2><p>下面是用户输入安全的写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> title = response.potentiallyMaliciousInput;</span><br><span class=\"line\"><span class=\"comment\">// This is safe:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;;</span><br></pre></td></tr></table></figure></p>\n<p>React DOM引擎会在渲染把嵌入的数据前进行转义。因此，可以防止注入不确定的XSS数据。所有的数据在渲染之前都会转为字符串。</p>\n<h2 id=\"JSX对象表示\"><a href=\"#JSX对象表示\" class=\"headerlink\" title=\"JSX对象表示\"></a>JSX对象表示</h2><p>Babel会把JSX表达式编译为<code>React.createElement()</code>格式代码。</p>\n<p>下面两段代码表达的意思是一样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;h1 className=<span class=\"string\">\"greeting\"</span>&gt;</span><br><span class=\"line\">    Hello, world!</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">  &#123;<span class=\"attr\">className</span>: <span class=\"string\">'greeting'</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">'Hello, world!'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><code>React.createElement()</code>执行的时候会进行一些代码语法检查来减少一些bug，实际上它会生成这么一个对象：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    className: <span class=\"string\">'greeting'</span>,</span><br><span class=\"line\">    children: <span class=\"string\">'Hello, world'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这些对象叫“React elements”.可以把它们想象成你在屏幕上看到的显示内容。React读取这些对象然后渲染浏览器并维护对象的状态。</p>\n"},{"title":"学习计划","date":"2018-05-31T00:00:00.000Z","description":"复习计划","_content":"\n## JAVA基础\n\n- [ ] 面向对象设计五项基本原则\n- [ ] 面向对象设计三大特性\n- [ ] Java语言规范\n- [ ] 常用API\n- [ ] 集合框架\n- [ ] 异常处理\n- [ ] 流处理\n- [ ] NIO\n- [ ] AIO\n\n## JAVA并发\n\n- [ ] Java并发编程实践\n- [ ] 实战Java高并发程序设计\n\n## JAVA高级特性\n\n- [ ] Java虚拟机规范\n- [ ] 深入理解JVM虚拟机\n- [ ] 实践\n- [ ] 重构\n- [ ] JDK8新特性\n\n## 设计模式  \n\n- [ ] HeadFirst 设计模式\n- [ ] 实践设计模式\n\n## 网络\n\n- [ ] 基础\n    - [x] CIDR \n- [x] 图解HTTP\n- [ ] TCP/IP 卷一 卷二\n- [ ] 计算机网络 自顶向下\n- [ ] HTTP权威指南\n\n## 数据库\n\n## 基础数学\n\n- [ ] 高数\n- [ ] 线性代数\n- [ ] 概率论\n- [ ] 数值分析\n\n## 计算机基础\n\n- [ ] 深入理解计算机系统\n- [ ] 计算机程序构造与解释\n\n## 算法\n\n- [ ] 算法图解\n- [ ] 算法 第四版\n- [ ] leetcode\n\n## 大数据\n\n## 机器学习\n\n## 前端\n\n## python\n\n## golang\n\n## c\n\n## 软件工程\n\n## 工具\n\n## 问题处理\n\n\n###\n","source":"_posts/learning-plain.md","raw":"---\ntitle: 学习计划\ndate: '2018-05-31'\ndescription: 复习计划\ncategories: \n- learn\n\ntags:\n\n- 学习\n- 计划\n- 复习\n- learn\n- 总结\n---\n\n## JAVA基础\n\n- [ ] 面向对象设计五项基本原则\n- [ ] 面向对象设计三大特性\n- [ ] Java语言规范\n- [ ] 常用API\n- [ ] 集合框架\n- [ ] 异常处理\n- [ ] 流处理\n- [ ] NIO\n- [ ] AIO\n\n## JAVA并发\n\n- [ ] Java并发编程实践\n- [ ] 实战Java高并发程序设计\n\n## JAVA高级特性\n\n- [ ] Java虚拟机规范\n- [ ] 深入理解JVM虚拟机\n- [ ] 实践\n- [ ] 重构\n- [ ] JDK8新特性\n\n## 设计模式  \n\n- [ ] HeadFirst 设计模式\n- [ ] 实践设计模式\n\n## 网络\n\n- [ ] 基础\n    - [x] CIDR \n- [x] 图解HTTP\n- [ ] TCP/IP 卷一 卷二\n- [ ] 计算机网络 自顶向下\n- [ ] HTTP权威指南\n\n## 数据库\n\n## 基础数学\n\n- [ ] 高数\n- [ ] 线性代数\n- [ ] 概率论\n- [ ] 数值分析\n\n## 计算机基础\n\n- [ ] 深入理解计算机系统\n- [ ] 计算机程序构造与解释\n\n## 算法\n\n- [ ] 算法图解\n- [ ] 算法 第四版\n- [ ] leetcode\n\n## 大数据\n\n## 机器学习\n\n## 前端\n\n## python\n\n## golang\n\n## c\n\n## 软件工程\n\n## 工具\n\n## 问题处理\n\n\n###\n","slug":"learning-plain","published":1,"updated":"2018-06-20T03:02:26.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hi000ivqqjsz7ggrih","content":"<h2 id=\"JAVA基础\"><a href=\"#JAVA基础\" class=\"headerlink\" title=\"JAVA基础\"></a>JAVA基础</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向对象设计五项基本原则</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向对象设计三大特性</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java语言规范</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 常用API</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 集合框架</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 异常处理</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 流处理</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> NIO</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> AIO</li>\n</ul>\n<h2 id=\"JAVA并发\"><a href=\"#JAVA并发\" class=\"headerlink\" title=\"JAVA并发\"></a>JAVA并发</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java并发编程实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实战Java高并发程序设计</li>\n</ul>\n<h2 id=\"JAVA高级特性\"><a href=\"#JAVA高级特性\" class=\"headerlink\" title=\"JAVA高级特性\"></a>JAVA高级特性</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java虚拟机规范</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 深入理解JVM虚拟机</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 重构</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JDK8新特性</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> HeadFirst 设计模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实践设计模式</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 基础<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> CIDR </li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 图解HTTP</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> TCP/IP 卷一 卷二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 计算机网络 自顶向下</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> HTTP权威指南</li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h2 id=\"基础数学\"><a href=\"#基础数学\" class=\"headerlink\" title=\"基础数学\"></a>基础数学</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 高数</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线性代数</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 概率论</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 数值分析</li>\n</ul>\n<h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 深入理解计算机系统</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 计算机程序构造与解释</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 算法图解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 算法 第四版</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> leetcode</li>\n</ul>\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h2 id=\"golang\"><a href=\"#golang\" class=\"headerlink\" title=\"golang\"></a>golang</h2><h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c\"></a>c</h2><h2 id=\"软件工程\"><a href=\"#软件工程\" class=\"headerlink\" title=\"软件工程\"></a>软件工程</h2><h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JAVA基础\"><a href=\"#JAVA基础\" class=\"headerlink\" title=\"JAVA基础\"></a>JAVA基础</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向对象设计五项基本原则</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向对象设计三大特性</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java语言规范</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 常用API</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 集合框架</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 异常处理</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 流处理</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> NIO</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> AIO</li>\n</ul>\n<h2 id=\"JAVA并发\"><a href=\"#JAVA并发\" class=\"headerlink\" title=\"JAVA并发\"></a>JAVA并发</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java并发编程实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实战Java高并发程序设计</li>\n</ul>\n<h2 id=\"JAVA高级特性\"><a href=\"#JAVA高级特性\" class=\"headerlink\" title=\"JAVA高级特性\"></a>JAVA高级特性</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Java虚拟机规范</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 深入理解JVM虚拟机</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 重构</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JDK8新特性</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> HeadFirst 设计模式</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 实践设计模式</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 基础<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> CIDR </li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 图解HTTP</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> TCP/IP 卷一 卷二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 计算机网络 自顶向下</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> HTTP权威指南</li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h2 id=\"基础数学\"><a href=\"#基础数学\" class=\"headerlink\" title=\"基础数学\"></a>基础数学</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 高数</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线性代数</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 概率论</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 数值分析</li>\n</ul>\n<h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 深入理解计算机系统</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 计算机程序构造与解释</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 算法图解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 算法 第四版</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> leetcode</li>\n</ul>\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h2 id=\"golang\"><a href=\"#golang\" class=\"headerlink\" title=\"golang\"></a>golang</h2><h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c\"></a>c</h2><h2 id=\"软件工程\"><a href=\"#软件工程\" class=\"headerlink\" title=\"软件工程\"></a>软件工程</h2><h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>###</p>\n"},{"title":"centos7 lvs扩容","date":"2017-05-05T00:00:00.000Z","description":"centos7 lvs已挂载目录扩容","_content":"\n# centos7 lvs扩容\n\n1. 创建新分区\n\n        fdisk -l        //查看可用硬盘(如：sda)\n        fdisk /dev/sda  \n        n               //新增分区\n        w               //保存操作\n\n2. 修改分区格式为lvm\n    \n        fdisk /dev/sda\n        t               //修改分区类型\n        L               //显示分区类型表\n        8e              //修改分区类型为lvm\n        w               //保存修改\n\n3. 创建物理卷\n\n        pvcreate /dev/sda3 //创建物理卷sda3,最好重启一下\n\n4. centos卷组扩展\n\n        pvs                         //查看物理卷列表\n        vgs                         //查看卷组列表\n        vgextend centos /dev/sda3   //centos卷组追加/dev/sda3物理卷\n\n5. 逻辑卷扩展\n\n        lvs                                         //逻辑卷列表\n        lvextend -L +30G /dev/mapper/centos-root    //逻辑卷扩展大小 \n        lvscan            //List all logical volumes in all volume groups\n        xfs_growfs /dev/mapper/centos-root          //扩展xfs文件系统大小\n","source":"_posts/lvs.md","raw":"---\ntitle: centos7 lvs扩容\ndate: '2017-05-05'\ndescription: centos7 lvs已挂载目录扩容\ncategories:\n- linux\n\ntags:\n- linux\n- centos7\n- lvs\n- lvm\n- fdisk\n\n---\n\n# centos7 lvs扩容\n\n1. 创建新分区\n\n        fdisk -l        //查看可用硬盘(如：sda)\n        fdisk /dev/sda  \n        n               //新增分区\n        w               //保存操作\n\n2. 修改分区格式为lvm\n    \n        fdisk /dev/sda\n        t               //修改分区类型\n        L               //显示分区类型表\n        8e              //修改分区类型为lvm\n        w               //保存修改\n\n3. 创建物理卷\n\n        pvcreate /dev/sda3 //创建物理卷sda3,最好重启一下\n\n4. centos卷组扩展\n\n        pvs                         //查看物理卷列表\n        vgs                         //查看卷组列表\n        vgextend centos /dev/sda3   //centos卷组追加/dev/sda3物理卷\n\n5. 逻辑卷扩展\n\n        lvs                                         //逻辑卷列表\n        lvextend -L +30G /dev/mapper/centos-root    //逻辑卷扩展大小 \n        lvscan            //List all logical volumes in all volume groups\n        xfs_growfs /dev/mapper/centos-root          //扩展xfs文件系统大小\n","slug":"lvs","published":1,"updated":"2018-06-20T03:02:42.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hk000mvqqjoouxbcqi","content":"<h1 id=\"centos7-lvs扩容\"><a href=\"#centos7-lvs扩容\" class=\"headerlink\" title=\"centos7 lvs扩容\"></a>centos7 lvs扩容</h1><ol>\n<li><p>创建新分区</p>\n<pre><code>fdisk -l        //查看可用硬盘(如：sda)\nfdisk /dev/sda  \nn               //新增分区\nw               //保存操作\n</code></pre></li>\n<li><p>修改分区格式为lvm</p>\n<pre><code>fdisk /dev/sda\nt               //修改分区类型\nL               //显示分区类型表\n8e              //修改分区类型为lvm\nw               //保存修改\n</code></pre></li>\n<li><p>创建物理卷</p>\n<pre><code>pvcreate /dev/sda3 //创建物理卷sda3,最好重启一下\n</code></pre></li>\n<li><p>centos卷组扩展</p>\n<pre><code>pvs                         //查看物理卷列表\nvgs                         //查看卷组列表\nvgextend centos /dev/sda3   //centos卷组追加/dev/sda3物理卷\n</code></pre></li>\n<li><p>逻辑卷扩展</p>\n<pre><code>lvs                                         //逻辑卷列表\nlvextend -L +30G /dev/mapper/centos-root    //逻辑卷扩展大小 \nlvscan            //List all logical volumes in all volume groups\nxfs_growfs /dev/mapper/centos-root          //扩展xfs文件系统大小\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"centos7-lvs扩容\"><a href=\"#centos7-lvs扩容\" class=\"headerlink\" title=\"centos7 lvs扩容\"></a>centos7 lvs扩容</h1><ol>\n<li><p>创建新分区</p>\n<pre><code>fdisk -l        //查看可用硬盘(如：sda)\nfdisk /dev/sda  \nn               //新增分区\nw               //保存操作\n</code></pre></li>\n<li><p>修改分区格式为lvm</p>\n<pre><code>fdisk /dev/sda\nt               //修改分区类型\nL               //显示分区类型表\n8e              //修改分区类型为lvm\nw               //保存修改\n</code></pre></li>\n<li><p>创建物理卷</p>\n<pre><code>pvcreate /dev/sda3 //创建物理卷sda3,最好重启一下\n</code></pre></li>\n<li><p>centos卷组扩展</p>\n<pre><code>pvs                         //查看物理卷列表\nvgs                         //查看卷组列表\nvgextend centos /dev/sda3   //centos卷组追加/dev/sda3物理卷\n</code></pre></li>\n<li><p>逻辑卷扩展</p>\n<pre><code>lvs                                         //逻辑卷列表\nlvextend -L +30G /dev/mapper/centos-root    //逻辑卷扩展大小 \nlvscan            //List all logical volumes in all volume groups\nxfs_growfs /dev/mapper/centos-root          //扩展xfs文件系统大小\n</code></pre></li>\n</ol>\n"},{"title":"mongodb安装配置","date":"2015-07-08T00:00:00.000Z","description":"win7下安装配置mongodb","_content":"使用mongoDB zip安装包安装配置mongodb。\n## 安装 ##\n\n下载mongoDB安装包。\n\nhttps://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip\n\n解压缩安装包到 D盘根目录 D:\\mongoDB\n\nmongoDB目录下创建data\\db目录和data\\log目录\n分别用来安装db和日志文件，在log文件夹下创建一个日志文件MongoDB.log。\n\n运行cmd.exe进入dos命令界面，执行下列命令，启动MongoDB\n\n\tcd d:\\mongoDB\\bin\n\td:\\mongodb\\bin>mongod -dbpath \"d:\\mongoDB\\data\\db\"\n\n如果看到信息显示当前监听端口27017则表示启动成功。\n\n## 测试连接 ##\n\n打开一个cmd窗口，进入mongodb的bin目录，输入mongo或者mongo.exe，\n出现 connect to test 等信息说明测试通过，此时我们已经进入了test这个数据库。\n输入exit或者ctrl+C可退出。\n\n## 配置 ##\n\n当mongod.exe被关闭时，mongo.exe 就无法连接到数据库了。因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务。\n\n运行cmd，进入bin文件夹，执行下列命令：\n\n\td:\\mongoDB\\bin>mongod --dbpath \"d:\\mongoDB\\data\\db\" --logpath \"d:\\mongoDB\\data\\log\\MongoDB.log\" --install --serviceName \"MongoDB\"\n\n　这里MongoDB.log就是开始建立的日志文件，--serviceName \"MongoDB\" 设置服务名为MongoDB。\n\n　接着启动mongodb服务\n\n\td:\\mongodb\\bin>NET START MongoDB\n\n","source":"_posts/mongodb-install-config.md","raw":"---\ntitle: mongodb安装配置\ndate: '2015-07-08'\ndescription: win7下安装配置mongodb\n\ncategories:\n- mongodb\n\ntags:\n- mongodb\n---\n使用mongoDB zip安装包安装配置mongodb。\n## 安装 ##\n\n下载mongoDB安装包。\n\nhttps://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip\n\n解压缩安装包到 D盘根目录 D:\\mongoDB\n\nmongoDB目录下创建data\\db目录和data\\log目录\n分别用来安装db和日志文件，在log文件夹下创建一个日志文件MongoDB.log。\n\n运行cmd.exe进入dos命令界面，执行下列命令，启动MongoDB\n\n\tcd d:\\mongoDB\\bin\n\td:\\mongodb\\bin>mongod -dbpath \"d:\\mongoDB\\data\\db\"\n\n如果看到信息显示当前监听端口27017则表示启动成功。\n\n## 测试连接 ##\n\n打开一个cmd窗口，进入mongodb的bin目录，输入mongo或者mongo.exe，\n出现 connect to test 等信息说明测试通过，此时我们已经进入了test这个数据库。\n输入exit或者ctrl+C可退出。\n\n## 配置 ##\n\n当mongod.exe被关闭时，mongo.exe 就无法连接到数据库了。因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务。\n\n运行cmd，进入bin文件夹，执行下列命令：\n\n\td:\\mongoDB\\bin>mongod --dbpath \"d:\\mongoDB\\data\\db\" --logpath \"d:\\mongoDB\\data\\log\\MongoDB.log\" --install --serviceName \"MongoDB\"\n\n　这里MongoDB.log就是开始建立的日志文件，--serviceName \"MongoDB\" 设置服务名为MongoDB。\n\n　接着启动mongodb服务\n\n\td:\\mongodb\\bin>NET START MongoDB\n\n","slug":"mongodb-install-config","published":1,"updated":"2018-06-20T03:13:30.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hm000ovqqjs2iw3bc5","content":"<p>使用mongoDB zip安装包安装配置mongodb。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载mongoDB安装包。</p>\n<p><a href=\"https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip</a></p>\n<p>解压缩安装包到 D盘根目录 D:\\mongoDB</p>\n<p>mongoDB目录下创建data\\db目录和data\\log目录<br>分别用来安装db和日志文件，在log文件夹下创建一个日志文件MongoDB.log。</p>\n<p>运行cmd.exe进入dos命令界面，执行下列命令，启动MongoDB</p>\n<pre><code>cd d:\\mongoDB\\bin\nd:\\mongodb\\bin&gt;mongod -dbpath &quot;d:\\mongoDB\\data\\db&quot;\n</code></pre><p>如果看到信息显示当前监听端口27017则表示启动成功。</p>\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><p>打开一个cmd窗口，进入mongodb的bin目录，输入mongo或者mongo.exe，<br>出现 connect to test 等信息说明测试通过，此时我们已经进入了test这个数据库。<br>输入exit或者ctrl+C可退出。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>当mongod.exe被关闭时，mongo.exe 就无法连接到数据库了。因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务。</p>\n<p>运行cmd，进入bin文件夹，执行下列命令：</p>\n<pre><code>d:\\mongoDB\\bin&gt;mongod --dbpath &quot;d:\\mongoDB\\data\\db&quot; --logpath &quot;d:\\mongoDB\\data\\log\\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;\n</code></pre><p>　这里MongoDB.log就是开始建立的日志文件，–serviceName “MongoDB” 设置服务名为MongoDB。</p>\n<p>　接着启动mongodb服务</p>\n<pre><code>d:\\mongodb\\bin&gt;NET START MongoDB\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>使用mongoDB zip安装包安装配置mongodb。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载mongoDB安装包。</p>\n<p><a href=\"https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-3.0.4.zip</a></p>\n<p>解压缩安装包到 D盘根目录 D:\\mongoDB</p>\n<p>mongoDB目录下创建data\\db目录和data\\log目录<br>分别用来安装db和日志文件，在log文件夹下创建一个日志文件MongoDB.log。</p>\n<p>运行cmd.exe进入dos命令界面，执行下列命令，启动MongoDB</p>\n<pre><code>cd d:\\mongoDB\\bin\nd:\\mongodb\\bin&gt;mongod -dbpath &quot;d:\\mongoDB\\data\\db&quot;\n</code></pre><p>如果看到信息显示当前监听端口27017则表示启动成功。</p>\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><p>打开一个cmd窗口，进入mongodb的bin目录，输入mongo或者mongo.exe，<br>出现 connect to test 等信息说明测试通过，此时我们已经进入了test这个数据库。<br>输入exit或者ctrl+C可退出。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>当mongod.exe被关闭时，mongo.exe 就无法连接到数据库了。因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务。</p>\n<p>运行cmd，进入bin文件夹，执行下列命令：</p>\n<pre><code>d:\\mongoDB\\bin&gt;mongod --dbpath &quot;d:\\mongoDB\\data\\db&quot; --logpath &quot;d:\\mongoDB\\data\\log\\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;\n</code></pre><p>　这里MongoDB.log就是开始建立的日志文件，–serviceName “MongoDB” 设置服务名为MongoDB。</p>\n<p>　接着启动mongodb服务</p>\n<pre><code>d:\\mongodb\\bin&gt;NET START MongoDB\n</code></pre>"},{"title":"markdown pad 生成带目录的html","date":"2015-07-16T00:00:00.000Z","description":"使用markdown pad生成带目录的html","_content":"## 环境\nwin7、markdown pad 2\n\n## 目的\n\n使用markdown pad 2编辑生成wiki风格的接口文档\n\n## 处理方案\n\n使用markdown pad 2的导出功能和高级设置的Html head 编辑器功能。\n\n* 工具-->选项-->高级-->Html head 编辑器\n\n![html head 编辑器](http://7xj99v.com1.z0.glb.clouddn.com/markdownpadconfig.png)\n\n* 打开编辑器\n\n输入：\n\n\t<script>\n\t\tdocument.addEventListener(\"DOMContentLoaded\", function() {\n\t\t    // 生成目录列表\n\t\t    var outline = document.createElement(\"ul\");\n\t\t    outline.setAttribute(\"id\", \"outline-list\");\n\t\t    outline.style.cssText = \"border: 1px solid #ccc;\";\n\t\t    document.body.insertBefore(outline, document.body.childNodes[0]);\n\t\t    // 获取所有标题\n\t\t    var headers = document.querySelectorAll('h1,h2,h3,h4,h5,h6');\n\t\t    for (var i = 0; i < headers.length; i++) {\n\t\t        var header = headers[i];\n\t\t        var hash = _hashCode(header.textContent);\n\t\t        // MarkdownPad2无法为中文header正确生成id，这里生成一个\n\t\t        header.setAttribute(\"id\", header.tagName + hash);\n\t\t        // 找出它是H几，为后面前置空格准备\n\t\t        var prefix = parseInt(header.tagName.replace('H', ''), 10);\n\t\t        outline.appendChild(document.createElement(\"li\"));\n\t\t        var a = document.createElement(\"a\");\n\t\t        // 为目录项设置链接\n\t\t        a.setAttribute(\"href\", \"#\" + header.tagName + hash)\n\t\t        // 目录项文本前面放置对应的空格\n\t\t        a.innerHTML = new Array(prefix * 4).join('&nbsp;') + header.textContent;\n\t\t        outline.lastChild.appendChild(a);\n\t\t    }\n\t\t \n\t\t});\n\t \n\t\t// 类似Java的hash生成方式，为一段文字生成一段基本不会重复的数字\n\t\tfunction _hashCode(txt) {\n\t\t     var hash = 0;\n\t\t     if (txt.length == 0) return hash;\n\t\t     for (i = 0; i < txt.length; i++) {\n\t\t          char = txt.charCodeAt(i);\n\t\t          hash = ((hash<<5)-hash)+char;\n\t\t          hash = hash & hash; // Convert to 32bit integer\n\t\t     }\n\t\t     return hash;\n\t\t}\n\t</script>\n\n保存\n\n* 测试效果\n\n**新建test.md编辑：**\n\t\n\t## 标题1\n\t标题1内容\n\t### 标题11\n\t标题11内容\n\t### 标题12\n\t标题12内容\n\t## 标题2\n\t标题2内容\n\t### 标题21\n\t标题21内容\n\t### 标题22\n\t标题22内容\n\t## 标题3\n\t标题3内容\n\t### 标题31\n\t标题31内容\n\t### 标题32\n\t标题32内容\n\n**导出html文件**\n\n![导出html文件](http://7xj99v.com1.z0.glb.clouddn.com/export.png)\n\n**查看html文件**\n\n![查看html](http://7xj99v.com1.z0.glb.clouddn.com/html.png)\n\t\n\n\n\n","source":"_posts/md-catalog.md","raw":"---\ntitle: markdown pad 生成带目录的html\ndate: '2015-07-16'\ndescription: 使用markdown pad生成带目录的html\ncategories:\n- markdown\ntags:\n- markdown\n- config\n\n---\n## 环境\nwin7、markdown pad 2\n\n## 目的\n\n使用markdown pad 2编辑生成wiki风格的接口文档\n\n## 处理方案\n\n使用markdown pad 2的导出功能和高级设置的Html head 编辑器功能。\n\n* 工具-->选项-->高级-->Html head 编辑器\n\n![html head 编辑器](http://7xj99v.com1.z0.glb.clouddn.com/markdownpadconfig.png)\n\n* 打开编辑器\n\n输入：\n\n\t<script>\n\t\tdocument.addEventListener(\"DOMContentLoaded\", function() {\n\t\t    // 生成目录列表\n\t\t    var outline = document.createElement(\"ul\");\n\t\t    outline.setAttribute(\"id\", \"outline-list\");\n\t\t    outline.style.cssText = \"border: 1px solid #ccc;\";\n\t\t    document.body.insertBefore(outline, document.body.childNodes[0]);\n\t\t    // 获取所有标题\n\t\t    var headers = document.querySelectorAll('h1,h2,h3,h4,h5,h6');\n\t\t    for (var i = 0; i < headers.length; i++) {\n\t\t        var header = headers[i];\n\t\t        var hash = _hashCode(header.textContent);\n\t\t        // MarkdownPad2无法为中文header正确生成id，这里生成一个\n\t\t        header.setAttribute(\"id\", header.tagName + hash);\n\t\t        // 找出它是H几，为后面前置空格准备\n\t\t        var prefix = parseInt(header.tagName.replace('H', ''), 10);\n\t\t        outline.appendChild(document.createElement(\"li\"));\n\t\t        var a = document.createElement(\"a\");\n\t\t        // 为目录项设置链接\n\t\t        a.setAttribute(\"href\", \"#\" + header.tagName + hash)\n\t\t        // 目录项文本前面放置对应的空格\n\t\t        a.innerHTML = new Array(prefix * 4).join('&nbsp;') + header.textContent;\n\t\t        outline.lastChild.appendChild(a);\n\t\t    }\n\t\t \n\t\t});\n\t \n\t\t// 类似Java的hash生成方式，为一段文字生成一段基本不会重复的数字\n\t\tfunction _hashCode(txt) {\n\t\t     var hash = 0;\n\t\t     if (txt.length == 0) return hash;\n\t\t     for (i = 0; i < txt.length; i++) {\n\t\t          char = txt.charCodeAt(i);\n\t\t          hash = ((hash<<5)-hash)+char;\n\t\t          hash = hash & hash; // Convert to 32bit integer\n\t\t     }\n\t\t     return hash;\n\t\t}\n\t</script>\n\n保存\n\n* 测试效果\n\n**新建test.md编辑：**\n\t\n\t## 标题1\n\t标题1内容\n\t### 标题11\n\t标题11内容\n\t### 标题12\n\t标题12内容\n\t## 标题2\n\t标题2内容\n\t### 标题21\n\t标题21内容\n\t### 标题22\n\t标题22内容\n\t## 标题3\n\t标题3内容\n\t### 标题31\n\t标题31内容\n\t### 标题32\n\t标题32内容\n\n**导出html文件**\n\n![导出html文件](http://7xj99v.com1.z0.glb.clouddn.com/export.png)\n\n**查看html文件**\n\n![查看html](http://7xj99v.com1.z0.glb.clouddn.com/html.png)\n\t\n\n\n\n","slug":"md-catalog","published":1,"updated":"2018-06-20T03:02:54.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ho000tvqqjlj0t0w54","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、markdown pad 2</p>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>使用markdown pad 2编辑生成wiki风格的接口文档</p>\n<h2 id=\"处理方案\"><a href=\"#处理方案\" class=\"headerlink\" title=\"处理方案\"></a>处理方案</h2><p>使用markdown pad 2的导出功能和高级设置的Html head 编辑器功能。</p>\n<ul>\n<li>工具–&gt;选项–&gt;高级–&gt;Html head 编辑器</li>\n</ul>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/markdownpadconfig.png\" alt=\"html head 编辑器\"></p>\n<ul>\n<li>打开编辑器</li>\n</ul>\n<p>输入：</p>\n<pre><code>&lt;script&gt;\n    document.addEventListener(&quot;DOMContentLoaded&quot;, function() {\n        // 生成目录列表\n        var outline = document.createElement(&quot;ul&quot;);\n        outline.setAttribute(&quot;id&quot;, &quot;outline-list&quot;);\n        outline.style.cssText = &quot;border: 1px solid #ccc;&quot;;\n        document.body.insertBefore(outline, document.body.childNodes[0]);\n        // 获取所有标题\n        var headers = document.querySelectorAll(&apos;h1,h2,h3,h4,h5,h6&apos;);\n        for (var i = 0; i &lt; headers.length; i++) {\n            var header = headers[i];\n            var hash = _hashCode(header.textContent);\n            // MarkdownPad2无法为中文header正确生成id，这里生成一个\n            header.setAttribute(&quot;id&quot;, header.tagName + hash);\n            // 找出它是H几，为后面前置空格准备\n            var prefix = parseInt(header.tagName.replace(&apos;H&apos;, &apos;&apos;), 10);\n            outline.appendChild(document.createElement(&quot;li&quot;));\n            var a = document.createElement(&quot;a&quot;);\n            // 为目录项设置链接\n            a.setAttribute(&quot;href&quot;, &quot;#&quot; + header.tagName + hash)\n            // 目录项文本前面放置对应的空格\n            a.innerHTML = new Array(prefix * 4).join(&apos;&amp;nbsp;&apos;) + header.textContent;\n            outline.lastChild.appendChild(a);\n        }\n\n    });\n\n    // 类似Java的hash生成方式，为一段文字生成一段基本不会重复的数字\n    function _hashCode(txt) {\n         var hash = 0;\n         if (txt.length == 0) return hash;\n         for (i = 0; i &lt; txt.length; i++) {\n              char = txt.charCodeAt(i);\n              hash = ((hash&lt;&lt;5)-hash)+char;\n              hash = hash &amp; hash; // Convert to 32bit integer\n         }\n         return hash;\n    }\n&lt;/script&gt;\n</code></pre><p>保存</p>\n<ul>\n<li>测试效果</li>\n</ul>\n<p><strong>新建test.md编辑：</strong></p>\n<pre><code>## 标题1\n标题1内容\n### 标题11\n标题11内容\n### 标题12\n标题12内容\n## 标题2\n标题2内容\n### 标题21\n标题21内容\n### 标题22\n标题22内容\n## 标题3\n标题3内容\n### 标题31\n标题31内容\n### 标题32\n标题32内容\n</code></pre><p><strong>导出html文件</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/export.png\" alt=\"导出html文件\"></p>\n<p><strong>查看html文件</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/html.png\" alt=\"查看html\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、markdown pad 2</p>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>使用markdown pad 2编辑生成wiki风格的接口文档</p>\n<h2 id=\"处理方案\"><a href=\"#处理方案\" class=\"headerlink\" title=\"处理方案\"></a>处理方案</h2><p>使用markdown pad 2的导出功能和高级设置的Html head 编辑器功能。</p>\n<ul>\n<li>工具–&gt;选项–&gt;高级–&gt;Html head 编辑器</li>\n</ul>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/markdownpadconfig.png\" alt=\"html head 编辑器\"></p>\n<ul>\n<li>打开编辑器</li>\n</ul>\n<p>输入：</p>\n<pre><code>&lt;script&gt;\n    document.addEventListener(&quot;DOMContentLoaded&quot;, function() {\n        // 生成目录列表\n        var outline = document.createElement(&quot;ul&quot;);\n        outline.setAttribute(&quot;id&quot;, &quot;outline-list&quot;);\n        outline.style.cssText = &quot;border: 1px solid #ccc;&quot;;\n        document.body.insertBefore(outline, document.body.childNodes[0]);\n        // 获取所有标题\n        var headers = document.querySelectorAll(&apos;h1,h2,h3,h4,h5,h6&apos;);\n        for (var i = 0; i &lt; headers.length; i++) {\n            var header = headers[i];\n            var hash = _hashCode(header.textContent);\n            // MarkdownPad2无法为中文header正确生成id，这里生成一个\n            header.setAttribute(&quot;id&quot;, header.tagName + hash);\n            // 找出它是H几，为后面前置空格准备\n            var prefix = parseInt(header.tagName.replace(&apos;H&apos;, &apos;&apos;), 10);\n            outline.appendChild(document.createElement(&quot;li&quot;));\n            var a = document.createElement(&quot;a&quot;);\n            // 为目录项设置链接\n            a.setAttribute(&quot;href&quot;, &quot;#&quot; + header.tagName + hash)\n            // 目录项文本前面放置对应的空格\n            a.innerHTML = new Array(prefix * 4).join(&apos;&amp;nbsp;&apos;) + header.textContent;\n            outline.lastChild.appendChild(a);\n        }\n\n    });\n\n    // 类似Java的hash生成方式，为一段文字生成一段基本不会重复的数字\n    function _hashCode(txt) {\n         var hash = 0;\n         if (txt.length == 0) return hash;\n         for (i = 0; i &lt; txt.length; i++) {\n              char = txt.charCodeAt(i);\n              hash = ((hash&lt;&lt;5)-hash)+char;\n              hash = hash &amp; hash; // Convert to 32bit integer\n         }\n         return hash;\n    }\n&lt;/script&gt;\n</code></pre><p>保存</p>\n<ul>\n<li>测试效果</li>\n</ul>\n<p><strong>新建test.md编辑：</strong></p>\n<pre><code>## 标题1\n标题1内容\n### 标题11\n标题11内容\n### 标题12\n标题12内容\n## 标题2\n标题2内容\n### 标题21\n标题21内容\n### 标题22\n标题22内容\n## 标题3\n标题3内容\n### 标题31\n标题31内容\n### 标题32\n标题32内容\n</code></pre><p><strong>导出html文件</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/export.png\" alt=\"导出html文件\"></p>\n<p><strong>查看html文件</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/html.png\" alt=\"查看html\"></p>\n"},{"title":"nexus","date":"2017-05-10T00:00:00.000Z","description":"nexnus搭建maven私服配置导包","_content":"\n# nexnus搭建maven私服配置导包\n\n## 安装配置\n\n1. 下载安装包\n\n        sudo wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.3.1-01-unix.tar.gz\n\n2. 安装运行\n\n        tar zxvf nexus-3.3.1-01-unix.tar.gz \n        cd nexus-3.3.1-01/      \n        nohup ./nexus run\n    \n3. maven setting.xml配置\n    \n        <servers>\n            <server>  \n                <id>nexus</id>  \n                <username>admin</username>  \n                <password>admin123</password>  \n            </server>  \n        </servers>\n\n4. pom.xml配置\n\n        <repositories>\n                <repository>\n                    <id>nexus</id>\n                    <name>Team Nexus Repository</name>\n                    <url>http://10.2.6.1:8081/repository/maven-public/</url>\n                </repository>\n            </repositories>\n\n        <pluginRepositories>\n            <pluginRepository>\n                <id>nexus</id>\n                <name>Team Nexus Repository</name>\n                <url>http://10.2.6.1:8081/repository/maven-public/</url>\n            </pluginRepository>\n        </pluginRepositories>\n        \n5. mvn deploy使用\n\n        mvn deploy:deploy-file -DgroupId=${groupId} -DartifactId=${artifactId} -Dversion=${version} -Dpackaging=jar -Dfile=${path/*.jar} -Durl=http://10.2.6.1:8081/repository/thirdparty/ -DrepositoryId=nexus \n        \n","source":"_posts/nexus.md","raw":"---\ntitle: nexus\ndate: '2017-05-10'\ndescription: nexnus搭建maven私服配置导包\ncategories: \n- nexus\n\ntags:\n- nexus\n- maven\n\n---\n\n# nexnus搭建maven私服配置导包\n\n## 安装配置\n\n1. 下载安装包\n\n        sudo wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.3.1-01-unix.tar.gz\n\n2. 安装运行\n\n        tar zxvf nexus-3.3.1-01-unix.tar.gz \n        cd nexus-3.3.1-01/      \n        nohup ./nexus run\n    \n3. maven setting.xml配置\n    \n        <servers>\n            <server>  \n                <id>nexus</id>  \n                <username>admin</username>  \n                <password>admin123</password>  \n            </server>  \n        </servers>\n\n4. pom.xml配置\n\n        <repositories>\n                <repository>\n                    <id>nexus</id>\n                    <name>Team Nexus Repository</name>\n                    <url>http://10.2.6.1:8081/repository/maven-public/</url>\n                </repository>\n            </repositories>\n\n        <pluginRepositories>\n            <pluginRepository>\n                <id>nexus</id>\n                <name>Team Nexus Repository</name>\n                <url>http://10.2.6.1:8081/repository/maven-public/</url>\n            </pluginRepository>\n        </pluginRepositories>\n        \n5. mvn deploy使用\n\n        mvn deploy:deploy-file -DgroupId=${groupId} -DartifactId=${artifactId} -Dversion=${version} -Dpackaging=jar -Dfile=${path/*.jar} -Durl=http://10.2.6.1:8081/repository/thirdparty/ -DrepositoryId=nexus \n        \n","slug":"nexus","published":1,"updated":"2018-06-20T03:03:26.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ht000vvqqj0bs11xuh","content":"<h1 id=\"nexnus搭建maven私服配置导包\"><a href=\"#nexnus搭建maven私服配置导包\" class=\"headerlink\" title=\"nexnus搭建maven私服配置导包\"></a>nexnus搭建maven私服配置导包</h1><h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><ol>\n<li><p>下载安装包</p>\n<pre><code>sudo wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.3.1-01-unix.tar.gz\n</code></pre></li>\n<li><p>安装运行</p>\n<pre><code>tar zxvf nexus-3.3.1-01-unix.tar.gz \ncd nexus-3.3.1-01/      \nnohup ./nexus run\n</code></pre></li>\n<li><p>maven setting.xml配置</p>\n<pre><code>&lt;servers&gt;\n    &lt;server&gt;  \n        &lt;id&gt;nexus&lt;/id&gt;  \n        &lt;username&gt;admin&lt;/username&gt;  \n        &lt;password&gt;admin123&lt;/password&gt;  \n    &lt;/server&gt;  \n&lt;/servers&gt;\n</code></pre></li>\n<li><p>pom.xml配置</p>\n<pre><code>&lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;nexus&lt;/id&gt;\n            &lt;name&gt;Team Nexus Repository&lt;/name&gt;\n            &lt;url&gt;http://10.2.6.1:8081/repository/maven-public/&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n&lt;pluginRepositories&gt;\n    &lt;pluginRepository&gt;\n        &lt;id&gt;nexus&lt;/id&gt;\n        &lt;name&gt;Team Nexus Repository&lt;/name&gt;\n        &lt;url&gt;http://10.2.6.1:8081/repository/maven-public/&lt;/url&gt;\n    &lt;/pluginRepository&gt;\n&lt;/pluginRepositories&gt;\n</code></pre></li>\n<li><p>mvn deploy使用</p>\n<pre><code>mvn deploy:deploy-file -DgroupId=${groupId} -DartifactId=${artifactId} -Dversion=${version} -Dpackaging=jar -Dfile=${path/*.jar} -Durl=http://10.2.6.1:8081/repository/thirdparty/ -DrepositoryId=nexus \n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nexnus搭建maven私服配置导包\"><a href=\"#nexnus搭建maven私服配置导包\" class=\"headerlink\" title=\"nexnus搭建maven私服配置导包\"></a>nexnus搭建maven私服配置导包</h1><h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><ol>\n<li><p>下载安装包</p>\n<pre><code>sudo wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.3.1-01-unix.tar.gz\n</code></pre></li>\n<li><p>安装运行</p>\n<pre><code>tar zxvf nexus-3.3.1-01-unix.tar.gz \ncd nexus-3.3.1-01/      \nnohup ./nexus run\n</code></pre></li>\n<li><p>maven setting.xml配置</p>\n<pre><code>&lt;servers&gt;\n    &lt;server&gt;  \n        &lt;id&gt;nexus&lt;/id&gt;  \n        &lt;username&gt;admin&lt;/username&gt;  \n        &lt;password&gt;admin123&lt;/password&gt;  \n    &lt;/server&gt;  \n&lt;/servers&gt;\n</code></pre></li>\n<li><p>pom.xml配置</p>\n<pre><code>&lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;nexus&lt;/id&gt;\n            &lt;name&gt;Team Nexus Repository&lt;/name&gt;\n            &lt;url&gt;http://10.2.6.1:8081/repository/maven-public/&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n&lt;pluginRepositories&gt;\n    &lt;pluginRepository&gt;\n        &lt;id&gt;nexus&lt;/id&gt;\n        &lt;name&gt;Team Nexus Repository&lt;/name&gt;\n        &lt;url&gt;http://10.2.6.1:8081/repository/maven-public/&lt;/url&gt;\n    &lt;/pluginRepository&gt;\n&lt;/pluginRepositories&gt;\n</code></pre></li>\n<li><p>mvn deploy使用</p>\n<pre><code>mvn deploy:deploy-file -DgroupId=${groupId} -DartifactId=${artifactId} -Dversion=${version} -Dpackaging=jar -Dfile=${path/*.jar} -Durl=http://10.2.6.1:8081/repository/thirdparty/ -DrepositoryId=nexus \n</code></pre></li>\n</ol>\n"},{"title":"nginx-start","date":"2017-05-10T00:00:00.000Z","description":"centos7 下yum安装nginx并配置开机启动","_content":"\n# centos7下yum安装nginx并配置开机启动\n---\n\n1. 新增yum源\n\n    /etc/yum.repo.d下新建nginx.repo\n\n        [nginx]\n        name=nginx repo\n        baseurl=http://nginx.org/packages/centos/7/$basearch/\n        gpgcheck=0\n        enabled=1\n\n2. 安装\n    \n        sudo yum install nginx\n\n3. 配置\n    \n    [官网配置](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)  \n\n    vim /etc/init.d/nginx\n\n        #!/bin/sh\n        #\n        # nginx - this script starts and stops the nginx daemon\n        #\n        # chkconfig:   - 85 15\n        # description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n        #               proxy and IMAP/POP3 proxy server\n        # processname: nginx\n        # config:      /etc/nginx/nginx.conf\n        # config:      /etc/sysconfig/nginx\n        # pidfile:     /var/run/nginx.pid\n\n        # Source function library.\n        . /etc/rc.d/init.d/functions\n\n        # Source networking configuration.\n        . /etc/sysconfig/network\n\n        # Check that networking is up.\n        [ \"$NETWORKING\" = \"no\" ] && exit 0\n\n        nginx=\"/usr/sbin/nginx\"\n        prog=$(basename $nginx)\n\n        NGINX_CONF_FILE=\"/etc/nginx/nginx.conf\"\n\n        [ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx\n\n        lockfile=/var/lock/subsys/nginx\n\n        make_dirs() {\n           # make required directories\n           user=`$nginx -V 2>&1 | grep \"configure arguments:.*--user=\" | sed 's/[^*]*--user=\\([^ ]*\\).*/\\1/g' -`\n           if [ -n \"$user\" ]; then\n              if [ -z \"`grep $user /etc/passwd`\" ]; then\n                 useradd -M -s /bin/nologin $user\n              fi\n              options=`$nginx -V 2>&1 | grep 'configure arguments:'`\n              for opt in $options; do\n                  if [ `echo $opt | grep '.*-temp-path'` ]; then\n                      value=`echo $opt | cut -d \"=\" -f 2`\n                      if [ ! -d \"$value\" ]; then\n                          # echo \"creating\" $value\n                          mkdir -p $value && chown -R $user $value\n                      fi\n                  fi\n               done\n            fi\n        }\n\n        start() {\n            [ -x $nginx ] || exit 5\n            [ -f $NGINX_CONF_FILE ] || exit 6\n            make_dirs\n            echo -n $\"Starting $prog: \"\n            daemon $nginx -c $NGINX_CONF_FILE\n            retval=$?\n            echo\n            [ $retval -eq 0 ] && touch $lockfile\n            return $retval\n        }\n\n        stop() {\n            echo -n $\"Stopping $prog: \"\n            killproc $prog -QUIT\n            retval=$?\n            echo\n            [ $retval -eq 0 ] && rm -f $lockfile\n            return $retval\n        }\n\n        restart() {\n            configtest || return $?\n            stop\n            sleep 1\n            start\n        }\n\n        reload() {\n            configtest || return $?\n            echo -n $\"Reloading $prog: \"\n            killproc $nginx -HUP\n            RETVAL=$?\n            echo\n        }\n\n        force_reload() {\n            restart\n        }\n\n        configtest() {\n          $nginx -t -c $NGINX_CONF_FILE\n        }\n\n        rh_status() {\n            status $prog\n        }\n\n        rh_status_q() {\n            rh_status >/dev/null 2>&1\n        }\n\n        case \"$1\" in\n            start)\n                rh_status_q && exit 0\n                $1\n                ;;\n            stop)\n                rh_status_q || exit 0\n                $1\n                ;;\n            restart|configtest)\n                $1\n                ;;\n            reload)\n                rh_status_q || exit 7\n                $1\n                ;;\n            force-reload)\n                force_reload\n                ;;\n            status)\n                rh_status\n                ;;\n            condrestart|try-restart)\n                rh_status_q || exit 0\n                    ;;\n            *)\n                echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n                exit 2\n        esac\n\n    设置文件执行权限\n\n        chmod a+x /etc/init.d/nginx\n\n    加入chkconfig管理列表\n\n        chkconfig --add /etc/init.d/nginx\n\n    开机启动\n\n        chkconfig nginx on\n\n4. 启动\n    \n        service nginx start\n\n**遇到的问题**\n\n1. 非nginx目录下项目访问403\n\n    fix: nginx.conf 修改启动用户为 root  root\n\n2. 启动报错selinux\n\n    fix: /var/cache/nginx清理\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx-start\ndate: '2017-05-10'\ndescription: centos7 下yum安装nginx并配置开机启动\ncategories:\n- nginx\n\ntags:\n- linux\n- nginx\n- chkconfig\n\n---\n\n# centos7下yum安装nginx并配置开机启动\n---\n\n1. 新增yum源\n\n    /etc/yum.repo.d下新建nginx.repo\n\n        [nginx]\n        name=nginx repo\n        baseurl=http://nginx.org/packages/centos/7/$basearch/\n        gpgcheck=0\n        enabled=1\n\n2. 安装\n    \n        sudo yum install nginx\n\n3. 配置\n    \n    [官网配置](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)  \n\n    vim /etc/init.d/nginx\n\n        #!/bin/sh\n        #\n        # nginx - this script starts and stops the nginx daemon\n        #\n        # chkconfig:   - 85 15\n        # description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n        #               proxy and IMAP/POP3 proxy server\n        # processname: nginx\n        # config:      /etc/nginx/nginx.conf\n        # config:      /etc/sysconfig/nginx\n        # pidfile:     /var/run/nginx.pid\n\n        # Source function library.\n        . /etc/rc.d/init.d/functions\n\n        # Source networking configuration.\n        . /etc/sysconfig/network\n\n        # Check that networking is up.\n        [ \"$NETWORKING\" = \"no\" ] && exit 0\n\n        nginx=\"/usr/sbin/nginx\"\n        prog=$(basename $nginx)\n\n        NGINX_CONF_FILE=\"/etc/nginx/nginx.conf\"\n\n        [ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx\n\n        lockfile=/var/lock/subsys/nginx\n\n        make_dirs() {\n           # make required directories\n           user=`$nginx -V 2>&1 | grep \"configure arguments:.*--user=\" | sed 's/[^*]*--user=\\([^ ]*\\).*/\\1/g' -`\n           if [ -n \"$user\" ]; then\n              if [ -z \"`grep $user /etc/passwd`\" ]; then\n                 useradd -M -s /bin/nologin $user\n              fi\n              options=`$nginx -V 2>&1 | grep 'configure arguments:'`\n              for opt in $options; do\n                  if [ `echo $opt | grep '.*-temp-path'` ]; then\n                      value=`echo $opt | cut -d \"=\" -f 2`\n                      if [ ! -d \"$value\" ]; then\n                          # echo \"creating\" $value\n                          mkdir -p $value && chown -R $user $value\n                      fi\n                  fi\n               done\n            fi\n        }\n\n        start() {\n            [ -x $nginx ] || exit 5\n            [ -f $NGINX_CONF_FILE ] || exit 6\n            make_dirs\n            echo -n $\"Starting $prog: \"\n            daemon $nginx -c $NGINX_CONF_FILE\n            retval=$?\n            echo\n            [ $retval -eq 0 ] && touch $lockfile\n            return $retval\n        }\n\n        stop() {\n            echo -n $\"Stopping $prog: \"\n            killproc $prog -QUIT\n            retval=$?\n            echo\n            [ $retval -eq 0 ] && rm -f $lockfile\n            return $retval\n        }\n\n        restart() {\n            configtest || return $?\n            stop\n            sleep 1\n            start\n        }\n\n        reload() {\n            configtest || return $?\n            echo -n $\"Reloading $prog: \"\n            killproc $nginx -HUP\n            RETVAL=$?\n            echo\n        }\n\n        force_reload() {\n            restart\n        }\n\n        configtest() {\n          $nginx -t -c $NGINX_CONF_FILE\n        }\n\n        rh_status() {\n            status $prog\n        }\n\n        rh_status_q() {\n            rh_status >/dev/null 2>&1\n        }\n\n        case \"$1\" in\n            start)\n                rh_status_q && exit 0\n                $1\n                ;;\n            stop)\n                rh_status_q || exit 0\n                $1\n                ;;\n            restart|configtest)\n                $1\n                ;;\n            reload)\n                rh_status_q || exit 7\n                $1\n                ;;\n            force-reload)\n                force_reload\n                ;;\n            status)\n                rh_status\n                ;;\n            condrestart|try-restart)\n                rh_status_q || exit 0\n                    ;;\n            *)\n                echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n                exit 2\n        esac\n\n    设置文件执行权限\n\n        chmod a+x /etc/init.d/nginx\n\n    加入chkconfig管理列表\n\n        chkconfig --add /etc/init.d/nginx\n\n    开机启动\n\n        chkconfig nginx on\n\n4. 启动\n    \n        service nginx start\n\n**遇到的问题**\n\n1. 非nginx目录下项目访问403\n\n    fix: nginx.conf 修改启动用户为 root  root\n\n2. 启动报错selinux\n\n    fix: /var/cache/nginx清理\n","slug":"nginx","published":1,"updated":"2018-06-20T03:03:38.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hv000yvqqj0xxcqhsr","content":"<h1 id=\"centos7下yum安装nginx并配置开机启动\"><a href=\"#centos7下yum安装nginx并配置开机启动\" class=\"headerlink\" title=\"centos7下yum安装nginx并配置开机启动\"></a>centos7下yum安装nginx并配置开机启动</h1><hr>\n<ol>\n<li><p>新增yum源</p>\n<p> /etc/yum.repo.d下新建nginx.repo</p>\n<pre><code>[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n</code></pre></li>\n<li><p>安装</p>\n<pre><code>sudo yum install nginx\n</code></pre></li>\n<li><p>配置</p>\n<p> <a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\" target=\"_blank\" rel=\"noopener\">官网配置</a>  </p>\n<p> vim /etc/init.d/nginx</p>\n<pre><code>#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15\n# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0\n\nnginx=&quot;/usr/sbin/nginx&quot;\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\n\n[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\nmake_dirs() {\n   # make required directories\n   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:.*--user=&quot; | sed &apos;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&apos; -`\n   if [ -n &quot;$user&quot; ]; then\n      if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then\n         useradd -M -s /bin/nologin $user\n      fi\n      options=`$nginx -V 2&gt;&amp;1 | grep &apos;configure arguments:&apos;`\n      for opt in $options; do\n          if [ `echo $opt | grep &apos;.*-temp-path&apos;` ]; then\n              value=`echo $opt | cut -d &quot;=&quot; -f 2`\n              if [ ! -d &quot;$value&quot; ]; then\n                  # echo &quot;creating&quot; $value\n                  mkdir -p $value &amp;&amp; chown -R $user $value\n              fi\n          fi\n       done\n    fi\n}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    make_dirs\n    echo -n $&quot;Starting $prog: &quot;\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $&quot;Stopping $prog: &quot;\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $&quot;Reloading $prog: &quot;\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\ncase &quot;$1&quot; in\n    start)\n        rh_status_q &amp;&amp; exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;\n        exit 2\nesac\n</code></pre><p> 设置文件执行权限</p>\n<pre><code>chmod a+x /etc/init.d/nginx\n</code></pre><p> 加入chkconfig管理列表</p>\n<pre><code>chkconfig --add /etc/init.d/nginx\n</code></pre><p> 开机启动</p>\n<pre><code>chkconfig nginx on\n</code></pre></li>\n<li><p>启动</p>\n<pre><code>service nginx start\n</code></pre></li>\n</ol>\n<p><strong>遇到的问题</strong></p>\n<ol>\n<li><p>非nginx目录下项目访问403</p>\n<p> fix: nginx.conf 修改启动用户为 root  root</p>\n</li>\n<li><p>启动报错selinux</p>\n<p> fix: /var/cache/nginx清理</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"centos7下yum安装nginx并配置开机启动\"><a href=\"#centos7下yum安装nginx并配置开机启动\" class=\"headerlink\" title=\"centos7下yum安装nginx并配置开机启动\"></a>centos7下yum安装nginx并配置开机启动</h1><hr>\n<ol>\n<li><p>新增yum源</p>\n<p> /etc/yum.repo.d下新建nginx.repo</p>\n<pre><code>[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n</code></pre></li>\n<li><p>安装</p>\n<pre><code>sudo yum install nginx\n</code></pre></li>\n<li><p>配置</p>\n<p> <a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\" target=\"_blank\" rel=\"noopener\">官网配置</a>  </p>\n<p> vim /etc/init.d/nginx</p>\n<pre><code>#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15\n# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0\n\nnginx=&quot;/usr/sbin/nginx&quot;\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\n\n[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\nmake_dirs() {\n   # make required directories\n   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:.*--user=&quot; | sed &apos;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&apos; -`\n   if [ -n &quot;$user&quot; ]; then\n      if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then\n         useradd -M -s /bin/nologin $user\n      fi\n      options=`$nginx -V 2&gt;&amp;1 | grep &apos;configure arguments:&apos;`\n      for opt in $options; do\n          if [ `echo $opt | grep &apos;.*-temp-path&apos;` ]; then\n              value=`echo $opt | cut -d &quot;=&quot; -f 2`\n              if [ ! -d &quot;$value&quot; ]; then\n                  # echo &quot;creating&quot; $value\n                  mkdir -p $value &amp;&amp; chown -R $user $value\n              fi\n          fi\n       done\n    fi\n}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    make_dirs\n    echo -n $&quot;Starting $prog: &quot;\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $&quot;Stopping $prog: &quot;\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $&quot;Reloading $prog: &quot;\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\ncase &quot;$1&quot; in\n    start)\n        rh_status_q &amp;&amp; exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;\n        exit 2\nesac\n</code></pre><p> 设置文件执行权限</p>\n<pre><code>chmod a+x /etc/init.d/nginx\n</code></pre><p> 加入chkconfig管理列表</p>\n<pre><code>chkconfig --add /etc/init.d/nginx\n</code></pre><p> 开机启动</p>\n<pre><code>chkconfig nginx on\n</code></pre></li>\n<li><p>启动</p>\n<pre><code>service nginx start\n</code></pre></li>\n</ol>\n<p><strong>遇到的问题</strong></p>\n<ol>\n<li><p>非nginx目录下项目访问403</p>\n<p> fix: nginx.conf 修改启动用户为 root  root</p>\n</li>\n<li><p>启动报错selinux</p>\n<p> fix: /var/cache/nginx清理</p>\n</li>\n</ol>\n"},{"title":"Falcon部署配置","date":"2018-03-27T00:00:00.000Z","description":"Falcon部署配置,集成Gralcon","_content":"\n## 环境准备\n\n    Centos7.2\n    Golang1.8.1\n    redis 3.2.10\n    mysql 5.7.21\n    open-falcon\n    falcon-dashboard\n    grafana\n\n## Golang 安装配置\n\n1. 下载安装包\n2. 解压缩\n    \n    tar -C /usr/local -zxf go1.8.1.linux-amd64.tar.gz\n\n3. 配置PATH\n\n    vim /etc/profile\n    添加\n        export PATH=$PATH:/usr/local/go/bin\n    source /etc/profile\n\n4. 配置GOPATH（工作空间）\n\n    vim /root/.bash_profile\n    添加\n        export GOPATH=$HOME/go\n    source /root/.bash_profile\n\n## redis 安装配置\n\n*安装*\n\n```shell\nyum update\nyum install epel-release\nyum install redis\n```\n*配置*\n\n```shell\n chkconfig redis status\n service redis start\n```\n>注意：open-falcon暂不支持redis使用密码连接\n\n## mysql安装配置\n\n*安装*\n\n```shell\nwget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\nyum localinstall mysql57-community-release-el7-7.noarch.rpm \nyum remove mariadb-server.x86_64\nyum install mysql-community-server\n```\n\n*修改密码*\n\n```shell\n启动服务：\n    service mysqld start\n获取初始化密码：\n    grep 'temporary password' /var/log/mysqld.log\n连接修改密码：\n    mysql -h 127.0.0.1 -u root -p password\n    alter user 'root'@'localhost' identified by newpassword\n```\n## open-falcon安装配置\n\n*下载源码*\n\n```shell\nmkdir -p $GOPATH/src/github.com/open-falcon\ncd $GOPATH/src/github.com/open-falcon\ngit clone https://github.com/open-falcon/falcon-plus.git\n```\n\n*初始化数据库*\n\n```shell\ncd $GOPATH/src/github.com/open-falcon/falcon-plus/scripts/mysql/db_schema\nmysql -h 127.0.0.1 -u root -p < 1_uic-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 2_portal-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 3_dashboard-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 4_graph-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 5_alarms-db-schema.sql\n```\n\n*编译制作安装包*\n\n```shell\ngo get -u github.com/kardianos/govendor\ncd $GOPATH/src/github.com/open-falcon/falcon-plus/\nmake all\nmake agent\nmake pack\n```\n\n*安装*\n\n```shell\ncd $GOPATH/src/github.com/open-falcon/falcon-plus\nmkdir -p /root/open-falcon\ntar -zxf open-falcon-v0.2.1.tar.gz -C /root/open-falcon\n```\n\n*配置*\n\n所有模块的cfg.json中的database.addr添加密码，即root:password@\n\n*启动服务*\n\n```shell\n./open-falcon start\n./open-falcon check   //检查服务是否启动\n```\n\n*agent安装配置*\n\n解压缩安装包到指定的机器上。\n\n```shell\nvim agent/config/cfg.json\n\n\"heartbeat\": {\n        \"enabled\": true,\n        \"addr\": \"10.2.6.31:6030\",\n        \"interval\": 60,\n        \"timeout\": 1000\n    },\n    \"transfer\": {\n        \"enabled\": true,\n        \"addrs\": [\n            \"10.2.6.31:8433\"\n        ],\n        \"interval\": 60,\n        \"timeout\": 1000\n    },\n\naddr修改为open-falcon服务的IP地址\n启动agent：\n    ./open-falcon start agent\n```\n\n## falcon-dashboard安装配置\n\n*安装配置*\n\n```shell\nmkdir -p $HOME/open-falcon/\ncd $HOME/open-falcon && git clone https://github.com/open-falcon/dashboard.git\ncd dashboard\n\nyum install -y python-virtualenv\nyum install -y python-devel\nyum install -y openldap-devel\nyum install -y mysql-devel\nyum groupinstall \"Development tools\"\n\ncd $HOME/open-falcon/dashboard/\nvirtualenv ./env\n\n./env/bin/pip install -r pip_requirements.txt \n修改数据库配置密码：\n    vim rrd/config.py\n    PORTAL_DB_HOST = os.environ.get(\"PORTAL_DB_HOST\",\"127.0.0.1\")\n    PORTAL_DB_PORT = int(os.environ.get(\"PORTAL_DB_PORT\",3306))\n    PORTAL_DB_USER = os.environ.get(\"PORTAL_DB_USER\",\"root\")\n    PORTAL_DB_PASS = os.environ.get(\"PORTAL_DB_PASS\",\"yourpassword\")\n    PORTAL_DB_NAME = os.environ.get(\"PORTAL_DB_NAME\",\"falcon_portal\")\n    \n    # alarm database\n    # TODO: read from api instead of db\n    ALARM_DB_HOST = os.environ.get(\"ALARM_DB_HOST\",\"127.0.0.1\")\n    ALARM_DB_PORT = int(os.environ.get(\"ALARM_DB_PORT\",3306))\n    ALARM_DB_USER = os.environ.get(\"ALARM_DB_USER\",\"root\")\n    ALARM_DB_PASS = os.environ.get(\"ALARM_DB_PASS\",\"yourpassword\")\n    ALARM_DB_NAME = os.environ.get(\"ALARM_DB_NAME\",\"alarms\")\n运行：\n    ./env/bin/python wsgi.py\n```\n\n## grafana集成\n\n*安装配置*\n\n```shell\nwget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm\nyum install initscripts fontconfig\nrpm -Uvh grafana-5.0.3-1.x86_64.rpm \n/bin/systemctl enable grafana-server.service\n/bin/systemctl start grafana-server.service\n\nservice grafana-server start\n```\n\n*安装open-falcon插件*\n\n```shell\ncd /var/lib/grafana/plugins\ngit clone https://github.com/open-falcon/grafana-openfalcon-datasource\n```\n","source":"_posts/open-falcon.md","raw":"---\ntitle: Falcon部署配置\ndate: '2018-03-27'\ndescription: Falcon部署配置,集成Gralcon\ncategories: \n- devops\n\ntags:\n- falcon\n- gralcon\n---\n\n## 环境准备\n\n    Centos7.2\n    Golang1.8.1\n    redis 3.2.10\n    mysql 5.7.21\n    open-falcon\n    falcon-dashboard\n    grafana\n\n## Golang 安装配置\n\n1. 下载安装包\n2. 解压缩\n    \n    tar -C /usr/local -zxf go1.8.1.linux-amd64.tar.gz\n\n3. 配置PATH\n\n    vim /etc/profile\n    添加\n        export PATH=$PATH:/usr/local/go/bin\n    source /etc/profile\n\n4. 配置GOPATH（工作空间）\n\n    vim /root/.bash_profile\n    添加\n        export GOPATH=$HOME/go\n    source /root/.bash_profile\n\n## redis 安装配置\n\n*安装*\n\n```shell\nyum update\nyum install epel-release\nyum install redis\n```\n*配置*\n\n```shell\n chkconfig redis status\n service redis start\n```\n>注意：open-falcon暂不支持redis使用密码连接\n\n## mysql安装配置\n\n*安装*\n\n```shell\nwget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\nyum localinstall mysql57-community-release-el7-7.noarch.rpm \nyum remove mariadb-server.x86_64\nyum install mysql-community-server\n```\n\n*修改密码*\n\n```shell\n启动服务：\n    service mysqld start\n获取初始化密码：\n    grep 'temporary password' /var/log/mysqld.log\n连接修改密码：\n    mysql -h 127.0.0.1 -u root -p password\n    alter user 'root'@'localhost' identified by newpassword\n```\n## open-falcon安装配置\n\n*下载源码*\n\n```shell\nmkdir -p $GOPATH/src/github.com/open-falcon\ncd $GOPATH/src/github.com/open-falcon\ngit clone https://github.com/open-falcon/falcon-plus.git\n```\n\n*初始化数据库*\n\n```shell\ncd $GOPATH/src/github.com/open-falcon/falcon-plus/scripts/mysql/db_schema\nmysql -h 127.0.0.1 -u root -p < 1_uic-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 2_portal-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 3_dashboard-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 4_graph-db-schema.sql \nmysql -h 127.0.0.1 -u root -p < 5_alarms-db-schema.sql\n```\n\n*编译制作安装包*\n\n```shell\ngo get -u github.com/kardianos/govendor\ncd $GOPATH/src/github.com/open-falcon/falcon-plus/\nmake all\nmake agent\nmake pack\n```\n\n*安装*\n\n```shell\ncd $GOPATH/src/github.com/open-falcon/falcon-plus\nmkdir -p /root/open-falcon\ntar -zxf open-falcon-v0.2.1.tar.gz -C /root/open-falcon\n```\n\n*配置*\n\n所有模块的cfg.json中的database.addr添加密码，即root:password@\n\n*启动服务*\n\n```shell\n./open-falcon start\n./open-falcon check   //检查服务是否启动\n```\n\n*agent安装配置*\n\n解压缩安装包到指定的机器上。\n\n```shell\nvim agent/config/cfg.json\n\n\"heartbeat\": {\n        \"enabled\": true,\n        \"addr\": \"10.2.6.31:6030\",\n        \"interval\": 60,\n        \"timeout\": 1000\n    },\n    \"transfer\": {\n        \"enabled\": true,\n        \"addrs\": [\n            \"10.2.6.31:8433\"\n        ],\n        \"interval\": 60,\n        \"timeout\": 1000\n    },\n\naddr修改为open-falcon服务的IP地址\n启动agent：\n    ./open-falcon start agent\n```\n\n## falcon-dashboard安装配置\n\n*安装配置*\n\n```shell\nmkdir -p $HOME/open-falcon/\ncd $HOME/open-falcon && git clone https://github.com/open-falcon/dashboard.git\ncd dashboard\n\nyum install -y python-virtualenv\nyum install -y python-devel\nyum install -y openldap-devel\nyum install -y mysql-devel\nyum groupinstall \"Development tools\"\n\ncd $HOME/open-falcon/dashboard/\nvirtualenv ./env\n\n./env/bin/pip install -r pip_requirements.txt \n修改数据库配置密码：\n    vim rrd/config.py\n    PORTAL_DB_HOST = os.environ.get(\"PORTAL_DB_HOST\",\"127.0.0.1\")\n    PORTAL_DB_PORT = int(os.environ.get(\"PORTAL_DB_PORT\",3306))\n    PORTAL_DB_USER = os.environ.get(\"PORTAL_DB_USER\",\"root\")\n    PORTAL_DB_PASS = os.environ.get(\"PORTAL_DB_PASS\",\"yourpassword\")\n    PORTAL_DB_NAME = os.environ.get(\"PORTAL_DB_NAME\",\"falcon_portal\")\n    \n    # alarm database\n    # TODO: read from api instead of db\n    ALARM_DB_HOST = os.environ.get(\"ALARM_DB_HOST\",\"127.0.0.1\")\n    ALARM_DB_PORT = int(os.environ.get(\"ALARM_DB_PORT\",3306))\n    ALARM_DB_USER = os.environ.get(\"ALARM_DB_USER\",\"root\")\n    ALARM_DB_PASS = os.environ.get(\"ALARM_DB_PASS\",\"yourpassword\")\n    ALARM_DB_NAME = os.environ.get(\"ALARM_DB_NAME\",\"alarms\")\n运行：\n    ./env/bin/python wsgi.py\n```\n\n## grafana集成\n\n*安装配置*\n\n```shell\nwget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm\nyum install initscripts fontconfig\nrpm -Uvh grafana-5.0.3-1.x86_64.rpm \n/bin/systemctl enable grafana-server.service\n/bin/systemctl start grafana-server.service\n\nservice grafana-server start\n```\n\n*安装open-falcon插件*\n\n```shell\ncd /var/lib/grafana/plugins\ngit clone https://github.com/open-falcon/grafana-openfalcon-datasource\n```\n","slug":"open-falcon","published":1,"updated":"2018-06-20T03:03:51.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hx0010vqqj0op6gkls","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><pre><code>Centos7.2\nGolang1.8.1\nredis 3.2.10\nmysql 5.7.21\nopen-falcon\nfalcon-dashboard\ngrafana\n</code></pre><h2 id=\"Golang-安装配置\"><a href=\"#Golang-安装配置\" class=\"headerlink\" title=\"Golang 安装配置\"></a>Golang 安装配置</h2><ol>\n<li>下载安装包</li>\n<li><p>解压缩</p>\n<p> tar -C /usr/local -zxf go1.8.1.linux-amd64.tar.gz</p>\n</li>\n<li><p>配置PATH</p>\n<p> vim /etc/profile<br> 添加</p>\n<pre><code>export PATH=$PATH:/usr/local/go/bin\n</code></pre><p> source /etc/profile</p>\n</li>\n<li><p>配置GOPATH（工作空间）</p>\n<p> vim /root/.bash_profile<br> 添加</p>\n<pre><code>export GOPATH=$HOME/go\n</code></pre><p> source /root/.bash_profile</p>\n</li>\n</ol>\n<h2 id=\"redis-安装配置\"><a href=\"#redis-安装配置\" class=\"headerlink\" title=\"redis 安装配置\"></a>redis 安装配置</h2><p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install redis</span><br></pre></td></tr></table></figure>\n<p><em>配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig redis status</span><br><span class=\"line\">service redis start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：open-falcon暂不支持redis使用密码连接</p>\n</blockquote>\n<h2 id=\"mysql安装配置\"><a href=\"#mysql安装配置\" class=\"headerlink\" title=\"mysql安装配置\"></a>mysql安装配置</h2><p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br><span class=\"line\">yum localinstall mysql57-community-release-el7-7.noarch.rpm </span><br><span class=\"line\">yum remove mariadb-server.x86_64</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p><em>修改密码</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动服务：</span><br><span class=\"line\">    service mysqld start</span><br><span class=\"line\">获取初始化密码：</span><br><span class=\"line\">    grep 'temporary password' /var/log/mysqld.log</span><br><span class=\"line\">连接修改密码：</span><br><span class=\"line\">    mysql -h 127.0.0.1 -u root -p password</span><br><span class=\"line\">    alter user 'root'@'localhost' identified by newpassword</span><br></pre></td></tr></table></figure>\n<h2 id=\"open-falcon安装配置\"><a href=\"#open-falcon安装配置\" class=\"headerlink\" title=\"open-falcon安装配置\"></a>open-falcon安装配置</h2><p><em>下载源码</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/github.com/open-falcon</span><br><span class=\"line\">cd $GOPATH/src/github.com/open-falcon</span><br><span class=\"line\">git clone https://github.com/open-falcon/falcon-plus.git</span><br></pre></td></tr></table></figure>\n<p><em>初始化数据库</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus/scripts/mysql/db_schema</span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br></pre></td></tr></table></figure>\n<p><em>编译制作安装包</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/kardianos/govendor</span><br><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus/</span><br><span class=\"line\">make all</span><br><span class=\"line\">make agent</span><br><span class=\"line\">make pack</span><br></pre></td></tr></table></figure>\n<p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus</span><br><span class=\"line\">mkdir -p /root/open-falcon</span><br><span class=\"line\">tar -zxf open-falcon-v0.2.1.tar.gz -C /root/open-falcon</span><br></pre></td></tr></table></figure>\n<p><em>配置</em></p>\n<p>所有模块的cfg.json中的database.addr添加密码，即root:password@</p>\n<p><em>启动服务</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./open-falcon start</span><br><span class=\"line\">./open-falcon check   //检查服务是否启动</span><br></pre></td></tr></table></figure>\n<p><em>agent安装配置</em></p>\n<p>解压缩安装包到指定的机器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim agent/config/cfg.json</span><br><span class=\"line\"></span><br><span class=\"line\">\"heartbeat\": &#123;</span><br><span class=\"line\">        \"enabled\": true,</span><br><span class=\"line\">        \"addr\": \"10.2.6.31:6030\",</span><br><span class=\"line\">        \"interval\": 60,</span><br><span class=\"line\">        \"timeout\": 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"transfer\": &#123;</span><br><span class=\"line\">        \"enabled\": true,</span><br><span class=\"line\">        \"addrs\": [</span><br><span class=\"line\">            \"10.2.6.31:8433\"</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"interval\": 60,</span><br><span class=\"line\">        \"timeout\": 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">addr修改为open-falcon服务的IP地址</span><br><span class=\"line\">启动agent：</span><br><span class=\"line\">    ./open-falcon start agent</span><br></pre></td></tr></table></figure>\n<h2 id=\"falcon-dashboard安装配置\"><a href=\"#falcon-dashboard安装配置\" class=\"headerlink\" title=\"falcon-dashboard安装配置\"></a>falcon-dashboard安装配置</h2><p><em>安装配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $HOME/open-falcon/</span><br><span class=\"line\">cd $HOME/open-falcon &amp;&amp; git clone https://github.com/open-falcon/dashboard.git</span><br><span class=\"line\">cd dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y python-virtualenv</span><br><span class=\"line\">yum install -y python-devel</span><br><span class=\"line\">yum install -y openldap-devel</span><br><span class=\"line\">yum install -y mysql-devel</span><br><span class=\"line\">yum groupinstall \"Development tools\"</span><br><span class=\"line\"></span><br><span class=\"line\">cd $HOME/open-falcon/dashboard/</span><br><span class=\"line\">virtualenv ./env</span><br><span class=\"line\"></span><br><span class=\"line\">./env/bin/pip install -r pip_requirements.txt </span><br><span class=\"line\">修改数据库配置密码：</span><br><span class=\"line\">    vim rrd/config.py</span><br><span class=\"line\">    PORTAL_DB_HOST = os.environ.get(\"PORTAL_DB_HOST\",\"127.0.0.1\")</span><br><span class=\"line\">    PORTAL_DB_PORT = int(os.environ.get(\"PORTAL_DB_PORT\",3306))</span><br><span class=\"line\">    PORTAL_DB_USER = os.environ.get(\"PORTAL_DB_USER\",\"root\")</span><br><span class=\"line\">    PORTAL_DB_PASS = os.environ.get(\"PORTAL_DB_PASS\",\"yourpassword\")</span><br><span class=\"line\">    PORTAL_DB_NAME = os.environ.get(\"PORTAL_DB_NAME\",\"falcon_portal\")</span><br><span class=\"line\">    </span><br><span class=\"line\">    # alarm database</span><br><span class=\"line\">    # TODO: read from api instead of db</span><br><span class=\"line\">    ALARM_DB_HOST = os.environ.get(\"ALARM_DB_HOST\",\"127.0.0.1\")</span><br><span class=\"line\">    ALARM_DB_PORT = int(os.environ.get(\"ALARM_DB_PORT\",3306))</span><br><span class=\"line\">    ALARM_DB_USER = os.environ.get(\"ALARM_DB_USER\",\"root\")</span><br><span class=\"line\">    ALARM_DB_PASS = os.environ.get(\"ALARM_DB_PASS\",\"yourpassword\")</span><br><span class=\"line\">    ALARM_DB_NAME = os.environ.get(\"ALARM_DB_NAME\",\"alarms\")</span><br><span class=\"line\">运行：</span><br><span class=\"line\">    ./env/bin/python wsgi.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"grafana集成\"><a href=\"#grafana集成\" class=\"headerlink\" title=\"grafana集成\"></a>grafana集成</h2><p><em>安装配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm</span><br><span class=\"line\">yum install initscripts fontconfig</span><br><span class=\"line\">rpm -Uvh grafana-5.0.3-1.x86_64.rpm </span><br><span class=\"line\">/bin/systemctl enable grafana-server.service</span><br><span class=\"line\">/bin/systemctl start grafana-server.service</span><br><span class=\"line\"></span><br><span class=\"line\">service grafana-server start</span><br></pre></td></tr></table></figure>\n<p><em>安装open-falcon插件</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/grafana/plugins</span><br><span class=\"line\">git clone https://github.com/open-falcon/grafana-openfalcon-datasource</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><pre><code>Centos7.2\nGolang1.8.1\nredis 3.2.10\nmysql 5.7.21\nopen-falcon\nfalcon-dashboard\ngrafana\n</code></pre><h2 id=\"Golang-安装配置\"><a href=\"#Golang-安装配置\" class=\"headerlink\" title=\"Golang 安装配置\"></a>Golang 安装配置</h2><ol>\n<li>下载安装包</li>\n<li><p>解压缩</p>\n<p> tar -C /usr/local -zxf go1.8.1.linux-amd64.tar.gz</p>\n</li>\n<li><p>配置PATH</p>\n<p> vim /etc/profile<br> 添加</p>\n<pre><code>export PATH=$PATH:/usr/local/go/bin\n</code></pre><p> source /etc/profile</p>\n</li>\n<li><p>配置GOPATH（工作空间）</p>\n<p> vim /root/.bash_profile<br> 添加</p>\n<pre><code>export GOPATH=$HOME/go\n</code></pre><p> source /root/.bash_profile</p>\n</li>\n</ol>\n<h2 id=\"redis-安装配置\"><a href=\"#redis-安装配置\" class=\"headerlink\" title=\"redis 安装配置\"></a>redis 安装配置</h2><p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install redis</span><br></pre></td></tr></table></figure>\n<p><em>配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig redis status</span><br><span class=\"line\">service redis start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：open-falcon暂不支持redis使用密码连接</p>\n</blockquote>\n<h2 id=\"mysql安装配置\"><a href=\"#mysql安装配置\" class=\"headerlink\" title=\"mysql安装配置\"></a>mysql安装配置</h2><p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br><span class=\"line\">yum localinstall mysql57-community-release-el7-7.noarch.rpm </span><br><span class=\"line\">yum remove mariadb-server.x86_64</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p><em>修改密码</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动服务：</span><br><span class=\"line\">    service mysqld start</span><br><span class=\"line\">获取初始化密码：</span><br><span class=\"line\">    grep 'temporary password' /var/log/mysqld.log</span><br><span class=\"line\">连接修改密码：</span><br><span class=\"line\">    mysql -h 127.0.0.1 -u root -p password</span><br><span class=\"line\">    alter user 'root'@'localhost' identified by newpassword</span><br></pre></td></tr></table></figure>\n<h2 id=\"open-falcon安装配置\"><a href=\"#open-falcon安装配置\" class=\"headerlink\" title=\"open-falcon安装配置\"></a>open-falcon安装配置</h2><p><em>下载源码</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/github.com/open-falcon</span><br><span class=\"line\">cd $GOPATH/src/github.com/open-falcon</span><br><span class=\"line\">git clone https://github.com/open-falcon/falcon-plus.git</span><br></pre></td></tr></table></figure>\n<p><em>初始化数据库</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus/scripts/mysql/db_schema</span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sql </span><br><span class=\"line\">mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br></pre></td></tr></table></figure>\n<p><em>编译制作安装包</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/kardianos/govendor</span><br><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus/</span><br><span class=\"line\">make all</span><br><span class=\"line\">make agent</span><br><span class=\"line\">make pack</span><br></pre></td></tr></table></figure>\n<p><em>安装</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/open-falcon/falcon-plus</span><br><span class=\"line\">mkdir -p /root/open-falcon</span><br><span class=\"line\">tar -zxf open-falcon-v0.2.1.tar.gz -C /root/open-falcon</span><br></pre></td></tr></table></figure>\n<p><em>配置</em></p>\n<p>所有模块的cfg.json中的database.addr添加密码，即root:password@</p>\n<p><em>启动服务</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./open-falcon start</span><br><span class=\"line\">./open-falcon check   //检查服务是否启动</span><br></pre></td></tr></table></figure>\n<p><em>agent安装配置</em></p>\n<p>解压缩安装包到指定的机器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim agent/config/cfg.json</span><br><span class=\"line\"></span><br><span class=\"line\">\"heartbeat\": &#123;</span><br><span class=\"line\">        \"enabled\": true,</span><br><span class=\"line\">        \"addr\": \"10.2.6.31:6030\",</span><br><span class=\"line\">        \"interval\": 60,</span><br><span class=\"line\">        \"timeout\": 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"transfer\": &#123;</span><br><span class=\"line\">        \"enabled\": true,</span><br><span class=\"line\">        \"addrs\": [</span><br><span class=\"line\">            \"10.2.6.31:8433\"</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"interval\": 60,</span><br><span class=\"line\">        \"timeout\": 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">addr修改为open-falcon服务的IP地址</span><br><span class=\"line\">启动agent：</span><br><span class=\"line\">    ./open-falcon start agent</span><br></pre></td></tr></table></figure>\n<h2 id=\"falcon-dashboard安装配置\"><a href=\"#falcon-dashboard安装配置\" class=\"headerlink\" title=\"falcon-dashboard安装配置\"></a>falcon-dashboard安装配置</h2><p><em>安装配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $HOME/open-falcon/</span><br><span class=\"line\">cd $HOME/open-falcon &amp;&amp; git clone https://github.com/open-falcon/dashboard.git</span><br><span class=\"line\">cd dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y python-virtualenv</span><br><span class=\"line\">yum install -y python-devel</span><br><span class=\"line\">yum install -y openldap-devel</span><br><span class=\"line\">yum install -y mysql-devel</span><br><span class=\"line\">yum groupinstall \"Development tools\"</span><br><span class=\"line\"></span><br><span class=\"line\">cd $HOME/open-falcon/dashboard/</span><br><span class=\"line\">virtualenv ./env</span><br><span class=\"line\"></span><br><span class=\"line\">./env/bin/pip install -r pip_requirements.txt </span><br><span class=\"line\">修改数据库配置密码：</span><br><span class=\"line\">    vim rrd/config.py</span><br><span class=\"line\">    PORTAL_DB_HOST = os.environ.get(\"PORTAL_DB_HOST\",\"127.0.0.1\")</span><br><span class=\"line\">    PORTAL_DB_PORT = int(os.environ.get(\"PORTAL_DB_PORT\",3306))</span><br><span class=\"line\">    PORTAL_DB_USER = os.environ.get(\"PORTAL_DB_USER\",\"root\")</span><br><span class=\"line\">    PORTAL_DB_PASS = os.environ.get(\"PORTAL_DB_PASS\",\"yourpassword\")</span><br><span class=\"line\">    PORTAL_DB_NAME = os.environ.get(\"PORTAL_DB_NAME\",\"falcon_portal\")</span><br><span class=\"line\">    </span><br><span class=\"line\">    # alarm database</span><br><span class=\"line\">    # TODO: read from api instead of db</span><br><span class=\"line\">    ALARM_DB_HOST = os.environ.get(\"ALARM_DB_HOST\",\"127.0.0.1\")</span><br><span class=\"line\">    ALARM_DB_PORT = int(os.environ.get(\"ALARM_DB_PORT\",3306))</span><br><span class=\"line\">    ALARM_DB_USER = os.environ.get(\"ALARM_DB_USER\",\"root\")</span><br><span class=\"line\">    ALARM_DB_PASS = os.environ.get(\"ALARM_DB_PASS\",\"yourpassword\")</span><br><span class=\"line\">    ALARM_DB_NAME = os.environ.get(\"ALARM_DB_NAME\",\"alarms\")</span><br><span class=\"line\">运行：</span><br><span class=\"line\">    ./env/bin/python wsgi.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"grafana集成\"><a href=\"#grafana集成\" class=\"headerlink\" title=\"grafana集成\"></a>grafana集成</h2><p><em>安装配置</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm</span><br><span class=\"line\">yum install initscripts fontconfig</span><br><span class=\"line\">rpm -Uvh grafana-5.0.3-1.x86_64.rpm </span><br><span class=\"line\">/bin/systemctl enable grafana-server.service</span><br><span class=\"line\">/bin/systemctl start grafana-server.service</span><br><span class=\"line\"></span><br><span class=\"line\">service grafana-server start</span><br></pre></td></tr></table></figure>\n<p><em>安装open-falcon插件</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/grafana/plugins</span><br><span class=\"line\">git clone https://github.com/open-falcon/grafana-openfalcon-datasource</span><br></pre></td></tr></table></figure>\n"},{"title":"win-protobuf-python","date":"2017-12-16T00:00:00.000Z","description":"win环境搭建protobuf环境使用python开发","_content":"\n## 搭建环境\n\n\tpython 2.7.9\n\twin10\n\tprotobuf 3.5.0\n\tpycharm\n\n## protobuf编译工具protoc安装\n\n下载[ protoc-3.5.0-win32.zip](https://github.com/google/protobuf/releases/tag/v3.5.0).\n\n解压缩到指定目录，配置环境变量PATH。\n\n打开命令行窗口输入：protoc --version 测试。\n\n## protobuf python安装\n\n```shell\npip install protobuf\n```\n\n测试：\n\n```python\npython\n>> import google.protobuf\n```\n\n## demo测试\n\n1. 创建test.proto描述文件\n\n```java\nmessage CDevice\n{\n   optional int32 devId = 1;\n   optional string name = 2;\n}\n```\n\n2. 使用protoc编译test.proto为test_pb2.py文件\n\n```shell\nprotoc -I ./origin --python_out=./test ./origin/test.proto\n```\n\n3. 编写测试python测试编译生成的py\n\n```python\n# -*- coding: UTF-8 -*-\nimport test_pb2\nimport traceback\nimport sys\n\n\ntry:\n    sendData = test_pb2.CDevice()\n    sendData.devId = 9\n    sendData.name = 'USB'\n\n    #Serialize\n    sendDataStr = sendData.SerializeToString()\n    #print serialized string value\n    print 'serialized string:', sendDataStr\n    #------------------------#\n    #  message transmission  #\n    #------------------------#\n    receiveDataStr = sendDataStr\n    receiveData = test_pb2.CDevice()\n\n    #Deserialize\n    receiveData.ParseFromString(receiveDataStr)\n    print 'pares serialize string, return: devId = ', receiveData.devId, ', name = ', receiveData.name\nexcept Exception, e:\n    print Exception, ':', e\n    print traceback.print_exc()\n    errInfo = sys.exc_info()\n    print errInfo[0], ':', errInfo[1]\n```\n","source":"_posts/protobuf-python.md","raw":"---\ntitle: win-protobuf-python\ndate: '2017-12-16'\ndescription: win环境搭建protobuf环境使用python开发\ncategories: \n- python\n\ntags: \n\n- python\n- protobuf\n\n---\n\n## 搭建环境\n\n\tpython 2.7.9\n\twin10\n\tprotobuf 3.5.0\n\tpycharm\n\n## protobuf编译工具protoc安装\n\n下载[ protoc-3.5.0-win32.zip](https://github.com/google/protobuf/releases/tag/v3.5.0).\n\n解压缩到指定目录，配置环境变量PATH。\n\n打开命令行窗口输入：protoc --version 测试。\n\n## protobuf python安装\n\n```shell\npip install protobuf\n```\n\n测试：\n\n```python\npython\n>> import google.protobuf\n```\n\n## demo测试\n\n1. 创建test.proto描述文件\n\n```java\nmessage CDevice\n{\n   optional int32 devId = 1;\n   optional string name = 2;\n}\n```\n\n2. 使用protoc编译test.proto为test_pb2.py文件\n\n```shell\nprotoc -I ./origin --python_out=./test ./origin/test.proto\n```\n\n3. 编写测试python测试编译生成的py\n\n```python\n# -*- coding: UTF-8 -*-\nimport test_pb2\nimport traceback\nimport sys\n\n\ntry:\n    sendData = test_pb2.CDevice()\n    sendData.devId = 9\n    sendData.name = 'USB'\n\n    #Serialize\n    sendDataStr = sendData.SerializeToString()\n    #print serialized string value\n    print 'serialized string:', sendDataStr\n    #------------------------#\n    #  message transmission  #\n    #------------------------#\n    receiveDataStr = sendDataStr\n    receiveData = test_pb2.CDevice()\n\n    #Deserialize\n    receiveData.ParseFromString(receiveDataStr)\n    print 'pares serialize string, return: devId = ', receiveData.devId, ', name = ', receiveData.name\nexcept Exception, e:\n    print Exception, ':', e\n    print traceback.print_exc()\n    errInfo = sys.exc_info()\n    print errInfo[0], ':', errInfo[1]\n```\n","slug":"protobuf-python","published":1,"updated":"2018-06-20T03:04:05.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8hz0013vqqj4y4lbhvn","content":"<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><pre><code>python 2.7.9\nwin10\nprotobuf 3.5.0\npycharm\n</code></pre><h2 id=\"protobuf编译工具protoc安装\"><a href=\"#protobuf编译工具protoc安装\" class=\"headerlink\" title=\"protobuf编译工具protoc安装\"></a>protobuf编译工具protoc安装</h2><p>下载<a href=\"https://github.com/google/protobuf/releases/tag/v3.5.0\" target=\"_blank\" rel=\"noopener\"> protoc-3.5.0-win32.zip</a>.</p>\n<p>解压缩到指定目录，配置环境变量PATH。</p>\n<p>打开命令行窗口输入：protoc –version 测试。</p>\n<h2 id=\"protobuf-python安装\"><a href=\"#protobuf-python安装\" class=\"headerlink\" title=\"protobuf python安装\"></a>protobuf python安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install protobuf</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">&gt;&gt; <span class=\"keyword\">import</span> google.protobuf</span><br></pre></td></tr></table></figure>\n<h2 id=\"demo测试\"><a href=\"#demo测试\" class=\"headerlink\" title=\"demo测试\"></a>demo测试</h2><ol>\n<li>创建test.proto描述文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message CDevice</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   optional int32 devId = <span class=\"number\">1</span>;</span><br><span class=\"line\">   optional string name = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用protoc编译test.proto为test_pb2.py文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I ./origin --python_out=./test ./origin/test.proto</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写测试python测试编译生成的py</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_pb2</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    sendData = test_pb2.CDevice()</span><br><span class=\"line\">    sendData.devId = <span class=\"number\">9</span></span><br><span class=\"line\">    sendData.name = <span class=\"string\">'USB'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Serialize</span></span><br><span class=\"line\">    sendDataStr = sendData.SerializeToString()</span><br><span class=\"line\">    <span class=\"comment\">#print serialized string value</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'serialized string:'</span>, sendDataStr</span><br><span class=\"line\">    <span class=\"comment\">#------------------------#</span></span><br><span class=\"line\">    <span class=\"comment\">#  message transmission  #</span></span><br><span class=\"line\">    <span class=\"comment\">#------------------------#</span></span><br><span class=\"line\">    receiveDataStr = sendDataStr</span><br><span class=\"line\">    receiveData = test_pb2.CDevice()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Deserialize</span></span><br><span class=\"line\">    receiveData.ParseFromString(receiveDataStr)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'pares serialize string, return: devId = '</span>, receiveData.devId, <span class=\"string\">', name = '</span>, receiveData.name</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> Exception, <span class=\"string\">':'</span>, e</span><br><span class=\"line\">    <span class=\"keyword\">print</span> traceback.print_exc()</span><br><span class=\"line\">    errInfo = sys.exc_info()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> errInfo[<span class=\"number\">0</span>], <span class=\"string\">':'</span>, errInfo[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><pre><code>python 2.7.9\nwin10\nprotobuf 3.5.0\npycharm\n</code></pre><h2 id=\"protobuf编译工具protoc安装\"><a href=\"#protobuf编译工具protoc安装\" class=\"headerlink\" title=\"protobuf编译工具protoc安装\"></a>protobuf编译工具protoc安装</h2><p>下载<a href=\"https://github.com/google/protobuf/releases/tag/v3.5.0\" target=\"_blank\" rel=\"noopener\"> protoc-3.5.0-win32.zip</a>.</p>\n<p>解压缩到指定目录，配置环境变量PATH。</p>\n<p>打开命令行窗口输入：protoc –version 测试。</p>\n<h2 id=\"protobuf-python安装\"><a href=\"#protobuf-python安装\" class=\"headerlink\" title=\"protobuf python安装\"></a>protobuf python安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install protobuf</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">&gt;&gt; <span class=\"keyword\">import</span> google.protobuf</span><br></pre></td></tr></table></figure>\n<h2 id=\"demo测试\"><a href=\"#demo测试\" class=\"headerlink\" title=\"demo测试\"></a>demo测试</h2><ol>\n<li>创建test.proto描述文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message CDevice</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   optional int32 devId = <span class=\"number\">1</span>;</span><br><span class=\"line\">   optional string name = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用protoc编译test.proto为test_pb2.py文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I ./origin --python_out=./test ./origin/test.proto</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写测试python测试编译生成的py</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_pb2</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    sendData = test_pb2.CDevice()</span><br><span class=\"line\">    sendData.devId = <span class=\"number\">9</span></span><br><span class=\"line\">    sendData.name = <span class=\"string\">'USB'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Serialize</span></span><br><span class=\"line\">    sendDataStr = sendData.SerializeToString()</span><br><span class=\"line\">    <span class=\"comment\">#print serialized string value</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'serialized string:'</span>, sendDataStr</span><br><span class=\"line\">    <span class=\"comment\">#------------------------#</span></span><br><span class=\"line\">    <span class=\"comment\">#  message transmission  #</span></span><br><span class=\"line\">    <span class=\"comment\">#------------------------#</span></span><br><span class=\"line\">    receiveDataStr = sendDataStr</span><br><span class=\"line\">    receiveData = test_pb2.CDevice()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Deserialize</span></span><br><span class=\"line\">    receiveData.ParseFromString(receiveDataStr)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'pares serialize string, return: devId = '</span>, receiveData.devId, <span class=\"string\">', name = '</span>, receiveData.name</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> Exception, <span class=\"string\">':'</span>, e</span><br><span class=\"line\">    <span class=\"keyword\">print</span> traceback.print_exc()</span><br><span class=\"line\">    errInfo = sys.exc_info()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> errInfo[<span class=\"number\">0</span>], <span class=\"string\">':'</span>, errInfo[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"react_components_props","date":"2017-11-14T00:00:00.000Z","description":"React组件和属性","_content":"\n> 组件让你把用户界面分成独立的，可重复使用的部分，并且将每个部分分开考虑。\n\n概念上组件就像js的function。它们接受任意的输入（props），然后返回描述屏幕上要展现内容的React元素。\n\n## 函数式组件和类组件\n\n最简单定义组件的方法就是写一个js的function：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\n这个函数是一个有效的React组件，因为它接受一个单独的“props”参数（属性的汇集对象）并返回一个React组件。我们称呼这些组件为函数式组件，因为他们就是javascript的函数。\n\n也可以使用ES6的class来定义一个组件：\n\n```js\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\n以上两种组件表示方法在React看来是等价的。\n\n## 渲染组件\n\n之前的例子中我们只看到了React元素通过html标签表示:\n\n```js\nconst element = <div />;\n```\n\n然而React元素同样可以使用Reat组件表示：\n\n```js\nconst element = <Welcome name=\"Sara\" />;\n```\n\n当React遇到元素由用户自定义组件表示时，会把JSX的属性作为一个单独的对象传递给组件。这个单独的对象就是“props”。\n\n比如，下面的代码会渲染“Hello, Sara”到浏览器屏幕：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name=\"Sara\" />;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n我们来看下上面代码都发生了什么：\n\n1. 我们调用`ReactDOM.render()`使用`<Welcome name=\"Sara\" />`元素作为参数。\n2. React调用`Welcome`组件时传入`{name: 'Sara'}`作为props参数。\n3. 我们的`Welcome`组件返回一个`<h1>Hello, Sara</h1>`元素。\n4. React DOM有效更新DOM元素匹配`<h1>Hello, Sara</h1>`。\n\n> 注意：\n> 自定义组件作为标签使用时首字母要大写。\n> \n> 比如，`<div />`表示一个DOM标签，但是`<Welcome/>`表示一个React组件。\n\n## 组件结构\n\n组件可以在其输出中引用其他组件。这让我们可以使用相同的组件抽象来实现任何细节层次。一个按钮，一个表单，一个弹窗，一个页面，这些在React应用中通常都表示为一个组件。\n\n比如，我们可以创建一个呈现多次`Welcome`的`App`组件：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n```\n\n通常情况下，一个React应用在最上层只有一个`App`组件。然而如果你把React整合到已有的应用中时，可以自底向上的使用小组件然后慢慢的重构到顶层。\n\n## 提取组件\n\n不要害怕将组件分解成更小的组件。\n\n比如，思考下面的`Comment`组件：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n`Comment`组件接收`author`（对象）、`text`（字符串）、`data`（日期）作为“props”，然后在页面上展示一个评论列表。\n\n由于所有的嵌套，这个组件可能会很难改变，并且很难重用它的各个部分。我们可以从中提取一些组件。\n\n第一步，我们抽取`Avatar`：\n\n```js\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\"\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    />\n\n  );\n}\n```\n\n`Avatar`组件不关心它是否会在`Comment`中渲染。这就是为什么我们把它的属性命名为更通用的`user`而不是`author`。\n\n在这里建议命名组件属性的时候尽量使用符合组件自身的特性的属性名字，而不是和上下文相关的名字。\n\n现在我们可以简化一点`Comment`：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <Avatar user={props.author} />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n接来下我们抽取一个`UserInfo`组件用来展示`Avatar`和用户名：\n\n```js\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">\n        {props.user.name}\n      </div>\n    </div>\n  );\n}\n```\n\n这样我们可以更进一步简化`Comment`组件：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n一开始抽取组件可能很麻烦，但是可重用的组件在大型应用中是很有价值的。\n\n> 一个经验原则：\n> \n> 如果一个UI的一部分多次重复使用（`Button`、`Panel`、`Avatar`）,或者自身足够复杂（`App`、`FeedStory`、`Comment`），这时候就该把它们改写为可重用的组件。\n\n\n## Props是只读的\n\n不论你用函数表示法还是类表示法声明一个组件，运行中绝对不能修改组件的“props”。\n\n考虑下面的`sum`函数：\n\n```js\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n这样的函数叫纯函数，因为函数内不会去修改函数的传入参数，并且同样的输入返回同样的结果。\n\n作为对比，下面的函数不是纯函数，因为它修改了自身的参数：\n\n```js\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\nReact非常灵活，但是他有一个严格的准则：\n\n**所有的React组件必须像纯函数一样操作它的props**\n\n当然应用的UI是动态的随时变换的，下一节我们介绍一个新的概念“state”。State允许React组件随着时间的推移改变他们的输出，以响应用户操作，网​​络响应和其他任何事情，而不违反这个规则。\n","source":"_posts/react-component-props.md","raw":"---\ntitle: react_components_props   \n\ndate: '2017-11-14'\n\ndescription: React组件和属性\n\ncategories:\n- react\n\ntags:\n\n- react\n- component\n- props\n---\n\n> 组件让你把用户界面分成独立的，可重复使用的部分，并且将每个部分分开考虑。\n\n概念上组件就像js的function。它们接受任意的输入（props），然后返回描述屏幕上要展现内容的React元素。\n\n## 函数式组件和类组件\n\n最简单定义组件的方法就是写一个js的function：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\n这个函数是一个有效的React组件，因为它接受一个单独的“props”参数（属性的汇集对象）并返回一个React组件。我们称呼这些组件为函数式组件，因为他们就是javascript的函数。\n\n也可以使用ES6的class来定义一个组件：\n\n```js\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\n以上两种组件表示方法在React看来是等价的。\n\n## 渲染组件\n\n之前的例子中我们只看到了React元素通过html标签表示:\n\n```js\nconst element = <div />;\n```\n\n然而React元素同样可以使用Reat组件表示：\n\n```js\nconst element = <Welcome name=\"Sara\" />;\n```\n\n当React遇到元素由用户自定义组件表示时，会把JSX的属性作为一个单独的对象传递给组件。这个单独的对象就是“props”。\n\n比如，下面的代码会渲染“Hello, Sara”到浏览器屏幕：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name=\"Sara\" />;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n我们来看下上面代码都发生了什么：\n\n1. 我们调用`ReactDOM.render()`使用`<Welcome name=\"Sara\" />`元素作为参数。\n2. React调用`Welcome`组件时传入`{name: 'Sara'}`作为props参数。\n3. 我们的`Welcome`组件返回一个`<h1>Hello, Sara</h1>`元素。\n4. React DOM有效更新DOM元素匹配`<h1>Hello, Sara</h1>`。\n\n> 注意：\n> 自定义组件作为标签使用时首字母要大写。\n> \n> 比如，`<div />`表示一个DOM标签，但是`<Welcome/>`表示一个React组件。\n\n## 组件结构\n\n组件可以在其输出中引用其他组件。这让我们可以使用相同的组件抽象来实现任何细节层次。一个按钮，一个表单，一个弹窗，一个页面，这些在React应用中通常都表示为一个组件。\n\n比如，我们可以创建一个呈现多次`Welcome`的`App`组件：\n\n```js\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n```\n\n通常情况下，一个React应用在最上层只有一个`App`组件。然而如果你把React整合到已有的应用中时，可以自底向上的使用小组件然后慢慢的重构到顶层。\n\n## 提取组件\n\n不要害怕将组件分解成更小的组件。\n\n比如，思考下面的`Comment`组件：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n`Comment`组件接收`author`（对象）、`text`（字符串）、`data`（日期）作为“props”，然后在页面上展示一个评论列表。\n\n由于所有的嵌套，这个组件可能会很难改变，并且很难重用它的各个部分。我们可以从中提取一些组件。\n\n第一步，我们抽取`Avatar`：\n\n```js\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\"\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    />\n\n  );\n}\n```\n\n`Avatar`组件不关心它是否会在`Comment`中渲染。这就是为什么我们把它的属性命名为更通用的`user`而不是`author`。\n\n在这里建议命名组件属性的时候尽量使用符合组件自身的特性的属性名字，而不是和上下文相关的名字。\n\n现在我们可以简化一点`Comment`：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <Avatar user={props.author} />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n接来下我们抽取一个`UserInfo`组件用来展示`Avatar`和用户名：\n\n```js\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">\n        {props.user.name}\n      </div>\n    </div>\n  );\n}\n```\n\n这样我们可以更进一步简化`Comment`组件：\n\n```js\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n一开始抽取组件可能很麻烦，但是可重用的组件在大型应用中是很有价值的。\n\n> 一个经验原则：\n> \n> 如果一个UI的一部分多次重复使用（`Button`、`Panel`、`Avatar`）,或者自身足够复杂（`App`、`FeedStory`、`Comment`），这时候就该把它们改写为可重用的组件。\n\n\n## Props是只读的\n\n不论你用函数表示法还是类表示法声明一个组件，运行中绝对不能修改组件的“props”。\n\n考虑下面的`sum`函数：\n\n```js\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n这样的函数叫纯函数，因为函数内不会去修改函数的传入参数，并且同样的输入返回同样的结果。\n\n作为对比，下面的函数不是纯函数，因为它修改了自身的参数：\n\n```js\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\nReact非常灵活，但是他有一个严格的准则：\n\n**所有的React组件必须像纯函数一样操作它的props**\n\n当然应用的UI是动态的随时变换的，下一节我们介绍一个新的概念“state”。State允许React组件随着时间的推移改变他们的输出，以响应用户操作，网​​络响应和其他任何事情，而不违反这个规则。\n","slug":"react-component-props","published":1,"updated":"2018-06-20T03:05:28.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8i00015vqqj731d6xbo","content":"<blockquote>\n<p>组件让你把用户界面分成独立的，可重复使用的部分，并且将每个部分分开考虑。</p>\n</blockquote>\n<p>概念上组件就像js的function。它们接受任意的输入（props），然后返回描述屏幕上要展现内容的React元素。</p>\n<h2 id=\"函数式组件和类组件\"><a href=\"#函数式组件和类组件\" class=\"headerlink\" title=\"函数式组件和类组件\"></a>函数式组件和类组件</h2><p>最简单定义组件的方法就是写一个js的function：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数是一个有效的React组件，因为它接受一个单独的“props”参数（属性的汇集对象）并返回一个React组件。我们称呼这些组件为函数式组件，因为他们就是javascript的函数。</p>\n<p>也可以使用ES6的class来定义一个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上两种组件表示方法在React看来是等价的。</p>\n<h2 id=\"渲染组件\"><a href=\"#渲染组件\" class=\"headerlink\" title=\"渲染组件\"></a>渲染组件</h2><p>之前的例子中我们只看到了React元素通过html标签表示:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;div /&gt;;</span><br></pre></td></tr></table></figure>\n<p>然而React元素同样可以使用Reat组件表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;Welcome name=\"Sara\" /&gt;;</span><br></pre></td></tr></table></figure>\n<p>当React遇到元素由用户自定义组件表示时，会把JSX的属性作为一个单独的对象传递给组件。这个单独的对象就是“props”。</p>\n<p>比如，下面的代码会渲染“Hello, Sara”到浏览器屏幕：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;Welcome name=\"Sara\" /&gt;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们来看下上面代码都发生了什么：</p>\n<ol>\n<li>我们调用<code>ReactDOM.render()</code>使用<code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code>元素作为参数。</li>\n<li>React调用<code>Welcome</code>组件时传入<code>{name: &#39;Sara&#39;}</code>作为props参数。</li>\n<li>我们的<code>Welcome</code>组件返回一个<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>元素。</li>\n<li>React DOM有效更新DOM元素匹配<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>。</li>\n</ol>\n<blockquote>\n<p>注意：<br>自定义组件作为标签使用时首字母要大写。</p>\n<p>比如，<code>&lt;div /&gt;</code>表示一个DOM标签，但是<code>&lt;Welcome/&gt;</code>表示一个React组件。</p>\n</blockquote>\n<h2 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h2><p>组件可以在其输出中引用其他组件。这让我们可以使用相同的组件抽象来实现任何细节层次。一个按钮，一个表单，一个弹窗，一个页面，这些在React应用中通常都表示为一个组件。</p>\n<p>比如，我们可以创建一个呈现多次<code>Welcome</code>的<code>App</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Sara\"</span> /&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Cahal\"</span> /&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Edite\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>通常情况下，一个React应用在最上层只有一个<code>App</code>组件。然而如果你把React整合到已有的应用中时，可以自底向上的使用小组件然后慢慢的重构到顶层。</p>\n<h2 id=\"提取组件\"><a href=\"#提取组件\" class=\"headerlink\" title=\"提取组件\"></a>提取组件</h2><p>不要害怕将组件分解成更小的组件。</p>\n<p>比如，思考下面的<code>Comment</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">        &lt;img className=<span class=\"string\">\"Avatar\"</span></span><br><span class=\"line\">          src=&#123;props.author.avatarUrl&#125;</span><br><span class=\"line\">          alt=&#123;props.author.name&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">          &#123;props.author.name&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>Comment</code>组件接收<code>author</code>（对象）、<code>text</code>（字符串）、<code>data</code>（日期）作为“props”，然后在页面上展示一个评论列表。</p>\n<p>由于所有的嵌套，这个组件可能会很难改变，并且很难重用它的各个部分。我们可以从中提取一些组件。</p>\n<p>第一步，我们抽取<code>Avatar</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Avatar</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;img className=<span class=\"string\">\"Avatar\"</span></span><br><span class=\"line\">      src=&#123;props.user.avatarUrl&#125;</span><br><span class=\"line\">      alt=&#123;props.user.name&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Avatar</code>组件不关心它是否会在<code>Comment</code>中渲染。这就是为什么我们把它的属性命名为更通用的<code>user</code>而不是<code>author</code>。</p>\n<p>在这里建议命名组件属性的时候尽量使用符合组件自身的特性的属性名字，而不是和上下文相关的名字。</p>\n<p>现在我们可以简化一点<code>Comment</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">        &lt;Avatar user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">          &#123;props.author.name&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接来下我们抽取一个<code>UserInfo</code>组件用来展示<code>Avatar</code>和用户名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">        &#123;props.user.name&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以更进一步简化<code>Comment</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>一开始抽取组件可能很麻烦，但是可重用的组件在大型应用中是很有价值的。</p>\n<blockquote>\n<p>一个经验原则：</p>\n<p>如果一个UI的一部分多次重复使用（<code>Button</code>、<code>Panel</code>、<code>Avatar</code>）,或者自身足够复杂（<code>App</code>、<code>FeedStory</code>、<code>Comment</code>），这时候就该把它们改写为可重用的组件。</p>\n</blockquote>\n<h2 id=\"Props是只读的\"><a href=\"#Props是只读的\" class=\"headerlink\" title=\"Props是只读的\"></a>Props是只读的</h2><p>不论你用函数表示法还是类表示法声明一个组件，运行中绝对不能修改组件的“props”。</p>\n<p>考虑下面的<code>sum</code>函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的函数叫纯函数，因为函数内不会去修改函数的传入参数，并且同样的输入返回同样的结果。</p>\n<p>作为对比，下面的函数不是纯函数，因为它修改了自身的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\">account, amount</span>) </span>&#123;</span><br><span class=\"line\">  account.total -= amount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>React非常灵活，但是他有一个严格的准则：</p>\n<p><strong>所有的React组件必须像纯函数一样操作它的props</strong></p>\n<p>当然应用的UI是动态的随时变换的，下一节我们介绍一个新的概念“state”。State允许React组件随着时间的推移改变他们的输出，以响应用户操作，网​​络响应和其他任何事情，而不违反这个规则。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>组件让你把用户界面分成独立的，可重复使用的部分，并且将每个部分分开考虑。</p>\n</blockquote>\n<p>概念上组件就像js的function。它们接受任意的输入（props），然后返回描述屏幕上要展现内容的React元素。</p>\n<h2 id=\"函数式组件和类组件\"><a href=\"#函数式组件和类组件\" class=\"headerlink\" title=\"函数式组件和类组件\"></a>函数式组件和类组件</h2><p>最简单定义组件的方法就是写一个js的function：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数是一个有效的React组件，因为它接受一个单独的“props”参数（属性的汇集对象）并返回一个React组件。我们称呼这些组件为函数式组件，因为他们就是javascript的函数。</p>\n<p>也可以使用ES6的class来定义一个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上两种组件表示方法在React看来是等价的。</p>\n<h2 id=\"渲染组件\"><a href=\"#渲染组件\" class=\"headerlink\" title=\"渲染组件\"></a>渲染组件</h2><p>之前的例子中我们只看到了React元素通过html标签表示:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;div /&gt;;</span><br></pre></td></tr></table></figure>\n<p>然而React元素同样可以使用Reat组件表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;Welcome name=\"Sara\" /&gt;;</span><br></pre></td></tr></table></figure>\n<p>当React遇到元素由用户自定义组件表示时，会把JSX的属性作为一个单独的对象传递给组件。这个单独的对象就是“props”。</p>\n<p>比如，下面的代码会渲染“Hello, Sara”到浏览器屏幕：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = &lt;Welcome name=\"Sara\" /&gt;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们来看下上面代码都发生了什么：</p>\n<ol>\n<li>我们调用<code>ReactDOM.render()</code>使用<code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code>元素作为参数。</li>\n<li>React调用<code>Welcome</code>组件时传入<code>{name: &#39;Sara&#39;}</code>作为props参数。</li>\n<li>我们的<code>Welcome</code>组件返回一个<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>元素。</li>\n<li>React DOM有效更新DOM元素匹配<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>。</li>\n</ol>\n<blockquote>\n<p>注意：<br>自定义组件作为标签使用时首字母要大写。</p>\n<p>比如，<code>&lt;div /&gt;</code>表示一个DOM标签，但是<code>&lt;Welcome/&gt;</code>表示一个React组件。</p>\n</blockquote>\n<h2 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h2><p>组件可以在其输出中引用其他组件。这让我们可以使用相同的组件抽象来实现任何细节层次。一个按钮，一个表单，一个弹窗，一个页面，这些在React应用中通常都表示为一个组件。</p>\n<p>比如，我们可以创建一个呈现多次<code>Welcome</code>的<code>App</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Sara\"</span> /&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Cahal\"</span> /&gt;</span><br><span class=\"line\">      &lt;Welcome name=<span class=\"string\">\"Edite\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>通常情况下，一个React应用在最上层只有一个<code>App</code>组件。然而如果你把React整合到已有的应用中时，可以自底向上的使用小组件然后慢慢的重构到顶层。</p>\n<h2 id=\"提取组件\"><a href=\"#提取组件\" class=\"headerlink\" title=\"提取组件\"></a>提取组件</h2><p>不要害怕将组件分解成更小的组件。</p>\n<p>比如，思考下面的<code>Comment</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">        &lt;img className=<span class=\"string\">\"Avatar\"</span></span><br><span class=\"line\">          src=&#123;props.author.avatarUrl&#125;</span><br><span class=\"line\">          alt=&#123;props.author.name&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">          &#123;props.author.name&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>Comment</code>组件接收<code>author</code>（对象）、<code>text</code>（字符串）、<code>data</code>（日期）作为“props”，然后在页面上展示一个评论列表。</p>\n<p>由于所有的嵌套，这个组件可能会很难改变，并且很难重用它的各个部分。我们可以从中提取一些组件。</p>\n<p>第一步，我们抽取<code>Avatar</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Avatar</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;img className=<span class=\"string\">\"Avatar\"</span></span><br><span class=\"line\">      src=&#123;props.user.avatarUrl&#125;</span><br><span class=\"line\">      alt=&#123;props.user.name&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Avatar</code>组件不关心它是否会在<code>Comment</code>中渲染。这就是为什么我们把它的属性命名为更通用的<code>user</code>而不是<code>author</code>。</p>\n<p>在这里建议命名组件属性的时候尽量使用符合组件自身的特性的属性名字，而不是和上下文相关的名字。</p>\n<p>现在我们可以简化一点<code>Comment</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">        &lt;Avatar user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">          &#123;props.author.name&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接来下我们抽取一个<code>UserInfo</code>组件用来展示<code>Avatar</code>和用户名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;</span><br><span class=\"line\">        &#123;props.user.name&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以更进一步简化<code>Comment</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;</span><br><span class=\"line\">        &#123;props.text&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;formatDate(props.date)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>一开始抽取组件可能很麻烦，但是可重用的组件在大型应用中是很有价值的。</p>\n<blockquote>\n<p>一个经验原则：</p>\n<p>如果一个UI的一部分多次重复使用（<code>Button</code>、<code>Panel</code>、<code>Avatar</code>）,或者自身足够复杂（<code>App</code>、<code>FeedStory</code>、<code>Comment</code>），这时候就该把它们改写为可重用的组件。</p>\n</blockquote>\n<h2 id=\"Props是只读的\"><a href=\"#Props是只读的\" class=\"headerlink\" title=\"Props是只读的\"></a>Props是只读的</h2><p>不论你用函数表示法还是类表示法声明一个组件，运行中绝对不能修改组件的“props”。</p>\n<p>考虑下面的<code>sum</code>函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的函数叫纯函数，因为函数内不会去修改函数的传入参数，并且同样的输入返回同样的结果。</p>\n<p>作为对比，下面的函数不是纯函数，因为它修改了自身的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\">account, amount</span>) </span>&#123;</span><br><span class=\"line\">  account.total -= amount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>React非常灵活，但是他有一个严格的准则：</p>\n<p><strong>所有的React组件必须像纯函数一样操作它的props</strong></p>\n<p>当然应用的UI是动态的随时变换的，下一节我们介绍一个新的概念“state”。State允许React组件随着时间的推移改变他们的输出，以响应用户操作，网​​络响应和其他任何事情，而不违反这个规则。</p>\n"},{"title":"react-conditional-render","date":"2017-11-15T00:00:00.000Z","description":"React有条件渲染","_content":"\n> 在React中，你可以创建不同的组件来封装你需要的行为。然后根据应用的状态来渲染需要的内容。\n\nReact中的条件渲染和js中的条件表达式一样。使用JavaScript的关键字`if`或者[条件运算符](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)创建表示当前状态的元素，然后React更新UI来匹配元素。\n\n想一下下面两个组件：\n\n```js\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n```\n\n我们创建一个`Greeting`组件，根据用户是否登录来显示以上组件中的某一个：\n\n```js\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nReactDOM.render(\n  // Try changing to isLoggedIn={true}:\n  <Greeting isLoggedIn={false} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ZpVxNq?editors=0011)\n\n此示例根据`isLoggedIn`属性的值显示不同的问候语。\n\n## 元素变量\n\n可以使用变量存储元素。这可以帮助你有条件地显示组件的一部分，而其余的输出不会改变。\n\n考虑这两个代表注销和登录按钮的新组件：\n\n```js\nfunction LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n```\n\n在下面的例子中，我们将创建一个有状态组件`LoginControl`。\n\n它将根据当前状态显示`<LoginButton />`或`<LogoutButton />`。它也将显示前面例子中的`<Greeting />`：\n\n```js\nclass LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n\n    let button = null;\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <LoginControl />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/QKzAgB?editors=0010)\n\n尽管声明一个变量并使用if语句是条件渲染组件的好方法，但是有时你可能想使用更短的语法。如下所述，在JSX中有几种方法可以内联条件。\n\n### 内联if和&&逻辑运算符\n\n你可以在JSX中[嵌入任何表达式](https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx)，用大括号括起来。包括JavaScript逻辑&&运算符。可以很方便有条件地包含一个元素:\n\n```js\nfunction Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(\n  <Mailbox unreadMessages={messages} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ozJddz?editors=0010)\n\n在JavaScript中，`true && expression`总是等于`expression`,`false && expression`总是等于`false`。\n\n因此，如果条件结果是`true`，`&&`运算符右侧的元素会输出。如果结果为`false`，React会忽略并跳过该元素。\n\n### 内联if-else和三目条件操作符\n\n另一种内联条件渲染元素的方法是使用JavaScript的三目运算符`condition ? true : false`。\n\n在下面的例子中，我们使用它来有条件地渲染一小块文本:\n\n```js\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n    </div>\n  );\n}\n```\n\n它也可以用于较大的表达式，虽然不能明显看出逻辑：\n\n```js\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn ? (\n        <LogoutButton onClick={this.handleLogoutClick} />\n      ) : (\n        <LoginButton onClick={this.handleLoginClick} />\n      )}\n    </div>\n  );\n}\n```\n\n就像在JavaScript中一样，根据自己和和团队认为更具可读性来选择合适的代码样式。还要记住，只要条件变得太复杂，可能是提取组件的好时机。\n\n## 防止组件重绘\n\n在极少数情况下，即使由另一个组件呈现，您也可能希望组件隐藏自己。为此，返回`null`而不是其渲染输出内容。\n\n下面的例子，`<WarningBanner />`组件根据属性`warn`值进行渲染。如果属性值是`false`组件则不渲染：\n\n```js\nfunction WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true}\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(prevState => ({\n      showWarning: !prevState.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/Xjoqwm?editors=0010)\n\n从组件的`render`方法返回`null`不会影响组件生命周期方法的触发。例如，`componentWillUpdate`和`componentDidUpdate`仍然会被调用。\n\n","source":"_posts/react-conditional-render.md","raw":"---\ntitle: react-conditional-render\ndate: '2017-11-15'\ndescription: React有条件渲染\ncategories:\n- react\n\ntags:\n\n- react\n- render\n- conditional\n\n---\n\n> 在React中，你可以创建不同的组件来封装你需要的行为。然后根据应用的状态来渲染需要的内容。\n\nReact中的条件渲染和js中的条件表达式一样。使用JavaScript的关键字`if`或者[条件运算符](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)创建表示当前状态的元素，然后React更新UI来匹配元素。\n\n想一下下面两个组件：\n\n```js\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n```\n\n我们创建一个`Greeting`组件，根据用户是否登录来显示以上组件中的某一个：\n\n```js\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nReactDOM.render(\n  // Try changing to isLoggedIn={true}:\n  <Greeting isLoggedIn={false} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ZpVxNq?editors=0011)\n\n此示例根据`isLoggedIn`属性的值显示不同的问候语。\n\n## 元素变量\n\n可以使用变量存储元素。这可以帮助你有条件地显示组件的一部分，而其余的输出不会改变。\n\n考虑这两个代表注销和登录按钮的新组件：\n\n```js\nfunction LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n```\n\n在下面的例子中，我们将创建一个有状态组件`LoginControl`。\n\n它将根据当前状态显示`<LoginButton />`或`<LogoutButton />`。它也将显示前面例子中的`<Greeting />`：\n\n```js\nclass LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n\n    let button = null;\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <LoginControl />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/QKzAgB?editors=0010)\n\n尽管声明一个变量并使用if语句是条件渲染组件的好方法，但是有时你可能想使用更短的语法。如下所述，在JSX中有几种方法可以内联条件。\n\n### 内联if和&&逻辑运算符\n\n你可以在JSX中[嵌入任何表达式](https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx)，用大括号括起来。包括JavaScript逻辑&&运算符。可以很方便有条件地包含一个元素:\n\n```js\nfunction Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(\n  <Mailbox unreadMessages={messages} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ozJddz?editors=0010)\n\n在JavaScript中，`true && expression`总是等于`expression`,`false && expression`总是等于`false`。\n\n因此，如果条件结果是`true`，`&&`运算符右侧的元素会输出。如果结果为`false`，React会忽略并跳过该元素。\n\n### 内联if-else和三目条件操作符\n\n另一种内联条件渲染元素的方法是使用JavaScript的三目运算符`condition ? true : false`。\n\n在下面的例子中，我们使用它来有条件地渲染一小块文本:\n\n```js\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n    </div>\n  );\n}\n```\n\n它也可以用于较大的表达式，虽然不能明显看出逻辑：\n\n```js\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn ? (\n        <LogoutButton onClick={this.handleLogoutClick} />\n      ) : (\n        <LoginButton onClick={this.handleLoginClick} />\n      )}\n    </div>\n  );\n}\n```\n\n就像在JavaScript中一样，根据自己和和团队认为更具可读性来选择合适的代码样式。还要记住，只要条件变得太复杂，可能是提取组件的好时机。\n\n## 防止组件重绘\n\n在极少数情况下，即使由另一个组件呈现，您也可能希望组件隐藏自己。为此，返回`null`而不是其渲染输出内容。\n\n下面的例子，`<WarningBanner />`组件根据属性`warn`值进行渲染。如果属性值是`false`组件则不渲染：\n\n```js\nfunction WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true}\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(prevState => ({\n      showWarning: !prevState.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/Xjoqwm?editors=0010)\n\n从组件的`render`方法返回`null`不会影响组件生命周期方法的触发。例如，`componentWillUpdate`和`componentDidUpdate`仍然会被调用。\n\n","slug":"react-conditional-render","published":1,"updated":"2018-06-20T03:05:34.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8i30018vqqjlp55nfye","content":"<blockquote>\n<p>在React中，你可以创建不同的组件来封装你需要的行为。然后根据应用的状态来渲染需要的内容。</p>\n</blockquote>\n<p>React中的条件渲染和js中的条件表达式一样。使用JavaScript的关键字<code>if</code>或者<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener\">条件运算符</a>创建表示当前状态的元素，然后React更新UI来匹配元素。</p>\n<p>想一下下面两个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserGreeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Welcome back!&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GuestGreeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Please sign up.&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们创建一个<code>Greeting</code>组件，根据用户是否登录来显示以上组件中的某一个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;UserGreeting /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;GuestGreeting /&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  // Try changing to isLoggedIn=&#123;true&#125;:</span><br><span class=\"line\">  &lt;Greeting isLoggedIn=&#123;false&#125; /&gt;,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>此示例根据<code>isLoggedIn</code>属性的值显示不同的问候语。</p>\n<h2 id=\"元素变量\"><a href=\"#元素变量\" class=\"headerlink\" title=\"元素变量\"></a>元素变量</h2><p>可以使用变量存储元素。这可以帮助你有条件地显示组件的一部分，而其余的输出不会改变。</p>\n<p>考虑这两个代表注销和登录按钮的新组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LoginButton</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;props.onClick&#125;&gt;</span><br><span class=\"line\">      Login</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function LogoutButton(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button onClick=&#123;props.onClick&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      Logout</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>button&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在下面的例子中，我们将创建一个有状态组件<code>LoginControl</code>。</p>\n<p>它将根据当前状态显示<code>&lt;LoginButton /&gt;</code>或<code>&lt;LogoutButton /&gt;</code>。它也将显示前面例子中的<code>&lt;Greeting /&gt;</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleLoginClick = <span class=\"keyword\">this</span>.handleLoginClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleLogoutClick = <span class=\"keyword\">this</span>.handleLogoutClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleLoginClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleLogoutClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> button = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">      button = &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class=\"line\">        &#123;button&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;LoginControl /&gt;,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>尽管声明一个变量并使用if语句是条件渲染组件的好方法，但是有时你可能想使用更短的语法。如下所述，在JSX中有几种方法可以内联条件。</p>\n<h3 id=\"内联if和-amp-amp-逻辑运算符\"><a href=\"#内联if和-amp-amp-逻辑运算符\" class=\"headerlink\" title=\"内联if和&amp;&amp;逻辑运算符\"></a>内联if和&amp;&amp;逻辑运算符</h3><p>你可以在JSX中<a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\" target=\"_blank\" rel=\"noopener\">嵌入任何表达式</a>，用大括号括起来。包括JavaScript逻辑&amp;&amp;运算符。可以很方便有条件地包含一个元素:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mailbox</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unreadMessages = props.unreadMessages;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">      &#123;unreadMessages.length &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">          You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> messages = [<span class=\"string\">'React'</span>, <span class=\"string\">'Re: React'</span>, <span class=\"string\">'Re:Re: React'</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Mailbox unreadMessages=&#123;messages&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在JavaScript中，<code>true &amp;&amp; expression</code>总是等于<code>expression</code>,<code>false &amp;&amp; expression</code>总是等于<code>false</code>。</p>\n<p>因此，如果条件结果是<code>true</code>，<code>&amp;&amp;</code>运算符右侧的元素会输出。如果结果为<code>false</code>，React会忽略并跳过该元素。</p>\n<h3 id=\"内联if-else和三目条件操作符\"><a href=\"#内联if-else和三目条件操作符\" class=\"headerlink\" title=\"内联if-else和三目条件操作符\"></a>内联if-else和三目条件操作符</h3><p>另一种内联条件渲染元素的方法是使用JavaScript的三目运算符<code>condition ? true : false</code>。</p>\n<p>在下面的例子中，我们使用它来有条件地渲染一小块文本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class=\"string\">'currently'</span> : <span class=\"string\">'not'</span>&#125;&lt;<span class=\"regexp\">/b&gt; logged in.</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它也可以用于较大的表达式，虽然不能明显看出逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;isLoggedIn ? (</span><br><span class=\"line\">        &lt;LogoutButton onClick=&#123;<span class=\"keyword\">this</span>.handleLogoutClick&#125; /&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;LoginButton onClick=&#123;<span class=\"keyword\">this</span>.handleLoginClick&#125; /&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>就像在JavaScript中一样，根据自己和和团队认为更具可读性来选择合适的代码样式。还要记住，只要条件变得太复杂，可能是提取组件的好时机。</p>\n<h2 id=\"防止组件重绘\"><a href=\"#防止组件重绘\" class=\"headerlink\" title=\"防止组件重绘\"></a>防止组件重绘</h2><p>在极少数情况下，即使由另一个组件呈现，您也可能希望组件隐藏自己。为此，返回<code>null</code>而不是其渲染输出内容。</p>\n<p>下面的例子，<code>&lt;WarningBanner /&gt;</code>组件根据属性<code>warn</code>值进行渲染。如果属性值是<code>false</code>组件则不渲染：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WarningBanner</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!props.warn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"warning\"</span>&gt;</span><br><span class=\"line\">      Warning!</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Page extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props);</span></span><br><span class=\"line\"><span class=\"regexp\">    this.state = &#123;showWarning: true&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.handleToggleClick = this.handleToggleClick.bind(this);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  handleToggleClick() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.setState(prevState =&gt; (&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      showWarning: !prevState.showWarning</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;));</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;WarningBanner warn=&#123;this.state.showWarning&#125; /</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleToggleClick&#125;&gt;</span><br><span class=\"line\">          &#123;<span class=\"keyword\">this</span>.state.showWarning ? <span class=\"string\">'Hide'</span> : <span class=\"string\">'Show'</span>&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Page /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>从组件的<code>render</code>方法返回<code>null</code>不会影响组件生命周期方法的触发。例如，<code>componentWillUpdate</code>和<code>componentDidUpdate</code>仍然会被调用。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在React中，你可以创建不同的组件来封装你需要的行为。然后根据应用的状态来渲染需要的内容。</p>\n</blockquote>\n<p>React中的条件渲染和js中的条件表达式一样。使用JavaScript的关键字<code>if</code>或者<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener\">条件运算符</a>创建表示当前状态的元素，然后React更新UI来匹配元素。</p>\n<p>想一下下面两个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserGreeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Welcome back!&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GuestGreeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;h1&gt;Please sign up.&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们创建一个<code>Greeting</code>组件，根据用户是否登录来显示以上组件中的某一个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeting</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;UserGreeting /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;GuestGreeting /&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  // Try changing to isLoggedIn=&#123;true&#125;:</span><br><span class=\"line\">  &lt;Greeting isLoggedIn=&#123;false&#125; /&gt;,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>此示例根据<code>isLoggedIn</code>属性的值显示不同的问候语。</p>\n<h2 id=\"元素变量\"><a href=\"#元素变量\" class=\"headerlink\" title=\"元素变量\"></a>元素变量</h2><p>可以使用变量存储元素。这可以帮助你有条件地显示组件的一部分，而其余的输出不会改变。</p>\n<p>考虑这两个代表注销和登录按钮的新组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LoginButton</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;button onClick=&#123;props.onClick&#125;&gt;</span><br><span class=\"line\">      Login</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function LogoutButton(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button onClick=&#123;props.onClick&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      Logout</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>button&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在下面的例子中，我们将创建一个有状态组件<code>LoginControl</code>。</p>\n<p>它将根据当前状态显示<code>&lt;LoginButton /&gt;</code>或<code>&lt;LogoutButton /&gt;</code>。它也将显示前面例子中的<code>&lt;Greeting /&gt;</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleLoginClick = <span class=\"keyword\">this</span>.handleLoginClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleLogoutClick = <span class=\"keyword\">this</span>.handleLogoutClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleLoginClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleLogoutClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">isLoggedIn</span>: <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> button = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">      button = &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class=\"line\">        &#123;button&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;LoginControl /&gt;,</span><br><span class=\"line\">  document.getElementById('root')</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>尽管声明一个变量并使用if语句是条件渲染组件的好方法，但是有时你可能想使用更短的语法。如下所述，在JSX中有几种方法可以内联条件。</p>\n<h3 id=\"内联if和-amp-amp-逻辑运算符\"><a href=\"#内联if和-amp-amp-逻辑运算符\" class=\"headerlink\" title=\"内联if和&amp;&amp;逻辑运算符\"></a>内联if和&amp;&amp;逻辑运算符</h3><p>你可以在JSX中<a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\" target=\"_blank\" rel=\"noopener\">嵌入任何表达式</a>，用大括号括起来。包括JavaScript逻辑&amp;&amp;运算符。可以很方便有条件地包含一个元素:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mailbox</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unreadMessages = props.unreadMessages;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">      &#123;unreadMessages.length &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        &lt;h2&gt;</span><br><span class=\"line\">          You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> messages = [<span class=\"string\">'React'</span>, <span class=\"string\">'Re: React'</span>, <span class=\"string\">'Re:Re: React'</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Mailbox unreadMessages=&#123;messages&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在JavaScript中，<code>true &amp;&amp; expression</code>总是等于<code>expression</code>,<code>false &amp;&amp; expression</code>总是等于<code>false</code>。</p>\n<p>因此，如果条件结果是<code>true</code>，<code>&amp;&amp;</code>运算符右侧的元素会输出。如果结果为<code>false</code>，React会忽略并跳过该元素。</p>\n<h3 id=\"内联if-else和三目条件操作符\"><a href=\"#内联if-else和三目条件操作符\" class=\"headerlink\" title=\"内联if-else和三目条件操作符\"></a>内联if-else和三目条件操作符</h3><p>另一种内联条件渲染元素的方法是使用JavaScript的三目运算符<code>condition ? true : false</code>。</p>\n<p>在下面的例子中，我们使用它来有条件地渲染一小块文本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class=\"string\">'currently'</span> : <span class=\"string\">'not'</span>&#125;&lt;<span class=\"regexp\">/b&gt; logged in.</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它也可以用于较大的表达式，虽然不能明显看出逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;isLoggedIn ? (</span><br><span class=\"line\">        &lt;LogoutButton onClick=&#123;<span class=\"keyword\">this</span>.handleLogoutClick&#125; /&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;LoginButton onClick=&#123;<span class=\"keyword\">this</span>.handleLoginClick&#125; /&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>就像在JavaScript中一样，根据自己和和团队认为更具可读性来选择合适的代码样式。还要记住，只要条件变得太复杂，可能是提取组件的好时机。</p>\n<h2 id=\"防止组件重绘\"><a href=\"#防止组件重绘\" class=\"headerlink\" title=\"防止组件重绘\"></a>防止组件重绘</h2><p>在极少数情况下，即使由另一个组件呈现，您也可能希望组件隐藏自己。为此，返回<code>null</code>而不是其渲染输出内容。</p>\n<p>下面的例子，<code>&lt;WarningBanner /&gt;</code>组件根据属性<code>warn</code>值进行渲染。如果属性值是<code>false</code>组件则不渲染：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WarningBanner</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!props.warn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"warning\"</span>&gt;</span><br><span class=\"line\">      Warning!</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Page extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props);</span></span><br><span class=\"line\"><span class=\"regexp\">    this.state = &#123;showWarning: true&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.handleToggleClick = this.handleToggleClick.bind(this);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  handleToggleClick() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.setState(prevState =&gt; (&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      showWarning: !prevState.showWarning</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;));</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;WarningBanner warn=&#123;this.state.showWarning&#125; /</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleToggleClick&#125;&gt;</span><br><span class=\"line\">          &#123;<span class=\"keyword\">this</span>.state.showWarning ? <span class=\"string\">'Hide'</span> : <span class=\"string\">'Show'</span>&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Page /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>从组件的<code>render</code>方法返回<code>null</code>不会影响组件生命周期方法的触发。例如，<code>componentWillUpdate</code>和<code>componentDidUpdate</code>仍然会被调用。</p>\n"},{"title":"react-event","date":"2017-11-15T00:00:00.000Z","description":"React事件处理","_content":"\n\nReact元素的事件处理和DOM元素的事件处理很相似。有下面的一些语法差异：\n\n* React事件使用驼峰命名法而不是小写字母+“-”命名法\n* 在JSX中传入函数表达式绑定事件而不是函数名称字符串\n\n例如，在HTML中：\n\n```html\n<button onclick=\"activateLasers()\">\n  Activate Lasers\n</button>\n```\n\n在React中略有不同：\n\n```js\n<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n```\n\n另一个区别是你不能返回`false`来阻止React中的默认行为。您必须显式调用事件的`preventDefault`方法。比如，在原生的HTML为了阻止默认的链接行为打开新页面，我们这么写：\n\n```html\n<a href=\"#\" onclick=\"console.log('The link was clicked.'); return false\">\n  Click me\n</a>\n```\n\n在React中，应该是：\n\n```js\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n```\n\n这里，`e`是一个合成事件。React根据[W3C规范](https://www.w3.org/TR/DOM-Level-3-Events/)定义了这些合成事件，所以你不必担心跨浏览器兼容性。请参阅[SyntheticEvent](https://reactjs.org/docs/events.html)参考指南以了解更多信息。\n\n当使用React时，通常不需要调用`addEventListener`来在创建DOM元素之后添加事件监听器。相反，只需在元素初始渲染时提供一个侦听器。\n\n当你定义一个[ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)格式的组件时，一种常见的模式是把事件处理程序作为类中的一个方法。比如，这个`Toggle`组件呈现一个按钮，让用户在“ON”和“OFF”状态之间切换:\n\n```js\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/xEmzGg?editors=0010)\n\n在JSX回调中，你必须`this`的含义。在JavaScript中类方法默认是没有边界的。如果你在没有绑定`this.handleClick`的情况下传递参数到`onClick`的话，调用该函数时`this`是`undefined`。\n\n这不是React特有行为，这是函数在js中的[运行机制](https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/)。通常如果你在引用一个方法时候方法名没有带`()`，比如`onClick={this.handleClick}`，你应该绑定该方法。\n\n如果你觉得调用`bind`方法来绑定函数麻烦，有两种解决这个问题的方法。如果你使用的是实验中的[公共类字段语法](https://babeljs.io/docs/plugins/transform-class-properties/),你可以使用类字段来正确地绑定回调：\n\n```js\nclass LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\n在[Create React App](https://github.com/facebookincubator/create-react-app)中默认启用该语法。\n\n如果你没有使用公共类字段语法，你可以在回调中使用一个[箭头函数](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)：\n\n```js\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\n这种语法的问题是当`LoggingButton`每次渲染时都要创建一个不同的回调。大多数情况下，这没问题。但是如果回调函数是作为props传递给子组件的话，这些组件可能会做额外的重新渲染。我们通常建议在构造函数中绑定或使用类字段语法，以避免这种性能问题。\n\n## 给事件处理函数传递参数\n\n在循环内部，通常需要将一个额外的参数传递给事件处理程序。比如，如果id是行ID，则以下两种都可以工作：\n\n```js\n<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n```\n\n上面两行代码是等价的，区别只是一个使用[箭头函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)一个使用[函数原型链绑定](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)。\n\n在这两种情况下,代表React事件的参数`e`会作为参数ID之后的第二个参数传递。使用箭头函数时，我们必须明确的传递`e`，但是使用`bind`时会自动转发。\n","source":"_posts/react-event.md","raw":"---\ntitle: react-event\ndate: '2017-11-15'\ndescription: React事件处理\ncategories:\n- react\n\ntags:\n\n- react\n- event \n\n---\n\n\nReact元素的事件处理和DOM元素的事件处理很相似。有下面的一些语法差异：\n\n* React事件使用驼峰命名法而不是小写字母+“-”命名法\n* 在JSX中传入函数表达式绑定事件而不是函数名称字符串\n\n例如，在HTML中：\n\n```html\n<button onclick=\"activateLasers()\">\n  Activate Lasers\n</button>\n```\n\n在React中略有不同：\n\n```js\n<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n```\n\n另一个区别是你不能返回`false`来阻止React中的默认行为。您必须显式调用事件的`preventDefault`方法。比如，在原生的HTML为了阻止默认的链接行为打开新页面，我们这么写：\n\n```html\n<a href=\"#\" onclick=\"console.log('The link was clicked.'); return false\">\n  Click me\n</a>\n```\n\n在React中，应该是：\n\n```js\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n```\n\n这里，`e`是一个合成事件。React根据[W3C规范](https://www.w3.org/TR/DOM-Level-3-Events/)定义了这些合成事件，所以你不必担心跨浏览器兼容性。请参阅[SyntheticEvent](https://reactjs.org/docs/events.html)参考指南以了解更多信息。\n\n当使用React时，通常不需要调用`addEventListener`来在创建DOM元素之后添加事件监听器。相反，只需在元素初始渲染时提供一个侦听器。\n\n当你定义一个[ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)格式的组件时，一种常见的模式是把事件处理程序作为类中的一个方法。比如，这个`Toggle`组件呈现一个按钮，让用户在“ON”和“OFF”状态之间切换:\n\n```js\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/xEmzGg?editors=0010)\n\n在JSX回调中，你必须`this`的含义。在JavaScript中类方法默认是没有边界的。如果你在没有绑定`this.handleClick`的情况下传递参数到`onClick`的话，调用该函数时`this`是`undefined`。\n\n这不是React特有行为，这是函数在js中的[运行机制](https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/)。通常如果你在引用一个方法时候方法名没有带`()`，比如`onClick={this.handleClick}`，你应该绑定该方法。\n\n如果你觉得调用`bind`方法来绑定函数麻烦，有两种解决这个问题的方法。如果你使用的是实验中的[公共类字段语法](https://babeljs.io/docs/plugins/transform-class-properties/),你可以使用类字段来正确地绑定回调：\n\n```js\nclass LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\n在[Create React App](https://github.com/facebookincubator/create-react-app)中默认启用该语法。\n\n如果你没有使用公共类字段语法，你可以在回调中使用一个[箭头函数](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)：\n\n```js\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\n这种语法的问题是当`LoggingButton`每次渲染时都要创建一个不同的回调。大多数情况下，这没问题。但是如果回调函数是作为props传递给子组件的话，这些组件可能会做额外的重新渲染。我们通常建议在构造函数中绑定或使用类字段语法，以避免这种性能问题。\n\n## 给事件处理函数传递参数\n\n在循环内部，通常需要将一个额外的参数传递给事件处理程序。比如，如果id是行ID，则以下两种都可以工作：\n\n```js\n<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n```\n\n上面两行代码是等价的，区别只是一个使用[箭头函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)一个使用[函数原型链绑定](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)。\n\n在这两种情况下,代表React事件的参数`e`会作为参数ID之后的第二个参数传递。使用箭头函数时，我们必须明确的传递`e`，但是使用`bind`时会自动转发。\n","slug":"react-event","published":1,"updated":"2018-06-20T03:05:06.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8i6001avqqjqme5yzzn","content":"<p>React元素的事件处理和DOM元素的事件处理很相似。有下面的一些语法差异：</p>\n<ul>\n<li>React事件使用驼峰命名法而不是小写字母+“-”命名法</li>\n<li>在JSX中传入函数表达式绑定事件而不是函数名称字符串</li>\n</ul>\n<p>例如，在HTML中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"activateLasers()\"</span>&gt;</span></span><br><span class=\"line\">  Activate Lasers</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在React中略有不同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class=\"line\">  Activate Lasers</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另一个区别是你不能返回<code>false</code>来阻止React中的默认行为。您必须显式调用事件的<code>preventDefault</code>方法。比如，在原生的HTML为了阻止默认的链接行为打开新页面，我们这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span></span><br><span class=\"line\">  Click me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在React中，应该是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里，<code>e</code>是一个合成事件。React根据<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\" target=\"_blank\" rel=\"noopener\">W3C规范</a>定义了这些合成事件，所以你不必担心跨浏览器兼容性。请参阅<a href=\"https://reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener\">SyntheticEvent</a>参考指南以了解更多信息。</p>\n<p>当使用React时，通常不需要调用<code>addEventListener</code>来在创建DOM元素之后添加事件监听器。相反，只需在元素初始渲染时提供一个侦听器。</p>\n<p>当你定义一个<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">ES6 class</a>格式的组件时，一种常见的模式是把事件处理程序作为类中的一个方法。比如，这个<code>Toggle</code>组件呈现一个按钮，让用户在“ON”和“OFF”状态之间切换:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toggle</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This binding is necessary to make `this` work in the callback</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      isToggleOn: !prevState.isToggleOn</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.state.isToggleOn ? <span class=\"string\">'ON'</span> : <span class=\"string\">'OFF'</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Toggle /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/xEmzGg?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在JSX回调中，你必须<code>this</code>的含义。在JavaScript中类方法默认是没有边界的。如果你在没有绑定<code>this.handleClick</code>的情况下传递参数到<code>onClick</code>的话，调用该函数时<code>this</code>是<code>undefined</code>。</p>\n<p>这不是React特有行为，这是函数在js中的<a href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\" target=\"_blank\" rel=\"noopener\">运行机制</a>。通常如果你在引用一个方法时候方法名没有带<code>()</code>，比如<code>onClick={this.handleClick}</code>，你应该绑定该方法。</p>\n<p>如果你觉得调用<code>bind</code>方法来绑定函数麻烦，有两种解决这个问题的方法。如果你使用的是实验中的<a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\" target=\"_blank\" rel=\"noopener\">公共类字段语法</a>,你可以使用类字段来正确地绑定回调：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class=\"line\">  <span class=\"comment\">// Warning: this is *experimental* syntax.</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a>中默认启用该语法。</p>\n<p>如果你没有使用公共类字段语法，你可以在回调中使用一个<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This syntax ensures `this` is bound within handleClick</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.handleClick(e)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这种语法的问题是当<code>LoggingButton</code>每次渲染时都要创建一个不同的回调。大多数情况下，这没问题。但是如果回调函数是作为props传递给子组件的话，这些组件可能会做额外的重新渲染。我们通常建议在构造函数中绑定或使用类字段语法，以避免这种性能问题。</p>\n<h2 id=\"给事件处理函数传递参数\"><a href=\"#给事件处理函数传递参数\" class=\"headerlink\" title=\"给事件处理函数传递参数\"></a>给事件处理函数传递参数</h2><p>在循环内部，通常需要将一个额外的参数传递给事件处理程序。比如，如果id是行ID，则以下两种都可以工作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n<p>上面两行代码是等价的，区别只是一个使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a>一个使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\" target=\"_blank\" rel=\"noopener\">函数原型链绑定</a>。</p>\n<p>在这两种情况下,代表React事件的参数<code>e</code>会作为参数ID之后的第二个参数传递。使用箭头函数时，我们必须明确的传递<code>e</code>，但是使用<code>bind</code>时会自动转发。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React元素的事件处理和DOM元素的事件处理很相似。有下面的一些语法差异：</p>\n<ul>\n<li>React事件使用驼峰命名法而不是小写字母+“-”命名法</li>\n<li>在JSX中传入函数表达式绑定事件而不是函数名称字符串</li>\n</ul>\n<p>例如，在HTML中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"activateLasers()\"</span>&gt;</span></span><br><span class=\"line\">  Activate Lasers</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在React中略有不同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class=\"line\">  Activate Lasers</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另一个区别是你不能返回<code>false</code>来阻止React中的默认行为。您必须显式调用事件的<code>preventDefault</code>方法。比如，在原生的HTML为了阻止默认的链接行为打开新页面，我们这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span></span><br><span class=\"line\">  Click me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在React中，应该是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里，<code>e</code>是一个合成事件。React根据<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\" target=\"_blank\" rel=\"noopener\">W3C规范</a>定义了这些合成事件，所以你不必担心跨浏览器兼容性。请参阅<a href=\"https://reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener\">SyntheticEvent</a>参考指南以了解更多信息。</p>\n<p>当使用React时，通常不需要调用<code>addEventListener</code>来在创建DOM元素之后添加事件监听器。相反，只需在元素初始渲染时提供一个侦听器。</p>\n<p>当你定义一个<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">ES6 class</a>格式的组件时，一种常见的模式是把事件处理程序作为类中的一个方法。比如，这个<code>Toggle</code>组件呈现一个按钮，让用户在“ON”和“OFF”状态之间切换:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toggle</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This binding is necessary to make `this` work in the callback</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      isToggleOn: !prevState.isToggleOn</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.state.isToggleOn ? <span class=\"string\">'ON'</span> : <span class=\"string\">'OFF'</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Toggle /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/xEmzGg?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在JSX回调中，你必须<code>this</code>的含义。在JavaScript中类方法默认是没有边界的。如果你在没有绑定<code>this.handleClick</code>的情况下传递参数到<code>onClick</code>的话，调用该函数时<code>this</code>是<code>undefined</code>。</p>\n<p>这不是React特有行为，这是函数在js中的<a href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\" target=\"_blank\" rel=\"noopener\">运行机制</a>。通常如果你在引用一个方法时候方法名没有带<code>()</code>，比如<code>onClick={this.handleClick}</code>，你应该绑定该方法。</p>\n<p>如果你觉得调用<code>bind</code>方法来绑定函数麻烦，有两种解决这个问题的方法。如果你使用的是实验中的<a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\" target=\"_blank\" rel=\"noopener\">公共类字段语法</a>,你可以使用类字段来正确地绑定回调：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class=\"line\">  <span class=\"comment\">// Warning: this is *experimental* syntax.</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a>中默认启用该语法。</p>\n<p>如果你没有使用公共类字段语法，你可以在回调中使用一个<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This syntax ensures `this` is bound within handleClick</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.handleClick(e)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这种语法的问题是当<code>LoggingButton</code>每次渲染时都要创建一个不同的回调。大多数情况下，这没问题。但是如果回调函数是作为props传递给子组件的话，这些组件可能会做额外的重新渲染。我们通常建议在构造函数中绑定或使用类字段语法，以避免这种性能问题。</p>\n<h2 id=\"给事件处理函数传递参数\"><a href=\"#给事件处理函数传递参数\" class=\"headerlink\" title=\"给事件处理函数传递参数\"></a>给事件处理函数传递参数</h2><p>在循环内部，通常需要将一个额外的参数传递给事件处理程序。比如，如果id是行ID，则以下两种都可以工作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n<p>上面两行代码是等价的，区别只是一个使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a>一个使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\" target=\"_blank\" rel=\"noopener\">函数原型链绑定</a>。</p>\n<p>在这两种情况下,代表React事件的参数<code>e</code>会作为参数ID之后的第二个参数传递。使用箭头函数时，我们必须明确的传递<code>e</code>，但是使用<code>bind</code>时会自动转发。</p>\n"},{"title":"react-list-keys","date":"2017-11-15T00:00:00.000Z","description":"列表和键","_content":"\n首先，让我们回顾一下如何在JavaScript中转换列表。\n\n下面的代码，我们使用`map()`函数获取一个`numbers`数组并将其值加倍。我们把`map()`返回的新数组指向变量`doubled`并log输出它：\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n```\n\n代码日志的输出`[2, 4, 6, 8, 10]`到控制台。\n\n在React中，将元素数组转换为元素列表和上面几乎是相同的。\n\n## 渲染多个组件\n\n你可以构建元素的集合，在JSX中使用大括号{}括起来使用。\n\n下面的代码中我们用`map()`函数遍历`number`数组，每一个数字返回一个`<li/>`元素。最终，我们把生成的元素数组指向变量`listItems`:\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n```\n\n我们把整个`listItems`元素数组放入一个`<ul>`元素中，把他渲染到DOM中：\n\n```js\nReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n```\n\n上面代码显示1到5之间的数字的项目符号列表。\n\n## 基本列表组件\n\n通常你会在一个组件内渲染列表。\n\n我们可以将前面的例子重构成一个接受一个数组数组并输出一个无序列表的元素。\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n当你运行这个代码时，会给你一个警告，让你的列表中的元素提供一个`key`。“key”是创建元素列表时需要包含的特殊字符串属性。我们将在下一节讨论为什么它很重要。\n\n让我们给`numbers.map()`里面的列表项分配一个键，并修复缺少的关键问题。\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/jrXYRR?editors=0011)\n\n## 键\n\n键可帮助React识别哪些项目已更改，添加或删除。数组中的元素需要一个键来给这些元素一个稳定的标识：\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n```\n\n选择关键字的最好方法是使用一个字符串来唯一标识来区分其兄弟元素。大多数情况下，您可以使用数据中的ID作为关键字：\n\n```js\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\n如果你要渲染的元素列表没有明确的ID，你可以使用列表项元素的索引作为键：\n\n```js\nconst todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n```\n\n如果项目可以重新排序，我们不建议使用索引索引，因为这会很慢。如果您有兴趣，您可以阅读[“深入解释为什么键是必要的”](https://reactjs.org/docs/reconciliation.html#recursing-on-children)。\n\n## 用键提取组件\n\n键只有在数组上下文中才有意义。\n\n比如，如果你抽取一个`ListItem`组件，应该在数组的`<ListItem />`元素上维护键，而不是在`<ListItem />`元素自身的`<li>`元素上维护键。\n\n错误使用键示例：\n\n```js\nfunction ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n正确使用键示例：\n\n```js\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()}\n              value={number} />\n\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ZXeOGM?editors=0010)\n\n一个好的经验法则是`map()`调用中的元素需要键。\n\n## 键在列表中必须是唯一的\n\n一个元素的键在元素数组中必须是唯一的。但是在全局范围不需要保证唯一性。当我们生成两个不同的数组时，我们可以使用相同的键：\n\n```js\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/NRZYGN?editors=0010)\n\n键可以作为React的提示，但不会传递给组件。如果您的组件中需要相同的值，请将其明确传递为具有不同名称的属性：\n\n```js\nconst content = posts.map((post) =>\n  <Post\n    key={post.id}\n    id={post.id}\n    title={post.title} />\n);\n```\n\n上面的例子中，`Post`组件可以读取`props.id`而不能读取`props.key`。\n\n## 在JSX中嵌入`map()`\n\n在上面的例子中我们声明了一个`listItems`变量,并在JSX中使用：\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}\n              value={number} />\n\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\nJSX允许在大括号中嵌入任何表达式，所以我们可以内联`map()`返回值：\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n\n      )}\n    </ul>\n  );\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/BLvYrB?editors=0010)\n","source":"_posts/react-list-keys.md","raw":"---\ntitle: react-list-keys\ndate: '2017-11-15'\ndescription: 列表和键\ncategories: \n- react\n\ntags:\n\n- react\n- list\n- keys\n\n---\n\n首先，让我们回顾一下如何在JavaScript中转换列表。\n\n下面的代码，我们使用`map()`函数获取一个`numbers`数组并将其值加倍。我们把`map()`返回的新数组指向变量`doubled`并log输出它：\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n```\n\n代码日志的输出`[2, 4, 6, 8, 10]`到控制台。\n\n在React中，将元素数组转换为元素列表和上面几乎是相同的。\n\n## 渲染多个组件\n\n你可以构建元素的集合，在JSX中使用大括号{}括起来使用。\n\n下面的代码中我们用`map()`函数遍历`number`数组，每一个数字返回一个`<li/>`元素。最终，我们把生成的元素数组指向变量`listItems`:\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n```\n\n我们把整个`listItems`元素数组放入一个`<ul>`元素中，把他渲染到DOM中：\n\n```js\nReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n```\n\n上面代码显示1到5之间的数字的项目符号列表。\n\n## 基本列表组件\n\n通常你会在一个组件内渲染列表。\n\n我们可以将前面的例子重构成一个接受一个数组数组并输出一个无序列表的元素。\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n当你运行这个代码时，会给你一个警告，让你的列表中的元素提供一个`key`。“key”是创建元素列表时需要包含的特殊字符串属性。我们将在下一节讨论为什么它很重要。\n\n让我们给`numbers.map()`里面的列表项分配一个键，并修复缺少的关键问题。\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/jrXYRR?editors=0011)\n\n## 键\n\n键可帮助React识别哪些项目已更改，添加或删除。数组中的元素需要一个键来给这些元素一个稳定的标识：\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n```\n\n选择关键字的最好方法是使用一个字符串来唯一标识来区分其兄弟元素。大多数情况下，您可以使用数据中的ID作为关键字：\n\n```js\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\n如果你要渲染的元素列表没有明确的ID，你可以使用列表项元素的索引作为键：\n\n```js\nconst todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n```\n\n如果项目可以重新排序，我们不建议使用索引索引，因为这会很慢。如果您有兴趣，您可以阅读[“深入解释为什么键是必要的”](https://reactjs.org/docs/reconciliation.html#recursing-on-children)。\n\n## 用键提取组件\n\n键只有在数组上下文中才有意义。\n\n比如，如果你抽取一个`ListItem`组件，应该在数组的`<ListItem />`元素上维护键，而不是在`<ListItem />`元素自身的`<li>`元素上维护键。\n\n错误使用键示例：\n\n```js\nfunction ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n正确使用键示例：\n\n```js\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()}\n              value={number} />\n\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/ZXeOGM?editors=0010)\n\n一个好的经验法则是`map()`调用中的元素需要键。\n\n## 键在列表中必须是唯一的\n\n一个元素的键在元素数组中必须是唯一的。但是在全局范围不需要保证唯一性。当我们生成两个不同的数组时，我们可以使用相同的键：\n\n```js\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n```\n\n[demo](https://codepen.io/gaearon/pen/NRZYGN?editors=0010)\n\n键可以作为React的提示，但不会传递给组件。如果您的组件中需要相同的值，请将其明确传递为具有不同名称的属性：\n\n```js\nconst content = posts.map((post) =>\n  <Post\n    key={post.id}\n    id={post.id}\n    title={post.title} />\n);\n```\n\n上面的例子中，`Post`组件可以读取`props.id`而不能读取`props.key`。\n\n## 在JSX中嵌入`map()`\n\n在上面的例子中我们声明了一个`listItems`变量,并在JSX中使用：\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}\n              value={number} />\n\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\nJSX允许在大括号中嵌入任何表达式，所以我们可以内联`map()`返回值：\n\n```js\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n\n      )}\n    </ul>\n  );\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/BLvYrB?editors=0010)\n","slug":"react-list-keys","published":1,"updated":"2018-06-20T03:06:10.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8i8001dvqqjgjh1vtkj","content":"<p>首先，让我们回顾一下如何在JavaScript中转换列表。</p>\n<p>下面的代码，我们使用<code>map()</code>函数获取一个<code>numbers</code>数组并将其值加倍。我们把<code>map()</code>返回的新数组指向变量<code>doubled</code>并log输出它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubled = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> number * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(doubled);</span><br></pre></td></tr></table></figure>\n<p>代码日志的输出<code>[2, 4, 6, 8, 10]</code>到控制台。</p>\n<p>在React中，将元素数组转换为元素列表和上面几乎是相同的。</p>\n<h2 id=\"渲染多个组件\"><a href=\"#渲染多个组件\" class=\"headerlink\" title=\"渲染多个组件\"></a>渲染多个组件</h2><p>你可以构建元素的集合，在JSX中使用大括号{}括起来使用。</p>\n<p>下面的代码中我们用<code>map()</code>函数遍历<code>number</code>数组，每一个数字返回一个<code>&lt;li/&gt;</code>元素。最终，我们把生成的元素数组指向变量<code>listItems</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>我们把整个<code>listItems</code>元素数组放入一个<code>&lt;ul&gt;</code>元素中，把他渲染到DOM中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;ul&gt;&#123;listItems&#125;&lt;<span class=\"regexp\">/ul&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>上面代码显示1到5之间的数字的项目符号列表。</p>\n<h2 id=\"基本列表组件\"><a href=\"#基本列表组件\" class=\"headerlink\" title=\"基本列表组件\"></a>基本列表组件</h2><p>通常你会在一个组件内渲染列表。</p>\n<p>我们可以将前面的例子重构成一个接受一个数组数组并输出一个无序列表的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当你运行这个代码时，会给你一个警告，让你的列表中的元素提供一个<code>key</code>。“key”是创建元素列表时需要包含的特殊字符串属性。我们将在下一节讨论为什么它很重要。</p>\n<p>让我们给<code>numbers.map()</code>里面的列表项分配一个键，并修复缺少的关键问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;number&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h2><p>键可帮助React识别哪些项目已更改，添加或删除。数组中的元素需要一个键来给这些元素一个稳定的标识：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">    &#123;number&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>选择关键字的最好方法是使用一个字符串来唯一标识来区分其兄弟元素。大多数情况下，您可以使用数据中的ID作为关键字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;todo.id&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果你要渲染的元素列表没有明确的ID，你可以使用列表项元素的索引作为键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// Only do this if items have no stable IDs</span></span><br><span class=\"line\">  &lt;li key=&#123;index&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果项目可以重新排序，我们不建议使用索引索引，因为这会很慢。如果您有兴趣，您可以阅读<a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\" target=\"_blank\" rel=\"noopener\">“深入解释为什么键是必要的”</a>。</p>\n<h2 id=\"用键提取组件\"><a href=\"#用键提取组件\" class=\"headerlink\" title=\"用键提取组件\"></a>用键提取组件</h2><p>键只有在数组上下文中才有意义。</p>\n<p>比如，如果你抽取一个<code>ListItem</code>组件，应该在数组的<code>&lt;ListItem /&gt;</code>元素上维护键，而不是在<code>&lt;ListItem /&gt;</code>元素自身的<code>&lt;li&gt;</code>元素上维护键。</p>\n<p>错误使用键示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = props.value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// Wrong! There is no need to specify the key here:</span></span><br><span class=\"line\">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;value&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function NumberList(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const numbers = props.numbers;</span></span><br><span class=\"line\"><span class=\"regexp\">  const listItems = numbers.map((number) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Wrong! The key should have been specified here:</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>正确使用键示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Correct! There is no need to specify the key here:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// Correct! Key should be specified inside the array.</span></span><br><span class=\"line\">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">              value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>一个好的经验法则是<code>map()</code>调用中的元素需要键。</p>\n<h2 id=\"键在列表中必须是唯一的\"><a href=\"#键在列表中必须是唯一的\" class=\"headerlink\" title=\"键在列表中必须是唯一的\"></a>键在列表中必须是唯一的</h2><p>一个元素的键在元素数组中必须是唯一的。但是在全局范围不需要保证唯一性。当我们生成两个不同的数组时，我们可以使用相同的键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Blog</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sidebar = (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;props.posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">        &lt;li key=&#123;post.id&#125;&gt;</span><br><span class=\"line\">          &#123;post.title&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = props.posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">    &lt;div key=&#123;post.id&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;&#123;post.title&#125;&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123;post.content&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;sidebar&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;hr /</span>&gt;</span><br><span class=\"line\">      &#123;content&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const posts = [</span></span><br><span class=\"line\"><span class=\"regexp\">  &#123;id: 1, title: 'Hello World', content: 'Welcome to learning React!'&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  &#123;id: 2, title: 'Installation', content: 'You can install React from npm.'&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Blog posts=&#123;posts&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>键可以作为React的提示，但不会传递给组件。如果您的组件中需要相同的值，请将其明确传递为具有不同名称的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> content = posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">  &lt;Post</span><br><span class=\"line\">    key=&#123;post.id&#125;</span><br><span class=\"line\">    id=&#123;post.id&#125;</span><br><span class=\"line\">    title=&#123;post.title&#125; /&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>Post</code>组件可以读取<code>props.id</code>而不能读取<code>props.key</code>。</p>\n<h2 id=\"在JSX中嵌入map\"><a href=\"#在JSX中嵌入map\" class=\"headerlink\" title=\"在JSX中嵌入map()\"></a>在JSX中嵌入<code>map()</code></h2><p>在上面的例子中我们声明了一个<code>listItems</code>变量,并在JSX中使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">              value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>JSX允许在大括号中嵌入任何表达式，所以我们可以内联<code>map()</code>返回值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">                  value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，让我们回顾一下如何在JavaScript中转换列表。</p>\n<p>下面的代码，我们使用<code>map()</code>函数获取一个<code>numbers</code>数组并将其值加倍。我们把<code>map()</code>返回的新数组指向变量<code>doubled</code>并log输出它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubled = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> number * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(doubled);</span><br></pre></td></tr></table></figure>\n<p>代码日志的输出<code>[2, 4, 6, 8, 10]</code>到控制台。</p>\n<p>在React中，将元素数组转换为元素列表和上面几乎是相同的。</p>\n<h2 id=\"渲染多个组件\"><a href=\"#渲染多个组件\" class=\"headerlink\" title=\"渲染多个组件\"></a>渲染多个组件</h2><p>你可以构建元素的集合，在JSX中使用大括号{}括起来使用。</p>\n<p>下面的代码中我们用<code>map()</code>函数遍历<code>number</code>数组，每一个数字返回一个<code>&lt;li/&gt;</code>元素。最终，我们把生成的元素数组指向变量<code>listItems</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>我们把整个<code>listItems</code>元素数组放入一个<code>&lt;ul&gt;</code>元素中，把他渲染到DOM中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;ul&gt;&#123;listItems&#125;&lt;<span class=\"regexp\">/ul&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>上面代码显示1到5之间的数字的项目符号列表。</p>\n<h2 id=\"基本列表组件\"><a href=\"#基本列表组件\" class=\"headerlink\" title=\"基本列表组件\"></a>基本列表组件</h2><p>通常你会在一个组件内渲染列表。</p>\n<p>我们可以将前面的例子重构成一个接受一个数组数组并输出一个无序列表的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当你运行这个代码时，会给你一个警告，让你的列表中的元素提供一个<code>key</code>。“key”是创建元素列表时需要包含的特殊字符串属性。我们将在下一节讨论为什么它很重要。</p>\n<p>让我们给<code>numbers.map()</code>里面的列表项分配一个键，并修复缺少的关键问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;number&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h2><p>键可帮助React识别哪些项目已更改，添加或删除。数组中的元素需要一个键来给这些元素一个稳定的标识：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">    &#123;number&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>选择关键字的最好方法是使用一个字符串来唯一标识来区分其兄弟元素。大多数情况下，您可以使用数据中的ID作为关键字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;todo.id&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果你要渲染的元素列表没有明确的ID，你可以使用列表项元素的索引作为键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// Only do this if items have no stable IDs</span></span><br><span class=\"line\">  &lt;li key=&#123;index&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>如果项目可以重新排序，我们不建议使用索引索引，因为这会很慢。如果您有兴趣，您可以阅读<a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\" target=\"_blank\" rel=\"noopener\">“深入解释为什么键是必要的”</a>。</p>\n<h2 id=\"用键提取组件\"><a href=\"#用键提取组件\" class=\"headerlink\" title=\"用键提取组件\"></a>用键提取组件</h2><p>键只有在数组上下文中才有意义。</p>\n<p>比如，如果你抽取一个<code>ListItem</code>组件，应该在数组的<code>&lt;ListItem /&gt;</code>元素上维护键，而不是在<code>&lt;ListItem /&gt;</code>元素自身的<code>&lt;li&gt;</code>元素上维护键。</p>\n<p>错误使用键示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = props.value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// Wrong! There is no need to specify the key here:</span></span><br><span class=\"line\">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;value&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function NumberList(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const numbers = props.numbers;</span></span><br><span class=\"line\"><span class=\"regexp\">  const listItems = numbers.map((number) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Wrong! The key should have been specified here:</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>正确使用键示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Correct! There is no need to specify the key here:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// Correct! Key should be specified inside the array.</span></span><br><span class=\"line\">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">              value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>一个好的经验法则是<code>map()</code>调用中的元素需要键。</p>\n<h2 id=\"键在列表中必须是唯一的\"><a href=\"#键在列表中必须是唯一的\" class=\"headerlink\" title=\"键在列表中必须是唯一的\"></a>键在列表中必须是唯一的</h2><p>一个元素的键在元素数组中必须是唯一的。但是在全局范围不需要保证唯一性。当我们生成两个不同的数组时，我们可以使用相同的键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Blog</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sidebar = (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;props.posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">        &lt;li key=&#123;post.id&#125;&gt;</span><br><span class=\"line\">          &#123;post.title&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = props.posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">    &lt;div key=&#123;post.id&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;&#123;post.title&#125;&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123;post.content&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;sidebar&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;hr /</span>&gt;</span><br><span class=\"line\">      &#123;content&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const posts = [</span></span><br><span class=\"line\"><span class=\"regexp\">  &#123;id: 1, title: 'Hello World', content: 'Welcome to learning React!'&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  &#123;id: 2, title: 'Installation', content: 'You can install React from npm.'&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">];</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Blog posts=&#123;posts&#125; /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>键可以作为React的提示，但不会传递给组件。如果您的组件中需要相同的值，请将其明确传递为具有不同名称的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> content = posts.map(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span></span><br><span class=\"line\">  &lt;Post</span><br><span class=\"line\">    key=&#123;post.id&#125;</span><br><span class=\"line\">    id=&#123;post.id&#125;</span><br><span class=\"line\">    title=&#123;post.title&#125; /&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>Post</code>组件可以读取<code>props.id</code>而不能读取<code>props.key</code>。</p>\n<h2 id=\"在JSX中嵌入map\"><a href=\"#在JSX中嵌入map\" class=\"headerlink\" title=\"在JSX中嵌入map()\"></a>在JSX中嵌入<code>map()</code></h2><p>在上面的例子中我们声明了一个<code>listItems</code>变量,并在JSX中使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">              value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>JSX允许在大括号中嵌入任何表达式，所以我们可以内联<code>map()</code>返回值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberList</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.numbers;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class=\"line\">                  value=&#123;number&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n"},{"title":"react-lifting-state-up","date":"2017-11-15T00:00:00.000Z","description":"提升状态","_content":"\n通常，几个组件需要反映相同的变化数据。我们建议将共享状态提升到最接近的共同祖先。让我们看看这是如何工作的。\n\n在本节中，我们将创建一个温度计算器，计算在给定温度下水是否会沸腾。\n\n我们从`BoilingVerdict`组件开始。它接受一个`celsius`温度属性，打印这个温度是否可以把把水烧开：\n\n```js\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n```\n\n接下来，我们创建一个`Calculator`组件。它渲染一个`<inpu/>`输入框让用户输入温度，并把它存储在`this.state.temperature`。\n\n另外，会渲染输入参数的`BoilingVerdict`判定结果。\n\n```js\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input\n          value={temperature}\n          onChange={this.handleChange} />\n\n        <BoilingVerdict\n          celsius={parseFloat(temperature)} />\n\n      </fieldset>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/ZXeOBm?editors=0010)\n\n## 添加第二个输入\n\n我们有一个新需求，除了摄氏温度输入外，我们需要一个华氏温度输入，他们俩保持同步。\n\n我们可以从`Calculator`组件中抽取出一个`TemperatureInput`组件。我们添加一个新的`scale`属性，值可以是`c`或者`f`：\n\n```js\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\n我们把`Calculator`渲染为两个独立的温度输入：\n\n```js\nclass Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" />\n        <TemperatureInput scale=\"f\" />\n      </div>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/jGBryx?editors=0010)\n\n我们现在有两个输入框，但是当在一个输入框输入温度的时候另一个输入框没有联动。这不符合我们的需求:两个输入框信息同步。\n\n我们也不能在`Calculator`中显示`BoilingVerdict`。因为温度存储在`Calculator`中，`Calculator`不知道当前的温度。\n\n## 编写转换函数\n\n首先，我们编写两个函数用来转换摄氏温度和华氏温度：\n\n```js\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n```\n\n这两个函数是用来转换数字类型的。我们再编写一个方法接收一个字符串温度参数和一个转换函数，返回一个字符串。我们会用这个函数根据一个输入框的温度计算另一个输入框要显示的信息。\n\n对于无效的参数返回空字符串，保持四舍五入到小数点后三位：\n\n```js\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n```\n\n不如，执行`tryConvert('abc', toCelsius)`返回空字符串，执行`tryConvert('10.22', toFahrenheit)`返回`50.396`。\n\n## 提升状态\n\n截止到目前，两个温度输入框组件在自己的state中维护温度值：\n\n```js\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    // ...  \n```\n\n然而，我们希望这两个输入框的数据是互相级联的。当我们修改摄氏温度值，华氏温度随之变化，反之亦然。\n\n在React中，共享状态是通过将需要共享的状态数据移动到相关组件的最近的共同祖先中来完成的。这就是所谓的“提升状态”。我们会把`TemperatureInput`组件的状态数据移动到`Calculator`组件中。\n\n如果`Calculator`组件拥有共享状态，则它将成为两个`TemperatureInput`组件中温度的“真实数据源”。它会让两个输入框的数据相互级联同步更新。\n由于两个`TemperatureInput`组件的属性来自相同的父组件`Calculator`，所以两个输入将始终保持同步.\n\n让我们分步看一下他的工作流程。\n\n首先，我们把`TemperatureInput`组件中的`this.state.temperature`替换为`this.props.temperature`。现在，让我们假装`this.props.temperature`已经存在，虽然我们将来需要从计算器中传递它：\n\n```js\nrender() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;\n    // ...\n```\n\n我们知道属性是不可修改的。当`temperature`属性是`TemperatureInput`组件的state中的值时，可以通过`this.setState()`来修改它。然而，现在`temperature`属性父元素通过props传递的，`TemperatureInput`组件不能操作他。\n\n在React中通常使用一个受控组件来解决。就像`<input/>`DOM元素接收`value`和`onChange`属性，`TemperatureInput`组件可以从父组件`Calculator`中获取`temperature`和`onTemperatureChange`属性。\n\n现在，当`TemperatureInput`组件要更新温度的时候，只需要调用`this.props.onTemperatureChange`：\n\n```js\nhandleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n    // ...\n```\n\n> 注意：\n> 在自定义组件中不论是`temperature`属性还是`onTemperatureChange`属性都没有特殊涵义。我们可以随意命名，比如把常见约定是把它们命名为value和onChange。\n\n`temperature`和`onTemperatureChange`由父组件一起提供。它将通过修改自己的本地状态来处理数据变更，从而使用新值重新渲染两个输入框。在深入修改`Calculator`组件之前，让我们总结一下对`TemperatureInput`组件的变更。我们把`temperature`从他自身状态移除，通过props获取。调用`Calculator`提供的`this.props.onTemperatureChange()`替代`this.setState()`来改变状态：\n\n```js\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\n现在让我们来处理下`Calculator`组件。\n\n我们把输入的`temperature`和`scale`存储在组件的state中。这是从子组件提升上来的状态，讲作为两个输入框的真实数据源。这是为了渲染两个输入框需要准备的最小化数据。\n\n比如，我们输入37到摄氏温度输入框中，`Calculator`组件的状态是：\n\n```js\n{\n  temperature: '37',\n  scale: 'c'\n}\n```\n\n如果我们把华氏温度修改为212，`Calculator`组件的状态变为：\n\n```js\n{\n  temperature: '212',\n  scale: 'f'\n}\n```\n\n我们可以存储这两个输入的值，但事实证明是不必要的。我们只需要存储最近的温度值和他的单位就可以了。我们可以根据温度值和单位计算出另一个单位的温度值。\n\n由于输入框的值是根据同一个状态值计算出来的所以两个输入框会保持同步：\n\n```js\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n\n      </div>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/WZpxpz?editors=0010)\n\n现在不论哪一个输入框变更，`Calculator`组件的`this.state.temperature`和`this.state.scale`都会更新。其中一个输入框按原样得到值，所以任何用户输入都被保留，而另一个输入值总是基于它重新计算。\n\n我们总结一下当修改输入框内容的时候发生了什么：\n\n* React调用DOM元素`<input />`的`onChange`事件绑定的函数。在这里是调用`TemperatureInput`组件的`handleChange`方法。\n* `handleChange`方法调用`TemperatureInput`组件的`this.props.onTemperatureChange()`方法处理期望值。他的属性包括`onTemperatureChange`都有父组件`Calculator`提供。\n* 如果`Calculator`组件之前的渲染指定了`onTemperatureChange`使用摄氏温度输入框的处理函数`handleCelsiusChange`。根据我们修改的输入框类型来调用不同的函数来同步数据。\n* 在这些方法里，`Calculator`组件调用`this.setState()`来根据我们的输入重绘。\n* React调用`Calculator`组件的`render`方法告诉UI要显示成什么样。两个输入框的信息根据最后的输入和温度类型计算得来。温度转换在这一步执行。\n* React调用每个由父组件`Calculator`更新过属性的`TemperatureInput`组件的`render`方法。告诉他们渲染成什么样子。\n* React把DOM渲染为期望的样子。我们编辑的输入框显示输入的值，另一个输入框显示转换之后的值。\n\n每个更新都经过相同的步骤，使输入保持同步。\n\n## 总结\n\n对于在React应用程序中的动态数据，应该只有一个“数据源”。通常，状态是最先加入到组件中并且重绘是需要用到的数据。然后，如果其他组件也需要它，这时需要把这个状态提升到这些组件公共的祖先中。你应该遵循[单向数据流](https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down)原则来保持组件的状态同步，而不是在不同组件之间互相同步状态。\n\n提升状态涉及到比双向数据绑定更多的模板代码，但是好处是，花费更少的工作找到和隔离错误。由于任何状态“存在”某个组件中，而且这个组件本身就可以改变它，所以错误的范围大大减小。此外，你可以实现任何自定义逻辑来拒绝或转换用户输入。\n\n如果一些信息可以从属性或状态中推导出来，它可能不应该在状态中。比如，我们可以通过最后编辑的`temperature`值和他的`scale`值来推导出`celsiusValue`和`fahrenheitValue`。一个输入框总是可以根据另一个输入框的值在`render()`方法中计算出来。这可以让我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。\n\n当UI出现错误时，可以使用[React Developer Tools](https://github.com/facebook/react-devtools)进行排错，可以跟踪数据的流转：\n\n![demo](https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be.gif)\n","source":"_posts/react-lifting-state-up.md","raw":"---\ntitle: react-lifting-state-up\ndate: '2017-11-15'\ndescription: 提升状态\ncategories:\n- react\ntags:\n- react\n- state\n---\n\n通常，几个组件需要反映相同的变化数据。我们建议将共享状态提升到最接近的共同祖先。让我们看看这是如何工作的。\n\n在本节中，我们将创建一个温度计算器，计算在给定温度下水是否会沸腾。\n\n我们从`BoilingVerdict`组件开始。它接受一个`celsius`温度属性，打印这个温度是否可以把把水烧开：\n\n```js\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n```\n\n接下来，我们创建一个`Calculator`组件。它渲染一个`<inpu/>`输入框让用户输入温度，并把它存储在`this.state.temperature`。\n\n另外，会渲染输入参数的`BoilingVerdict`判定结果。\n\n```js\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input\n          value={temperature}\n          onChange={this.handleChange} />\n\n        <BoilingVerdict\n          celsius={parseFloat(temperature)} />\n\n      </fieldset>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/ZXeOBm?editors=0010)\n\n## 添加第二个输入\n\n我们有一个新需求，除了摄氏温度输入外，我们需要一个华氏温度输入，他们俩保持同步。\n\n我们可以从`Calculator`组件中抽取出一个`TemperatureInput`组件。我们添加一个新的`scale`属性，值可以是`c`或者`f`：\n\n```js\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\n我们把`Calculator`渲染为两个独立的温度输入：\n\n```js\nclass Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" />\n        <TemperatureInput scale=\"f\" />\n      </div>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/jGBryx?editors=0010)\n\n我们现在有两个输入框，但是当在一个输入框输入温度的时候另一个输入框没有联动。这不符合我们的需求:两个输入框信息同步。\n\n我们也不能在`Calculator`中显示`BoilingVerdict`。因为温度存储在`Calculator`中，`Calculator`不知道当前的温度。\n\n## 编写转换函数\n\n首先，我们编写两个函数用来转换摄氏温度和华氏温度：\n\n```js\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n```\n\n这两个函数是用来转换数字类型的。我们再编写一个方法接收一个字符串温度参数和一个转换函数，返回一个字符串。我们会用这个函数根据一个输入框的温度计算另一个输入框要显示的信息。\n\n对于无效的参数返回空字符串，保持四舍五入到小数点后三位：\n\n```js\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n```\n\n不如，执行`tryConvert('abc', toCelsius)`返回空字符串，执行`tryConvert('10.22', toFahrenheit)`返回`50.396`。\n\n## 提升状态\n\n截止到目前，两个温度输入框组件在自己的state中维护温度值：\n\n```js\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    // ...  \n```\n\n然而，我们希望这两个输入框的数据是互相级联的。当我们修改摄氏温度值，华氏温度随之变化，反之亦然。\n\n在React中，共享状态是通过将需要共享的状态数据移动到相关组件的最近的共同祖先中来完成的。这就是所谓的“提升状态”。我们会把`TemperatureInput`组件的状态数据移动到`Calculator`组件中。\n\n如果`Calculator`组件拥有共享状态，则它将成为两个`TemperatureInput`组件中温度的“真实数据源”。它会让两个输入框的数据相互级联同步更新。\n由于两个`TemperatureInput`组件的属性来自相同的父组件`Calculator`，所以两个输入将始终保持同步.\n\n让我们分步看一下他的工作流程。\n\n首先，我们把`TemperatureInput`组件中的`this.state.temperature`替换为`this.props.temperature`。现在，让我们假装`this.props.temperature`已经存在，虽然我们将来需要从计算器中传递它：\n\n```js\nrender() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;\n    // ...\n```\n\n我们知道属性是不可修改的。当`temperature`属性是`TemperatureInput`组件的state中的值时，可以通过`this.setState()`来修改它。然而，现在`temperature`属性父元素通过props传递的，`TemperatureInput`组件不能操作他。\n\n在React中通常使用一个受控组件来解决。就像`<input/>`DOM元素接收`value`和`onChange`属性，`TemperatureInput`组件可以从父组件`Calculator`中获取`temperature`和`onTemperatureChange`属性。\n\n现在，当`TemperatureInput`组件要更新温度的时候，只需要调用`this.props.onTemperatureChange`：\n\n```js\nhandleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n    // ...\n```\n\n> 注意：\n> 在自定义组件中不论是`temperature`属性还是`onTemperatureChange`属性都没有特殊涵义。我们可以随意命名，比如把常见约定是把它们命名为value和onChange。\n\n`temperature`和`onTemperatureChange`由父组件一起提供。它将通过修改自己的本地状态来处理数据变更，从而使用新值重新渲染两个输入框。在深入修改`Calculator`组件之前，让我们总结一下对`TemperatureInput`组件的变更。我们把`temperature`从他自身状态移除，通过props获取。调用`Calculator`提供的`this.props.onTemperatureChange()`替代`this.setState()`来改变状态：\n\n```js\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\n现在让我们来处理下`Calculator`组件。\n\n我们把输入的`temperature`和`scale`存储在组件的state中。这是从子组件提升上来的状态，讲作为两个输入框的真实数据源。这是为了渲染两个输入框需要准备的最小化数据。\n\n比如，我们输入37到摄氏温度输入框中，`Calculator`组件的状态是：\n\n```js\n{\n  temperature: '37',\n  scale: 'c'\n}\n```\n\n如果我们把华氏温度修改为212，`Calculator`组件的状态变为：\n\n```js\n{\n  temperature: '212',\n  scale: 'f'\n}\n```\n\n我们可以存储这两个输入的值，但事实证明是不必要的。我们只需要存储最近的温度值和他的单位就可以了。我们可以根据温度值和单位计算出另一个单位的温度值。\n\n由于输入框的值是根据同一个状态值计算出来的所以两个输入框会保持同步：\n\n```js\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n\n      </div>\n    );\n  }\n}\n```\n\n[demo](https://codepen.io/gaearon/pen/WZpxpz?editors=0010)\n\n现在不论哪一个输入框变更，`Calculator`组件的`this.state.temperature`和`this.state.scale`都会更新。其中一个输入框按原样得到值，所以任何用户输入都被保留，而另一个输入值总是基于它重新计算。\n\n我们总结一下当修改输入框内容的时候发生了什么：\n\n* React调用DOM元素`<input />`的`onChange`事件绑定的函数。在这里是调用`TemperatureInput`组件的`handleChange`方法。\n* `handleChange`方法调用`TemperatureInput`组件的`this.props.onTemperatureChange()`方法处理期望值。他的属性包括`onTemperatureChange`都有父组件`Calculator`提供。\n* 如果`Calculator`组件之前的渲染指定了`onTemperatureChange`使用摄氏温度输入框的处理函数`handleCelsiusChange`。根据我们修改的输入框类型来调用不同的函数来同步数据。\n* 在这些方法里，`Calculator`组件调用`this.setState()`来根据我们的输入重绘。\n* React调用`Calculator`组件的`render`方法告诉UI要显示成什么样。两个输入框的信息根据最后的输入和温度类型计算得来。温度转换在这一步执行。\n* React调用每个由父组件`Calculator`更新过属性的`TemperatureInput`组件的`render`方法。告诉他们渲染成什么样子。\n* React把DOM渲染为期望的样子。我们编辑的输入框显示输入的值，另一个输入框显示转换之后的值。\n\n每个更新都经过相同的步骤，使输入保持同步。\n\n## 总结\n\n对于在React应用程序中的动态数据，应该只有一个“数据源”。通常，状态是最先加入到组件中并且重绘是需要用到的数据。然后，如果其他组件也需要它，这时需要把这个状态提升到这些组件公共的祖先中。你应该遵循[单向数据流](https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down)原则来保持组件的状态同步，而不是在不同组件之间互相同步状态。\n\n提升状态涉及到比双向数据绑定更多的模板代码，但是好处是，花费更少的工作找到和隔离错误。由于任何状态“存在”某个组件中，而且这个组件本身就可以改变它，所以错误的范围大大减小。此外，你可以实现任何自定义逻辑来拒绝或转换用户输入。\n\n如果一些信息可以从属性或状态中推导出来，它可能不应该在状态中。比如，我们可以通过最后编辑的`temperature`值和他的`scale`值来推导出`celsiusValue`和`fahrenheitValue`。一个输入框总是可以根据另一个输入框的值在`render()`方法中计算出来。这可以让我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。\n\n当UI出现错误时，可以使用[React Developer Tools](https://github.com/facebook/react-devtools)进行排错，可以跟踪数据的流转：\n\n![demo](https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be.gif)\n","slug":"react-lifting-state-up","published":1,"updated":"2018-06-20T03:13:47.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ia001hvqqjbcyzprnx","content":"<p>通常，几个组件需要反映相同的变化数据。我们建议将共享状态提升到最接近的共同祖先。让我们看看这是如何工作的。</p>\n<p>在本节中，我们将创建一个温度计算器，计算在给定温度下水是否会沸腾。</p>\n<p>我们从<code>BoilingVerdict</code>组件开始。它接受一个<code>celsius</code>温度属性，打印这个温度是否可以把把水烧开：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BoilingVerdict</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props.celsius &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would not boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们创建一个<code>Calculator</code>组件。它渲染一个<code>&lt;inpu/&gt;</code>输入框让用户输入温度，并把它存储在<code>this.state.temperature</code>。</p>\n<p>另外，会渲染输入参数的<code>BoilingVerdict</code>判定结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> Celsius:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          value=&#123;temperature&#125;</span><br><span class=\"line\">          onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;BoilingVerdict</span><br><span class=\"line\">          celsius=&#123;<span class=\"built_in\">parseFloat</span>(temperature)&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"添加第二个输入\"><a href=\"#添加第二个输入\" class=\"headerlink\" title=\"添加第二个输入\"></a>添加第二个输入</h2><p>我们有一个新需求，除了摄氏温度输入外，我们需要一个华氏温度输入，他们俩保持同步。</p>\n<p>我们可以从<code>Calculator</code>组件中抽取出一个<code>TemperatureInput</code>组件。我们添加一个新的<code>scale</code>属性，值可以是<code>c</code>或者<code>f</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scaleNames = &#123;</span><br><span class=\"line\">  c: <span class=\"string\">'Celsius'</span>,</span><br><span class=\"line\">  f: <span class=\"string\">'Fahrenheit'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> &#123;scaleNames[scale]&#125;:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input value=&#123;temperature&#125;</span><br><span class=\"line\">               onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们把<code>Calculator</code>渲染为两个独立的温度输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TemperatureInput scale=<span class=\"string\">\"c\"</span> /&gt;</span><br><span class=\"line\">        &lt;TemperatureInput scale=<span class=\"string\">\"f\"</span> /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>我们现在有两个输入框，但是当在一个输入框输入温度的时候另一个输入框没有联动。这不符合我们的需求:两个输入框信息同步。</p>\n<p>我们也不能在<code>Calculator</code>中显示<code>BoilingVerdict</code>。因为温度存储在<code>Calculator</code>中，<code>Calculator</code>不知道当前的温度。</p>\n<h2 id=\"编写转换函数\"><a href=\"#编写转换函数\" class=\"headerlink\" title=\"编写转换函数\"></a>编写转换函数</h2><p>首先，我们编写两个函数用来转换摄氏温度和华氏温度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toCelsius</span>(<span class=\"params\">fahrenheit</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFahrenheit</span>(<span class=\"params\">celsius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个函数是用来转换数字类型的。我们再编写一个方法接收一个字符串温度参数和一个转换函数，返回一个字符串。我们会用这个函数根据一个输入框的温度计算另一个输入框要显示的信息。</p>\n<p>对于无效的参数返回空字符串，保持四舍五入到小数点后三位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryConvert</span>(<span class=\"params\">temperature, convert</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> input = <span class=\"built_in\">parseFloat</span>(temperature);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(input)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = convert(input);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rounded = <span class=\"built_in\">Math</span>.round(output * <span class=\"number\">1000</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rounded.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不如，执行<code>tryConvert(&#39;abc&#39;, toCelsius)</code>返回空字符串，执行<code>tryConvert(&#39;10.22&#39;, toFahrenheit)</code>返回<code>50.396</code>。</p>\n<h2 id=\"提升状态\"><a href=\"#提升状态\" class=\"headerlink\" title=\"提升状态\"></a>提升状态</h2><p>截止到目前，两个温度输入框组件在自己的state中维护温度值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>然而，我们希望这两个输入框的数据是互相级联的。当我们修改摄氏温度值，华氏温度随之变化，反之亦然。</p>\n<p>在React中，共享状态是通过将需要共享的状态数据移动到相关组件的最近的共同祖先中来完成的。这就是所谓的“提升状态”。我们会把<code>TemperatureInput</code>组件的状态数据移动到<code>Calculator</code>组件中。</p>\n<p>如果<code>Calculator</code>组件拥有共享状态，则它将成为两个<code>TemperatureInput</code>组件中温度的“真实数据源”。它会让两个输入框的数据相互级联同步更新。<br>由于两个<code>TemperatureInput</code>组件的属性来自相同的父组件<code>Calculator</code>，所以两个输入将始终保持同步.</p>\n<p>让我们分步看一下他的工作流程。</p>\n<p>首先，我们把<code>TemperatureInput</code>组件中的<code>this.state.temperature</code>替换为<code>this.props.temperature</code>。现在，让我们假装<code>this.props.temperature</code>已经存在，虽然我们将来需要从计算器中传递它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Before: const temperature = this.state.temperature;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.props.temperature;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们知道属性是不可修改的。当<code>temperature</code>属性是<code>TemperatureInput</code>组件的state中的值时，可以通过<code>this.setState()</code>来修改它。然而，现在<code>temperature</code>属性父元素通过props传递的，<code>TemperatureInput</code>组件不能操作他。</p>\n<p>在React中通常使用一个受控组件来解决。就像<code>&lt;input/&gt;</code>DOM元素接收<code>value</code>和<code>onChange</code>属性，<code>TemperatureInput</code>组件可以从父组件<code>Calculator</code>中获取<code>temperature</code>和<code>onTemperatureChange</code>属性。</p>\n<p>现在，当<code>TemperatureInput</code>组件要更新温度的时候，只需要调用<code>this.props.onTemperatureChange</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Before: this.setState(&#123;temperature: e.target.value&#125;);</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>在自定义组件中不论是<code>temperature</code>属性还是<code>onTemperatureChange</code>属性都没有特殊涵义。我们可以随意命名，比如把常见约定是把它们命名为value和onChange。</p>\n</blockquote>\n<p><code>temperature</code>和<code>onTemperatureChange</code>由父组件一起提供。它将通过修改自己的本地状态来处理数据变更，从而使用新值重新渲染两个输入框。在深入修改<code>Calculator</code>组件之前，让我们总结一下对<code>TemperatureInput</code>组件的变更。我们把<code>temperature</code>从他自身状态移除，通过props获取。调用<code>Calculator</code>提供的<code>this.props.onTemperatureChange()</code>替代<code>this.setState()</code>来改变状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.props.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> &#123;scaleNames[scale]&#125;:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input value=&#123;temperature&#125;</span><br><span class=\"line\">               onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>现在让我们来处理下<code>Calculator</code>组件。</p>\n<p>我们把输入的<code>temperature</code>和<code>scale</code>存储在组件的state中。这是从子组件提升上来的状态，讲作为两个输入框的真实数据源。这是为了渲染两个输入框需要准备的最小化数据。</p>\n<p>比如，我们输入37到摄氏温度输入框中，<code>Calculator</code>组件的状态是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  temperature: <span class=\"string\">'37'</span>,</span><br><span class=\"line\">  scale: <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们把华氏温度修改为212，<code>Calculator</code>组件的状态变为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  temperature: <span class=\"string\">'212'</span>,</span><br><span class=\"line\">  scale: <span class=\"string\">'f'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以存储这两个输入的值，但事实证明是不必要的。我们只需要存储最近的温度值和他的单位就可以了。我们可以根据温度值和单位计算出另一个单位的温度值。</p>\n<p>由于输入框的值是根据同一个状态值计算出来的所以两个输入框会保持同步：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleCelsiusChange = <span class=\"keyword\">this</span>.handleCelsiusChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleFahrenheitChange = <span class=\"keyword\">this</span>.handleFahrenheitChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>, <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleCelsiusChange(temperature) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>, temperature&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleFahrenheitChange(temperature) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">scale</span>: <span class=\"string\">'f'</span>, temperature&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.state.scale;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> celsius = scale === <span class=\"string\">'f'</span> ? tryConvert(temperature, toCelsius) : temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fahrenheit = scale === <span class=\"string\">'c'</span> ? tryConvert(temperature, toFahrenheit) : temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TemperatureInput</span><br><span class=\"line\">          scale=<span class=\"string\">\"c\"</span></span><br><span class=\"line\">          temperature=&#123;celsius&#125;</span><br><span class=\"line\">          onTemperatureChange=&#123;<span class=\"keyword\">this</span>.handleCelsiusChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TemperatureInput</span><br><span class=\"line\">          scale=<span class=\"string\">\"f\"</span></span><br><span class=\"line\">          temperature=&#123;fahrenheit&#125;</span><br><span class=\"line\">          onTemperatureChange=&#123;<span class=\"keyword\">this</span>.handleFahrenheitChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;BoilingVerdict</span><br><span class=\"line\">          celsius=&#123;<span class=\"built_in\">parseFloat</span>(celsius)&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>现在不论哪一个输入框变更，<code>Calculator</code>组件的<code>this.state.temperature</code>和<code>this.state.scale</code>都会更新。其中一个输入框按原样得到值，所以任何用户输入都被保留，而另一个输入值总是基于它重新计算。</p>\n<p>我们总结一下当修改输入框内容的时候发生了什么：</p>\n<ul>\n<li>React调用DOM元素<code>&lt;input /&gt;</code>的<code>onChange</code>事件绑定的函数。在这里是调用<code>TemperatureInput</code>组件的<code>handleChange</code>方法。</li>\n<li><code>handleChange</code>方法调用<code>TemperatureInput</code>组件的<code>this.props.onTemperatureChange()</code>方法处理期望值。他的属性包括<code>onTemperatureChange</code>都有父组件<code>Calculator</code>提供。</li>\n<li>如果<code>Calculator</code>组件之前的渲染指定了<code>onTemperatureChange</code>使用摄氏温度输入框的处理函数<code>handleCelsiusChange</code>。根据我们修改的输入框类型来调用不同的函数来同步数据。</li>\n<li>在这些方法里，<code>Calculator</code>组件调用<code>this.setState()</code>来根据我们的输入重绘。</li>\n<li>React调用<code>Calculator</code>组件的<code>render</code>方法告诉UI要显示成什么样。两个输入框的信息根据最后的输入和温度类型计算得来。温度转换在这一步执行。</li>\n<li>React调用每个由父组件<code>Calculator</code>更新过属性的<code>TemperatureInput</code>组件的<code>render</code>方法。告诉他们渲染成什么样子。</li>\n<li>React把DOM渲染为期望的样子。我们编辑的输入框显示输入的值，另一个输入框显示转换之后的值。</li>\n</ul>\n<p>每个更新都经过相同的步骤，使输入保持同步。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于在React应用程序中的动态数据，应该只有一个“数据源”。通常，状态是最先加入到组件中并且重绘是需要用到的数据。然后，如果其他组件也需要它，这时需要把这个状态提升到这些组件公共的祖先中。你应该遵循<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down\" target=\"_blank\" rel=\"noopener\">单向数据流</a>原则来保持组件的状态同步，而不是在不同组件之间互相同步状态。</p>\n<p>提升状态涉及到比双向数据绑定更多的模板代码，但是好处是，花费更少的工作找到和隔离错误。由于任何状态“存在”某个组件中，而且这个组件本身就可以改变它，所以错误的范围大大减小。此外，你可以实现任何自定义逻辑来拒绝或转换用户输入。</p>\n<p>如果一些信息可以从属性或状态中推导出来，它可能不应该在状态中。比如，我们可以通过最后编辑的<code>temperature</code>值和他的<code>scale</code>值来推导出<code>celsiusValue</code>和<code>fahrenheitValue</code>。一个输入框总是可以根据另一个输入框的值在<code>render()</code>方法中计算出来。这可以让我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。</p>\n<p>当UI出现错误时，可以使用<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a>进行排错，可以跟踪数据的流转：</p>\n<p><img src=\"https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be.gif\" alt=\"demo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>通常，几个组件需要反映相同的变化数据。我们建议将共享状态提升到最接近的共同祖先。让我们看看这是如何工作的。</p>\n<p>在本节中，我们将创建一个温度计算器，计算在给定温度下水是否会沸腾。</p>\n<p>我们从<code>BoilingVerdict</code>组件开始。它接受一个<code>celsius</code>温度属性，打印这个温度是否可以把把水烧开：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BoilingVerdict</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props.celsius &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would not boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们创建一个<code>Calculator</code>组件。它渲染一个<code>&lt;inpu/&gt;</code>输入框让用户输入温度，并把它存储在<code>this.state.temperature</code>。</p>\n<p>另外，会渲染输入参数的<code>BoilingVerdict</code>判定结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> Celsius:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          value=&#123;temperature&#125;</span><br><span class=\"line\">          onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;BoilingVerdict</span><br><span class=\"line\">          celsius=&#123;<span class=\"built_in\">parseFloat</span>(temperature)&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"添加第二个输入\"><a href=\"#添加第二个输入\" class=\"headerlink\" title=\"添加第二个输入\"></a>添加第二个输入</h2><p>我们有一个新需求，除了摄氏温度输入外，我们需要一个华氏温度输入，他们俩保持同步。</p>\n<p>我们可以从<code>Calculator</code>组件中抽取出一个<code>TemperatureInput</code>组件。我们添加一个新的<code>scale</code>属性，值可以是<code>c</code>或者<code>f</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scaleNames = &#123;</span><br><span class=\"line\">  c: <span class=\"string\">'Celsius'</span>,</span><br><span class=\"line\">  f: <span class=\"string\">'Fahrenheit'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> &#123;scaleNames[scale]&#125;:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input value=&#123;temperature&#125;</span><br><span class=\"line\">               onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们把<code>Calculator</code>渲染为两个独立的温度输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TemperatureInput scale=<span class=\"string\">\"c\"</span> /&gt;</span><br><span class=\"line\">        &lt;TemperatureInput scale=<span class=\"string\">\"f\"</span> /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>我们现在有两个输入框，但是当在一个输入框输入温度的时候另一个输入框没有联动。这不符合我们的需求:两个输入框信息同步。</p>\n<p>我们也不能在<code>Calculator</code>中显示<code>BoilingVerdict</code>。因为温度存储在<code>Calculator</code>中，<code>Calculator</code>不知道当前的温度。</p>\n<h2 id=\"编写转换函数\"><a href=\"#编写转换函数\" class=\"headerlink\" title=\"编写转换函数\"></a>编写转换函数</h2><p>首先，我们编写两个函数用来转换摄氏温度和华氏温度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toCelsius</span>(<span class=\"params\">fahrenheit</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFahrenheit</span>(<span class=\"params\">celsius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个函数是用来转换数字类型的。我们再编写一个方法接收一个字符串温度参数和一个转换函数，返回一个字符串。我们会用这个函数根据一个输入框的温度计算另一个输入框要显示的信息。</p>\n<p>对于无效的参数返回空字符串，保持四舍五入到小数点后三位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryConvert</span>(<span class=\"params\">temperature, convert</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> input = <span class=\"built_in\">parseFloat</span>(temperature);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(input)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = convert(input);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rounded = <span class=\"built_in\">Math</span>.round(output * <span class=\"number\">1000</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rounded.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不如，执行<code>tryConvert(&#39;abc&#39;, toCelsius)</code>返回空字符串，执行<code>tryConvert(&#39;10.22&#39;, toFahrenheit)</code>返回<code>50.396</code>。</p>\n<h2 id=\"提升状态\"><a href=\"#提升状态\" class=\"headerlink\" title=\"提升状态\"></a>提升状态</h2><p>截止到目前，两个温度输入框组件在自己的state中维护温度值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">temperature</span>: e.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>然而，我们希望这两个输入框的数据是互相级联的。当我们修改摄氏温度值，华氏温度随之变化，反之亦然。</p>\n<p>在React中，共享状态是通过将需要共享的状态数据移动到相关组件的最近的共同祖先中来完成的。这就是所谓的“提升状态”。我们会把<code>TemperatureInput</code>组件的状态数据移动到<code>Calculator</code>组件中。</p>\n<p>如果<code>Calculator</code>组件拥有共享状态，则它将成为两个<code>TemperatureInput</code>组件中温度的“真实数据源”。它会让两个输入框的数据相互级联同步更新。<br>由于两个<code>TemperatureInput</code>组件的属性来自相同的父组件<code>Calculator</code>，所以两个输入将始终保持同步.</p>\n<p>让我们分步看一下他的工作流程。</p>\n<p>首先，我们把<code>TemperatureInput</code>组件中的<code>this.state.temperature</code>替换为<code>this.props.temperature</code>。现在，让我们假装<code>this.props.temperature</code>已经存在，虽然我们将来需要从计算器中传递它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Before: const temperature = this.state.temperature;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.props.temperature;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们知道属性是不可修改的。当<code>temperature</code>属性是<code>TemperatureInput</code>组件的state中的值时，可以通过<code>this.setState()</code>来修改它。然而，现在<code>temperature</code>属性父元素通过props传递的，<code>TemperatureInput</code>组件不能操作他。</p>\n<p>在React中通常使用一个受控组件来解决。就像<code>&lt;input/&gt;</code>DOM元素接收<code>value</code>和<code>onChange</code>属性，<code>TemperatureInput</code>组件可以从父组件<code>Calculator</code>中获取<code>temperature</code>和<code>onTemperatureChange</code>属性。</p>\n<p>现在，当<code>TemperatureInput</code>组件要更新温度的时候，只需要调用<code>this.props.onTemperatureChange</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Before: this.setState(&#123;temperature: e.target.value&#125;);</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>在自定义组件中不论是<code>temperature</code>属性还是<code>onTemperatureChange</code>属性都没有特殊涵义。我们可以随意命名，比如把常见约定是把它们命名为value和onChange。</p>\n</blockquote>\n<p><code>temperature</code>和<code>onTemperatureChange</code>由父组件一起提供。它将通过修改自己的本地状态来处理数据变更，从而使用新值重新渲染两个输入框。在深入修改<code>Calculator</code>组件之前，让我们总结一下对<code>TemperatureInput</code>组件的变更。我们把<code>temperature</code>从他自身状态移除，通过props获取。调用<code>Calculator</code>提供的<code>this.props.onTemperatureChange()</code>替代<code>this.setState()</code>来改变状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.props.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;fieldset&gt;</span><br><span class=\"line\">        &lt;legend&gt;Enter temperature <span class=\"keyword\">in</span> &#123;scaleNames[scale]&#125;:<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span></span><br><span class=\"line\">        &lt;input value=&#123;temperature&#125;</span><br><span class=\"line\">               onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>现在让我们来处理下<code>Calculator</code>组件。</p>\n<p>我们把输入的<code>temperature</code>和<code>scale</code>存储在组件的state中。这是从子组件提升上来的状态，讲作为两个输入框的真实数据源。这是为了渲染两个输入框需要准备的最小化数据。</p>\n<p>比如，我们输入37到摄氏温度输入框中，<code>Calculator</code>组件的状态是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  temperature: <span class=\"string\">'37'</span>,</span><br><span class=\"line\">  scale: <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们把华氏温度修改为212，<code>Calculator</code>组件的状态变为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  temperature: <span class=\"string\">'212'</span>,</span><br><span class=\"line\">  scale: <span class=\"string\">'f'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以存储这两个输入的值，但事实证明是不必要的。我们只需要存储最近的温度值和他的单位就可以了。我们可以根据温度值和单位计算出另一个单位的温度值。</p>\n<p>由于输入框的值是根据同一个状态值计算出来的所以两个输入框会保持同步：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleCelsiusChange = <span class=\"keyword\">this</span>.handleCelsiusChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleFahrenheitChange = <span class=\"keyword\">this</span>.handleFahrenheitChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">temperature</span>: <span class=\"string\">''</span>, <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleCelsiusChange(temperature) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>, temperature&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleFahrenheitChange(temperature) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">scale</span>: <span class=\"string\">'f'</span>, temperature&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.state.scale;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temperature = <span class=\"keyword\">this</span>.state.temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> celsius = scale === <span class=\"string\">'f'</span> ? tryConvert(temperature, toCelsius) : temperature;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fahrenheit = scale === <span class=\"string\">'c'</span> ? tryConvert(temperature, toFahrenheit) : temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TemperatureInput</span><br><span class=\"line\">          scale=<span class=\"string\">\"c\"</span></span><br><span class=\"line\">          temperature=&#123;celsius&#125;</span><br><span class=\"line\">          onTemperatureChange=&#123;<span class=\"keyword\">this</span>.handleCelsiusChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TemperatureInput</span><br><span class=\"line\">          scale=<span class=\"string\">\"f\"</span></span><br><span class=\"line\">          temperature=&#123;fahrenheit&#125;</span><br><span class=\"line\">          onTemperatureChange=&#123;<span class=\"keyword\">this</span>.handleFahrenheitChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;BoilingVerdict</span><br><span class=\"line\">          celsius=&#123;<span class=\"built_in\">parseFloat</span>(celsius)&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>现在不论哪一个输入框变更，<code>Calculator</code>组件的<code>this.state.temperature</code>和<code>this.state.scale</code>都会更新。其中一个输入框按原样得到值，所以任何用户输入都被保留，而另一个输入值总是基于它重新计算。</p>\n<p>我们总结一下当修改输入框内容的时候发生了什么：</p>\n<ul>\n<li>React调用DOM元素<code>&lt;input /&gt;</code>的<code>onChange</code>事件绑定的函数。在这里是调用<code>TemperatureInput</code>组件的<code>handleChange</code>方法。</li>\n<li><code>handleChange</code>方法调用<code>TemperatureInput</code>组件的<code>this.props.onTemperatureChange()</code>方法处理期望值。他的属性包括<code>onTemperatureChange</code>都有父组件<code>Calculator</code>提供。</li>\n<li>如果<code>Calculator</code>组件之前的渲染指定了<code>onTemperatureChange</code>使用摄氏温度输入框的处理函数<code>handleCelsiusChange</code>。根据我们修改的输入框类型来调用不同的函数来同步数据。</li>\n<li>在这些方法里，<code>Calculator</code>组件调用<code>this.setState()</code>来根据我们的输入重绘。</li>\n<li>React调用<code>Calculator</code>组件的<code>render</code>方法告诉UI要显示成什么样。两个输入框的信息根据最后的输入和温度类型计算得来。温度转换在这一步执行。</li>\n<li>React调用每个由父组件<code>Calculator</code>更新过属性的<code>TemperatureInput</code>组件的<code>render</code>方法。告诉他们渲染成什么样子。</li>\n<li>React把DOM渲染为期望的样子。我们编辑的输入框显示输入的值，另一个输入框显示转换之后的值。</li>\n</ul>\n<p>每个更新都经过相同的步骤，使输入保持同步。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于在React应用程序中的动态数据，应该只有一个“数据源”。通常，状态是最先加入到组件中并且重绘是需要用到的数据。然后，如果其他组件也需要它，这时需要把这个状态提升到这些组件公共的祖先中。你应该遵循<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down\" target=\"_blank\" rel=\"noopener\">单向数据流</a>原则来保持组件的状态同步，而不是在不同组件之间互相同步状态。</p>\n<p>提升状态涉及到比双向数据绑定更多的模板代码，但是好处是，花费更少的工作找到和隔离错误。由于任何状态“存在”某个组件中，而且这个组件本身就可以改变它，所以错误的范围大大减小。此外，你可以实现任何自定义逻辑来拒绝或转换用户输入。</p>\n<p>如果一些信息可以从属性或状态中推导出来，它可能不应该在状态中。比如，我们可以通过最后编辑的<code>temperature</code>值和他的<code>scale</code>值来推导出<code>celsiusValue</code>和<code>fahrenheitValue</code>。一个输入框总是可以根据另一个输入框的值在<code>render()</code>方法中计算出来。这可以让我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。</p>\n<p>当UI出现错误时，可以使用<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a>进行排错，可以跟踪数据的流转：</p>\n<p><img src=\"https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be.gif\" alt=\"demo\"></p>\n"},{"title":"React元素渲染","date":"2017-11-13T00:00:00.000Z","description":"React元素渲染","_content":"\n# React元素渲染\n\n**元素是React应用的最小构成单元。**\n\n一个元素就是用来描述你想在屏幕上看到的内容：\n\n```js\nconst element = <h1>Hello, world</h1>;\n```\n\n与浏览器的DOM元素不同，React元素是普通的对象，创建起来代价很小。React DOM负责更新DOM以匹配React元素。\n\n> **注意：**\n> 人们可能会将元素与更广为人知的“组件”概念混为一谈。元素是由组件组合而成的。\n\n## 渲染元素到DOM中\n\n假设你的html文件中有一个`<div>`元素：\n\n```html\n<div id=\"root\"></div>\n```\n\n我们称之为“根”DOM节点，因为它内部的一切都将由React DOM进行管理。\n\n使用React构建的应用程序通常只有一个根DOM节点。如果你将React集成到现有的应用程序中，则可以拥有尽可能多的隔离根DOM节点。\n\n要将React元素渲染到根DOM节点，要把根节点和React元素都传递给`ReactDOM.render()`：\n\n```js\nconst element = <h1>Hello, world</h1>;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n## 更新已渲染元素\n\nReact元素是不可变的。一旦创建了一个元素，就不能更改其子元素或属性。一个元素就像电影中的某一帧：它代表了某个时间点的UI。\n\n更新UI的唯一方法是创建一个新元素，并将其传递给`ReactDOM.render()`。\n\n思考下面这个时钟的例子：\n\n```js\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n它每秒从一个`setInterval()`回调中调用`ReactDOM.render()`。\n\n## React只更新必要的内容\n\nReact DOM将元素及其子元素与元素之前的状态进行比较，仅更新必要的DOM到指定的状态。\n\n可以通过chrome控制台查看[例子](http://codepen.io/gaearon/pen/gwoJZk?editors=0010)。\n\n![demo](https://reactjs.org/c158617ed7cc0eac8f58330e49e48224.gif)\n\n尽管我们创建了一个描述整个UI树的元素，但是只有内容改变的文本节点被React DOM更新了。\n\n> \n> In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.\n\n我们应该关注在某个时间点UI该是什么样子，而不是随着时间改变UI。\n","source":"_posts/react-render.md","raw":"---\ntitle: React元素渲染\ndate: '2017-11-13'\ndescription: React元素渲染\ncategories: \n- react\ntags:\n- react\n- js\n\n---\n\n# React元素渲染\n\n**元素是React应用的最小构成单元。**\n\n一个元素就是用来描述你想在屏幕上看到的内容：\n\n```js\nconst element = <h1>Hello, world</h1>;\n```\n\n与浏览器的DOM元素不同，React元素是普通的对象，创建起来代价很小。React DOM负责更新DOM以匹配React元素。\n\n> **注意：**\n> 人们可能会将元素与更广为人知的“组件”概念混为一谈。元素是由组件组合而成的。\n\n## 渲染元素到DOM中\n\n假设你的html文件中有一个`<div>`元素：\n\n```html\n<div id=\"root\"></div>\n```\n\n我们称之为“根”DOM节点，因为它内部的一切都将由React DOM进行管理。\n\n使用React构建的应用程序通常只有一个根DOM节点。如果你将React集成到现有的应用程序中，则可以拥有尽可能多的隔离根DOM节点。\n\n要将React元素渲染到根DOM节点，要把根节点和React元素都传递给`ReactDOM.render()`：\n\n```js\nconst element = <h1>Hello, world</h1>;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n## 更新已渲染元素\n\nReact元素是不可变的。一旦创建了一个元素，就不能更改其子元素或属性。一个元素就像电影中的某一帧：它代表了某个时间点的UI。\n\n更新UI的唯一方法是创建一个新元素，并将其传递给`ReactDOM.render()`。\n\n思考下面这个时钟的例子：\n\n```js\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n它每秒从一个`setInterval()`回调中调用`ReactDOM.render()`。\n\n## React只更新必要的内容\n\nReact DOM将元素及其子元素与元素之前的状态进行比较，仅更新必要的DOM到指定的状态。\n\n可以通过chrome控制台查看[例子](http://codepen.io/gaearon/pen/gwoJZk?editors=0010)。\n\n![demo](https://reactjs.org/c158617ed7cc0eac8f58330e49e48224.gif)\n\n尽管我们创建了一个描述整个UI树的元素，但是只有内容改变的文本节点被React DOM更新了。\n\n> \n> In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.\n\n我们应该关注在某个时间点UI该是什么样子，而不是随着时间改变UI。\n","slug":"react-render","published":1,"updated":"2018-06-20T03:07:08.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ib001jvqqj4v67lbi6","content":"<h1 id=\"React元素渲染\"><a href=\"#React元素渲染\" class=\"headerlink\" title=\"React元素渲染\"></a>React元素渲染</h1><p><strong>元素是React应用的最小构成单元。</strong></p>\n<p>一个元素就是用来描述你想在屏幕上看到的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<p>与浏览器的DOM元素不同，React元素是普通的对象，创建起来代价很小。React DOM负责更新DOM以匹配React元素。</p>\n<blockquote>\n<p><strong>注意：</strong><br>人们可能会将元素与更广为人知的“组件”概念混为一谈。元素是由组件组合而成的。</p>\n</blockquote>\n<h2 id=\"渲染元素到DOM中\"><a href=\"#渲染元素到DOM中\" class=\"headerlink\" title=\"渲染元素到DOM中\"></a>渲染元素到DOM中</h2><p>假设你的html文件中有一个<code>&lt;div&gt;</code>元素：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们称之为“根”DOM节点，因为它内部的一切都将由React DOM进行管理。</p>\n<p>使用React构建的应用程序通常只有一个根DOM节点。如果你将React集成到现有的应用程序中，则可以拥有尽可能多的隔离根DOM节点。</p>\n<p>要将React元素渲染到根DOM节点，要把根节点和React元素都传递给<code>ReactDOM.render()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新已渲染元素\"><a href=\"#更新已渲染元素\" class=\"headerlink\" title=\"更新已渲染元素\"></a>更新已渲染元素</h2><p>React元素是不可变的。一旦创建了一个元素，就不能更改其子元素或属性。一个元素就像电影中的某一帧：它代表了某个时间点的UI。</p>\n<p>更新UI的唯一方法是创建一个新元素，并将其传递给<code>ReactDOM.render()</code>。</p>\n<p>思考下面这个时钟的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    element,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>它每秒从一个<code>setInterval()</code>回调中调用<code>ReactDOM.render()</code>。</p>\n<h2 id=\"React只更新必要的内容\"><a href=\"#React只更新必要的内容\" class=\"headerlink\" title=\"React只更新必要的内容\"></a>React只更新必要的内容</h2><p>React DOM将元素及其子元素与元素之前的状态进行比较，仅更新必要的DOM到指定的状态。</p>\n<p>可以通过chrome控制台查看<a href=\"http://codepen.io/gaearon/pen/gwoJZk?editors=0010\" target=\"_blank\" rel=\"noopener\">例子</a>。</p>\n<p><img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224.gif\" alt=\"demo\"></p>\n<p>尽管我们创建了一个描述整个UI树的元素，但是只有内容改变的文本节点被React DOM更新了。</p>\n<blockquote>\n<p>In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.</p>\n</blockquote>\n<p>我们应该关注在某个时间点UI该是什么样子，而不是随着时间改变UI。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React元素渲染\"><a href=\"#React元素渲染\" class=\"headerlink\" title=\"React元素渲染\"></a>React元素渲染</h1><p><strong>元素是React应用的最小构成单元。</strong></p>\n<p>一个元素就是用来描述你想在屏幕上看到的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<p>与浏览器的DOM元素不同，React元素是普通的对象，创建起来代价很小。React DOM负责更新DOM以匹配React元素。</p>\n<blockquote>\n<p><strong>注意：</strong><br>人们可能会将元素与更广为人知的“组件”概念混为一谈。元素是由组件组合而成的。</p>\n</blockquote>\n<h2 id=\"渲染元素到DOM中\"><a href=\"#渲染元素到DOM中\" class=\"headerlink\" title=\"渲染元素到DOM中\"></a>渲染元素到DOM中</h2><p>假设你的html文件中有一个<code>&lt;div&gt;</code>元素：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们称之为“根”DOM节点，因为它内部的一切都将由React DOM进行管理。</p>\n<p>使用React构建的应用程序通常只有一个根DOM节点。如果你将React集成到现有的应用程序中，则可以拥有尽可能多的隔离根DOM节点。</p>\n<p>要将React元素渲染到根DOM节点，要把根节点和React元素都传递给<code>ReactDOM.render()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新已渲染元素\"><a href=\"#更新已渲染元素\" class=\"headerlink\" title=\"更新已渲染元素\"></a>更新已渲染元素</h2><p>React元素是不可变的。一旦创建了一个元素，就不能更改其子元素或属性。一个元素就像电影中的某一帧：它代表了某个时间点的UI。</p>\n<p>更新UI的唯一方法是创建一个新元素，并将其传递给<code>ReactDOM.render()</code>。</p>\n<p>思考下面这个时钟的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    element,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>它每秒从一个<code>setInterval()</code>回调中调用<code>ReactDOM.render()</code>。</p>\n<h2 id=\"React只更新必要的内容\"><a href=\"#React只更新必要的内容\" class=\"headerlink\" title=\"React只更新必要的内容\"></a>React只更新必要的内容</h2><p>React DOM将元素及其子元素与元素之前的状态进行比较，仅更新必要的DOM到指定的状态。</p>\n<p>可以通过chrome控制台查看<a href=\"http://codepen.io/gaearon/pen/gwoJZk?editors=0010\" target=\"_blank\" rel=\"noopener\">例子</a>。</p>\n<p><img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224.gif\" alt=\"demo\"></p>\n<p>尽管我们创建了一个描述整个UI树的元素，但是只有内容改变的文本节点被React DOM更新了。</p>\n<blockquote>\n<p>In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.</p>\n</blockquote>\n<p>我们应该关注在某个时间点UI该是什么样子，而不是随着时间改变UI。</p>\n"},{"title":"学习React Redux（译文）","date":"2018-04-23T00:00:00.000Z","description":"学习React Redux（译文）","_content":"\n\n[原文](https://css-tricks.com/learning-react-redux/)\n\nRedux是一个在js应用中用来管理数据状态和UI状态的工具。对于管理随着时间的推移而变得复杂的单页应用程序（SPA）来说，它非常理想。它是框架无关的，虽然它由React编写，但是它同样可以在Anjular或者jQuery应用中使用。\n\n此外，它是从一个“时间旅行”的实验中构思出来的 - 事实是，我们将在以后做到这一点！\n\n正如我们之前的教程所见到的，React通过组件流转数据。进一步说，称之为“单向数据流”--数据从父组件流向子组件。因为这个特性，两个非父子关系的组件如何在React中进行通信并不明显：\n![flow](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-01.svg)\n\nReact不建议以这种方式直接进行组件间通信。即使它确实有支持这种方法的能力，但它被认为是很糟糕的做法，因为直接的组件间通信很容易出错，并导致意大利面代码 - 一个难以遵循的旧代码术语。\n\nReact提供了一个建议，但他们希望你自己实现它。下面是React文档的一部分节选：\n\n>  对于两个没有父子关系的组件之间的通信，你可以设置自己的全局事件系统。Flux模式是一个可行的方案。\n\n这就是Redux的用武之地。Redux提供了将所有应用程序状态存储在一个地方的解决方案，称为“存储”。组件然后将状态更改“分派”给存储，而不是直接传递给其他组件。需要了解状态更改的组件可以“订阅”存储：\n![redux](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-02.svg)\n\n存储可以被认为是应用中所有状态变化的“中间人”。因为Redux的参与，组件之间不直接通信，而是所有的状态变换都要通过存储这个单一数据源。\n\n这与部分应用程序直接相互通信的其他策略有很大不同。有时候，这些策略被认为是容易出错和混淆的原因如下：\n![other](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg)\n\n显而易见，借助Redux，所有组件都可以从商店获取其状态。同样清楚的是，组件应该发送状态更改 - 也就是存储。发起更改的组件只需要关注将更改分派给存储，而不必担心需要状态更改的其他组件。这就是Redux如何使数据流更易于推理。\n\n使用存储来协调应用状态的概念就是Flux模式。这是一种设计模式，可以像React一样支持单向数据流体系结构。Redux很像Flux，但是它们有多相似呢？\n\n## Redux 是类Flux\n\nFlux是一种模式，而不是类似Redux的工具，所以它不是你可以下载的东西。Redux是一个受Flux模式启发的工具，还包括其他的东西比如Elm。有很多比较Redux和Flux的指南。他们中的大多数人会得出结论，Redux是Flux或者是类似Flux的，这取决于我们如何严格定义Flux的规则。最终，这并不重要。Facebook非常喜欢并支持Redux，因此他们聘请了其主要开发人员Dan Abramov。\n\n本文假定您不熟悉Flux模式。但如果你是，你会发现一些小的差异，特别是Redux的三大指导原则：\n\n### 1. 真相的唯一来源\n\nRedux仅为其所有应用程序状态使用一个存储。由于所有状态都驻留在一个地方，Redux称这是真相的唯一来源。\n\n存储的数据结构最终取决于您，但在实际应用程序中它通常是一个深层嵌套对象。\n\nRedux的这种单存储方法是它与Flux的多存储方法之间的主要区别之一。\n\n### 2. 状态是只读的\n\n根据Redux的文档，“改变状态的唯一途径就是发出一个描述是发生了何事的动作对象”。\n\n这就意味着应用不能直接修改状态。相反，“动作”是被分发用来改变存储中的状态。\n\n存储对象自身有一个包含四个方法的API：\n\n* store.dispatch(action)\n* store.subscribe(listener)\n* store.getState()\n* replaceReducer(nextReducer)\n\n如你所见，没有设置状态的方法。因此，分发一个动作是应用代码表示状态变换的唯一途径：\n\n```JavaScript\nvar action = {\n  type: 'ADD_USER',\n  user: {name: 'Dan'}\n};\n\n// Assuming a store object has been created already\nstore.dispatch(action);\n```\n\n`dispatch()`方法发送一个动作对象给Redux。这个动作可以被描述为一个“有效载荷”，它携带一个`type`和用来更新状态的所有其他数据 - 上面例子中式用户信息。请记住，在`type`属性之后，操作对象的设计取决于您。\n\n### 3. 使用纯函数进行更改状态\n\n如上所述，Redux不允许应用程序直接更改状态。相反，分发的动作“描述”状态变化和改变状态的意图。Reducers是您编写的处理调度动作并可以实际更改状态的函数。\n\n一个reducer将当前状态作为参数，并且只能通过返回新状态来修改状态：\n\n```js\n// Reducer Function\nvar someReducer = function(state, action) {\n  ...\n  return state;\n}\n```\n\nReducers应该是“纯函数”，“纯函数”是具有以下特征的功能的函数：\n\n* 它不会进行外部网络或数据库调用\n* 其返回值完全取决于其参数的值\n* 参数应该被认为是“不可变的”，这意味着它们不应该改变。\n* 使用同一组参数调用纯函数将始终返回相同的值。\n\n他们之所以被称为“纯粹”是因为它们什么都不做只根据参数返回基于参数的结果。他们对系统的任何其他部分没有副作用。\n\n## 我们第一个Redux存储\n\n首先，使用`Redux.createStore()`创建一个存储，并将所有reducer作为参数传递。我们来看一下只有一个reducer的简单例子：\n\n```js\n// Note that using .push() in this way isn't the\n// best approach. It's just the easiest to show\n// for this example. We'll explain why in the next section.\n\n// The Reducer Function\nvar userReducer = function(state, action) {\n  if (state === undefined) {\n    state = [];\n  }\n  if (action.type === 'ADD_USER') {\n    state.push(action.user);\n  }\n  return state;\n}\n\n// Create a store by passing in the reducer\nvar store = Redux.createStore(userReducer);\n\n// Dispatch our first action to express an intent to change the state\nstore.dispatch({\n  type: 'ADD_USER',\n  user: {name: 'Dan'}\n});\n```\n下面是代码的简要说明：\n\n1. 存储创建附带一个reducer\n2. reducer初始化存储为一个空数组。\n3. 动作分发创建一个用户\n4. reducer添加用户用到state更新存储并返回。\n\n**reducer被调用了两次**--一次是在存储创建的时候，然后分发之后又调用了执行了。\n\n当存储被创建，Redux立即调用reducers并使用它们的返回值作为初始化状态。第一次调用reducer返回`undefined`给状态。Reducer代码预计到这一点，并返回一个空数组来初始化存储的初始状态。每次调度动作时也会调用reducer。由于从reducer返回的状态将成为我们在存储中的新状态，**Redux总是期望reducer返回状态。**\n\n在这个例子中，在分发之后第二次调用reducer。请记住，分派的动作描述了更改状态的意图，并且通常会携带新状态的数据。这一次，Redux将当前状态（仍是一个空数组）与action对象一起传递给reducer。动作对象现在具有`ADD_USER`类型属性，让reducer知道如何更改状态。\n\n很容易将reducer想象为允许状态通过的漏斗。这是因为reducers总是收到并返回状态以更新存储：\n![reducers](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-04.svg)\n\n基于该示例，我们的存储现在将成为一个包含一个用户对象的数组：\n\n```js\nstore.getState();   // => [{name: 'Dan'}]\n```\n\n## 不要变动状态，拷贝它\n\n虽然我们例子中的reducer在技术上起作用，但它改变状态这种做法很差的方式。尽管reducer负责改变状态，但不应该直接改变“当前状态”参数。这就是为什么我们不应该在reducer的状态参数中使用`.push（）`这种突变方法。\n\n传递给reducer的参数应该被认为是不可变的。换句话说，他们不能被直接修改。相比直接修改，我们可以使用`.concat()`这样的非变异方法来克隆一个数组，然后我们改变克隆的数组：\n\n```js\nvar userReducer = function(state = [], action) {\n  if (action.type === 'ADD_USER') {\n    var newState = state.concat([action.user]);\n    return newState;\n  }\n  return state;\n}\n```\n\n通过对reducer的更新，添加新用户会更改并返回状态参数的副本。不添加新用户时，请注意返回原始状态而不是创建副本。\n\n下面有关于不可变数据结构的一节介绍了这些类型的最佳实践。\n\n您可能还注意到，现在初始状态来自ES2015默认参数。到目前为止，在本系列中，我们避免了ES2015让您专注于主要主题。但是，Redux在ES2015上更加出色。因此，我们会在本文中开始使用ES2015。不要担心，每次使用新的ES2015功能时，都会指出并解释。\n\n## 多Reducer\n\n最后一个例子是一个很好的入门，但是大多数应用程序在整个应用程序中需要更复杂的状态。由于Redux只使用一个存储，因此我们需要使用嵌套对象将状态组织到不同的部分。让我们想象我们希望我们的存储类似于这个对象：\n\n```js\n{\n  userState: { ... },\n  widgetState: { ... }\n}\n```\n\n对于整个应用程序来说，它仍然是“一个存储=一个对象”，但它具有可以包含各种数据的`userState`和`widgetState`的嵌套对象。这可能看起来过于简单化，但实际上它与真正的Redux存储相去不远。为了使用嵌套对象创建存储，我们需要用reducer定义每个部分：\n\n```js\nimport { createStore, combineReducers } from 'redux';\n\n// The User Reducer\nconst userReducer = function(state = {}, action) {\n  return state;\n}\n\n// The Widget Reducer\nconst widgetReducer = function(state = {}, action) {\n  return state;\n}\n\n// Combine Reducers\nconst reducers = combineReducers({\n  userState: userReducer,\n  widgetState: widgetReducer\n});\n\nconst store = createStore(reducers);\n```\n\n`combineReducers（）`允许我们根据不同的逻辑部分来描述我们的存储，并将reducer分配给每个部分。现在，当每个reducer返回初始状态时，该状态将进入其各自的`storeState`或`widgetState`部分。\n\n值得注意的是，现在，每个reducer都会通过其整体状态的各个子部分，而不是整个存储的状态值，就像one-reducer示例一样。然后从每个reducer返回的状态适用于其子部分。\n\n## 分发行动之后调用哪个reducer\n\n所有的reducers。如果我们认为每次发布操作时都会将reducer与漏斗进行比较，那么所有reducer都将被调用，并且将有机会更新其各自的状态：\n![dispatch](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-05.svg)\n\n我仔细地说“他们的”状态，因为reducer的“当前状态”参数及其返回的“更新后的”状态仅影响存储的reducer的部分。请记住，正如前一节所述，每个reducer只能通过其各自的状态，而不是整个状态。\n\n## 动作策略\n\n实际上有很多创建和管理动作和动作类型的策略。虽然他们很好，但并不像本文中的其他信息那么重要。为了保持文章更短，我们已经记录了你该知道的基本策略在[github仓库](https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/master/guide-3-redux/docs/action-strategies.md)。\n\n## 不可变数据结构\n\n> 状态的结构取决于你：它可以是一个原始结构，一个数组，一个对象或者甚至是一个Immutable.js 数据结构。唯一重要的部分是“你不能改变状态对象，而是返回一个新的状态变更后的状态对象”--[Redux docs](https://github.com/reactjs/redux#the-gist)\n\n该声明说了很多,同时我们已经在本教程中提到了这一点。我只会强调一些要点。\n\n首先：\n\n* js原始数据类型（Number, String, Boolean, Undefined, Null）是不可变的\n* Objects, arrays,  functions 是可变的\n\n有人说过，数据结构上的可变性很容易出现错误。由于我们的存储将由状态对象和数组组成，因此我们需要实施一个策略来保持状态不变。\n\n让我们想象一个我们需要改变属性的状态对象。这里有三种方法：\n\n```js\n// Example One\nstate.foo = '123';\n\n// Example Two\nObject.assign(state, { foo: 123 });\n\n// Example Three\nvar newState = Object.assign({}, state, { foo: 123 });\n```\n\n第一个和第二个例子改变了状态对象。第二个例子改变是因为`Object.assign()`方法合并所有的参数到第一个参数中。但这也是为什么第三个例子不会改变状态的原因。\n\n第三个例子合并`state`和`{foo: 123}`到一个新的空对象。这是一个常见的技巧，它使我们能够在不影响原始状态的情况下创建状态副本并对副本进行变更。\n\n对象“传播运算符”是保持状态不变的另一种方法：\n\n```js\nconst newState = { ...state, foo: 123 };\n```\n\n## 初始化状态和时间旅行\n\n如果你阅读了[文档](http://redux.js.org/docs/api/createStore.html),你可能意识到`createStore()`的第二个参数，是为了`initial state`。这看起来像是reducer创建初始状态的替代方案。但是，这个初始状态只能用于“state hydration”。\n\n想象一下，用户会对SPA进行刷新，并且存储的状态将重置为reducer初始状态。这可能不是用户所期望的。\n\n相反，想象一下，您可以使用策略来固化存储，然后您可以在刷新时将其重新水合到Redux中。这是将初始状态发送到`createStore（）`的原因。\n\n## Redux with React\n\n正如我们已经讨论过的，Redux是框架无关的。先了解Redux的核心概念，然后再考虑它如何与React协同工作。但是现在我们准备从上一篇文章中获取一个容器组件，并将Redux应用到它。\n\n首先，这里是没有Redux的原始组件：\n\n```js\nimport React from 'react';\nimport axios from 'axios';\nimport UserList from '../views/list-user';\n\nconst UserListContainer = React.createClass({\n  getInitialState: function() {\n    return {\n      users: []\n    };\n  },\n\n  componentDidMount: function() {\n    axios.get('/path/to/user-api').then(response => {\n      this.setState({users: response.data});\n    });\n  },\n\n  render: function() {\n    return <UserList users={this.state.users} />;\n  }\n});\n\nexport default UserListContainer;\n```\n\n当然，它会执行它的Ajax请求并更新它自己的本地状态。但如果应用程序中的其他区域需要根据新获得的用户列表进行更改，则此策略是不够的。\n\n使用Redux策略，我们可以在Ajax请求返回时调度一个动作，而不是执行`this.setState（）`。然后这个组件和其他人可以订阅状态更改。但是这实际上给我们带来了一个问题，我们如何设置`store.subscribe（）`来更新组件的状态？\n\n我想我可以提供几个手动将组件连接到Redux存储的示例。你甚至可以想象如何用你自己的方法来处理。但最终，在这些例子的最后，我会解释说有更好的方法，忘记手动例子。然后我将介绍名为r[eact-redux](http://redux.js.org/docs/basics/UsageWithReact.html)的官方React / Redux绑定模块。所以让我们直接跳到这一点。\n\n## Connecting with react-redux\n\n为了清楚起见，`react`，`redux`和`react-redux`是npm上的三个独立模块。`react-redux`模块使我们能够以更方便的方式将`React`组件连接到`Redux`。\n\n如下：\n\n```js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport store from '../path/to/store';\nimport axios from 'axios';\nimport UserList from '../views/list-user';\n\nconst UserListContainer = React.createClass({\n  componentDidMount: function() {\n    axios.get('/path/to/user-api').then(response => {\n      store.dispatch({\n        type: 'USER_LIST_SUCCESS',\n        users: response.data\n      });\n    });\n  },\n\n  render: function() {\n    return <UserList users={this.props.users} />;\n  }\n});\n\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n\nexport default connect(mapStateToProps)(UserListContainer);\n```\n\n上面代码做了以下事情：\n\n1. 从`react-redux`导入`connect`方法\n2. 从下向上看代码。`connect`方法其实有两个参数，但是我们值提供了一个`mapStateToProps()`。\n3. `connect()`方法的第一个参数是一个函数返回一个对象。对象的属性会变为组件的`props`。可以在状态中看到他们。现在，我希望函数名“mapStateToProps”更有意义。另请注意，`mapStateToProps（）`将收到一个参数，它是整个Redux存储的参数。`mapStateToProps（）`的主要思想是将组件需要的整体状态的哪些部分作为其`props`。\n4. 由于第三条的原因我们不在需要`getInitialState()`。我们使用`this.props.users`替代`this.state.users`，因为`users `现在是一个道具而不是本地组件状态。\n5. Ajax返回现在调度一个操作，而不是更新本地组件状态。\n\n示例代码假设用户reducer的工作原理可能并不明显。注意存储如何拥有userState属性。但是这个名字来自哪里？\n\n```js\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n```\n\n这个名字来自我们结合我们的reducer的时候:\n\n```js\nconst reducers = combineReducers({\n  userState: userReducer,\n  widgetState: widgetReducer\n});\n```\n\n虽然我们没有为示例显示实际的reducer（因为它将在另一个文件中），但它是确定其各自状态的子属性的reducer。为了确保`.users`是`userState`的属性，这些示例的缩减器可能如下所示：\n\n```js\nconst initialUserState = {\n  users: []\n}\n\nconst userReducer = function(state = initialUserState, action) {\n  switch(action.type) {\n  case 'USER_LIST_SUCCESS':\n    return Object.assign({}, state, { users: action.users });\n  }\n  return state;\n}\n```\n\n## Ajax Lifecycle Dispatches\n\n在我们的Ajax示例中，我们只调度了一个动作。它故意被称为“USER_LIST_SUCCESS”，因为我们可能还希望在Ajax启动前发送'USER_LIST_REQUEST'，在Ajax发生故障时发送'USER_LIST_FAILED'。请务必阅读有关[异步操作](http://redux.js.org/docs/advanced/AsyncActions.html)的文档。\n\n## Dispatching from Events\n\n在之前的文章中，我们看到事件应该从容器组件传递到展示组件。事实证明，在事件只需发送一个动作的情况下，react-redux同样有效：\n\n```js\nconst mapDispatchToProps = function(dispatch, ownProps) {\n  return {\n    toggleActive: function() {\n      dispatch({ ... });\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserListContainer);\n```\n\n在展示组件中，我们可以像以前那样做`onClick = {this.props.toggleActive}`，但是这次我们不必自己编写事件。\n\n## Container Component Omission\n\n有时，容器组件只需要订阅存储，并且不需要像`componentDidMount（）`这样的方法来启动Ajax请求。它可能只需要一个`render（）`方法将状态传递给展示组件。在这种情况下，我们可以通过以下方式创建一个容器组件：\n\n```js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport UserList from '../views/list-user';\n\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n\nexport default connect(mapStateToProps)(UserList);\n```\n\n是的，这是我们新的容器组件的整个文件。但是请等待，容器组件在哪里？我们为什么不在这里使用`React.createClass（）`？\n\n事实证明，`connect（）`为我们创建了一个容器组件。注意这次我们直接传递了展示组件，而不是传入自己创建的容器组件。如果您真的想到容器组件所做的事情，请记住它们存在以允许演示组件只关注视图而不关注状态。他们也以属性形式将状态传递给子视图。这正是`connect（）`所做的 - 它将状态（通过props）传递给我们的展示组件，并实际返回一个包装容器组件的React组件。实质上，该包装器是一个容器组件。\n\n那么这是否意味着之前的例子实际上是两个包装展示性的容器组件？当然，你可以这样想。但这不是问题，只有当我们的容器组件需要除`render（）`之外的更多React方法时才有必要。\n\n将这两个容器组件看作服务于不同但相关的角色:\n![presentational](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-06.svg)\n\n嗯，也许这就是为什么React标志看起来像一个原子！\n\n## Provider\n\n为了使这个`react-redux`代码正常工作，您需要让应用程序知道如何将`react-redux`与`<Provider />`组件一起使用。这个组件包装你的整个React应用程序。如果您使用的是React Router，它将如下所示：\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport router from './router';\n\nReactDOM.render(\n  <Provider store={store}>{router}</Provider>,\n  document.getElementById('root')\n);\n```\n\n被附加在`Provider`上的存储是通过``react-redux``真正“连接”React和Redux。\n\n## Redux with React Router\n\n这不是必需的，但还有另一个名为`react-router-redux`的`npm`项目。由于路由在技术上属于UI状态的一部分，并且React Router不知道Redux，因此该项目有助于将两者联系起来。\n\n你看到我在那里做了什么？我们走了一圈，然后回到第一篇文章！# \n\n## Final Project\n\n本系列的[最终项目指南](https://github.com/bradwestfall/CSS-Tricks-React-Series/tree/master/guide-3-redux)允许您创建一个小的“用户和小部件”单页应用程序：\n![final](https://raw.githubusercontent.com/bradwestfall/CSS-Tricks-React-Series/master/guide-3-redux/docs/preview.gif)\n\n与本系列中的其他文章一样，每个文章都附带了一份指南，该指南更详细地介绍了指南在GitHub中的工作方式。\n\n## Summary\n\n我真的很希望你喜欢这个系列，就像我写的一样。我意识到有很多关于React的话题我们没有涉及（表格为一），但我试图保持真实的前提，即我想让新用户了解如何通过基本知识以及制作单页应用程序的感受。\n\n## 系列文章\n\n**第一部分：[React Router](https://css-tricks.com/learning-react-router/)\n\n**第二部分：[Container Components](https://css-tricks.com/learning-react-container-components/)\n\n**第三部分：Redux\n","source":"_posts/react-redux.md","raw":"---\ntitle: 学习React Redux（译文）\ndate: '2018-04-23'\ndescription: 学习React Redux（译文）\ncategories: \n- react\n\ntags:\n\n- react\n- redux\n---\n\n\n[原文](https://css-tricks.com/learning-react-redux/)\n\nRedux是一个在js应用中用来管理数据状态和UI状态的工具。对于管理随着时间的推移而变得复杂的单页应用程序（SPA）来说，它非常理想。它是框架无关的，虽然它由React编写，但是它同样可以在Anjular或者jQuery应用中使用。\n\n此外，它是从一个“时间旅行”的实验中构思出来的 - 事实是，我们将在以后做到这一点！\n\n正如我们之前的教程所见到的，React通过组件流转数据。进一步说，称之为“单向数据流”--数据从父组件流向子组件。因为这个特性，两个非父子关系的组件如何在React中进行通信并不明显：\n![flow](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-01.svg)\n\nReact不建议以这种方式直接进行组件间通信。即使它确实有支持这种方法的能力，但它被认为是很糟糕的做法，因为直接的组件间通信很容易出错，并导致意大利面代码 - 一个难以遵循的旧代码术语。\n\nReact提供了一个建议，但他们希望你自己实现它。下面是React文档的一部分节选：\n\n>  对于两个没有父子关系的组件之间的通信，你可以设置自己的全局事件系统。Flux模式是一个可行的方案。\n\n这就是Redux的用武之地。Redux提供了将所有应用程序状态存储在一个地方的解决方案，称为“存储”。组件然后将状态更改“分派”给存储，而不是直接传递给其他组件。需要了解状态更改的组件可以“订阅”存储：\n![redux](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-02.svg)\n\n存储可以被认为是应用中所有状态变化的“中间人”。因为Redux的参与，组件之间不直接通信，而是所有的状态变换都要通过存储这个单一数据源。\n\n这与部分应用程序直接相互通信的其他策略有很大不同。有时候，这些策略被认为是容易出错和混淆的原因如下：\n![other](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg)\n\n显而易见，借助Redux，所有组件都可以从商店获取其状态。同样清楚的是，组件应该发送状态更改 - 也就是存储。发起更改的组件只需要关注将更改分派给存储，而不必担心需要状态更改的其他组件。这就是Redux如何使数据流更易于推理。\n\n使用存储来协调应用状态的概念就是Flux模式。这是一种设计模式，可以像React一样支持单向数据流体系结构。Redux很像Flux，但是它们有多相似呢？\n\n## Redux 是类Flux\n\nFlux是一种模式，而不是类似Redux的工具，所以它不是你可以下载的东西。Redux是一个受Flux模式启发的工具，还包括其他的东西比如Elm。有很多比较Redux和Flux的指南。他们中的大多数人会得出结论，Redux是Flux或者是类似Flux的，这取决于我们如何严格定义Flux的规则。最终，这并不重要。Facebook非常喜欢并支持Redux，因此他们聘请了其主要开发人员Dan Abramov。\n\n本文假定您不熟悉Flux模式。但如果你是，你会发现一些小的差异，特别是Redux的三大指导原则：\n\n### 1. 真相的唯一来源\n\nRedux仅为其所有应用程序状态使用一个存储。由于所有状态都驻留在一个地方，Redux称这是真相的唯一来源。\n\n存储的数据结构最终取决于您，但在实际应用程序中它通常是一个深层嵌套对象。\n\nRedux的这种单存储方法是它与Flux的多存储方法之间的主要区别之一。\n\n### 2. 状态是只读的\n\n根据Redux的文档，“改变状态的唯一途径就是发出一个描述是发生了何事的动作对象”。\n\n这就意味着应用不能直接修改状态。相反，“动作”是被分发用来改变存储中的状态。\n\n存储对象自身有一个包含四个方法的API：\n\n* store.dispatch(action)\n* store.subscribe(listener)\n* store.getState()\n* replaceReducer(nextReducer)\n\n如你所见，没有设置状态的方法。因此，分发一个动作是应用代码表示状态变换的唯一途径：\n\n```JavaScript\nvar action = {\n  type: 'ADD_USER',\n  user: {name: 'Dan'}\n};\n\n// Assuming a store object has been created already\nstore.dispatch(action);\n```\n\n`dispatch()`方法发送一个动作对象给Redux。这个动作可以被描述为一个“有效载荷”，它携带一个`type`和用来更新状态的所有其他数据 - 上面例子中式用户信息。请记住，在`type`属性之后，操作对象的设计取决于您。\n\n### 3. 使用纯函数进行更改状态\n\n如上所述，Redux不允许应用程序直接更改状态。相反，分发的动作“描述”状态变化和改变状态的意图。Reducers是您编写的处理调度动作并可以实际更改状态的函数。\n\n一个reducer将当前状态作为参数，并且只能通过返回新状态来修改状态：\n\n```js\n// Reducer Function\nvar someReducer = function(state, action) {\n  ...\n  return state;\n}\n```\n\nReducers应该是“纯函数”，“纯函数”是具有以下特征的功能的函数：\n\n* 它不会进行外部网络或数据库调用\n* 其返回值完全取决于其参数的值\n* 参数应该被认为是“不可变的”，这意味着它们不应该改变。\n* 使用同一组参数调用纯函数将始终返回相同的值。\n\n他们之所以被称为“纯粹”是因为它们什么都不做只根据参数返回基于参数的结果。他们对系统的任何其他部分没有副作用。\n\n## 我们第一个Redux存储\n\n首先，使用`Redux.createStore()`创建一个存储，并将所有reducer作为参数传递。我们来看一下只有一个reducer的简单例子：\n\n```js\n// Note that using .push() in this way isn't the\n// best approach. It's just the easiest to show\n// for this example. We'll explain why in the next section.\n\n// The Reducer Function\nvar userReducer = function(state, action) {\n  if (state === undefined) {\n    state = [];\n  }\n  if (action.type === 'ADD_USER') {\n    state.push(action.user);\n  }\n  return state;\n}\n\n// Create a store by passing in the reducer\nvar store = Redux.createStore(userReducer);\n\n// Dispatch our first action to express an intent to change the state\nstore.dispatch({\n  type: 'ADD_USER',\n  user: {name: 'Dan'}\n});\n```\n下面是代码的简要说明：\n\n1. 存储创建附带一个reducer\n2. reducer初始化存储为一个空数组。\n3. 动作分发创建一个用户\n4. reducer添加用户用到state更新存储并返回。\n\n**reducer被调用了两次**--一次是在存储创建的时候，然后分发之后又调用了执行了。\n\n当存储被创建，Redux立即调用reducers并使用它们的返回值作为初始化状态。第一次调用reducer返回`undefined`给状态。Reducer代码预计到这一点，并返回一个空数组来初始化存储的初始状态。每次调度动作时也会调用reducer。由于从reducer返回的状态将成为我们在存储中的新状态，**Redux总是期望reducer返回状态。**\n\n在这个例子中，在分发之后第二次调用reducer。请记住，分派的动作描述了更改状态的意图，并且通常会携带新状态的数据。这一次，Redux将当前状态（仍是一个空数组）与action对象一起传递给reducer。动作对象现在具有`ADD_USER`类型属性，让reducer知道如何更改状态。\n\n很容易将reducer想象为允许状态通过的漏斗。这是因为reducers总是收到并返回状态以更新存储：\n![reducers](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-04.svg)\n\n基于该示例，我们的存储现在将成为一个包含一个用户对象的数组：\n\n```js\nstore.getState();   // => [{name: 'Dan'}]\n```\n\n## 不要变动状态，拷贝它\n\n虽然我们例子中的reducer在技术上起作用，但它改变状态这种做法很差的方式。尽管reducer负责改变状态，但不应该直接改变“当前状态”参数。这就是为什么我们不应该在reducer的状态参数中使用`.push（）`这种突变方法。\n\n传递给reducer的参数应该被认为是不可变的。换句话说，他们不能被直接修改。相比直接修改，我们可以使用`.concat()`这样的非变异方法来克隆一个数组，然后我们改变克隆的数组：\n\n```js\nvar userReducer = function(state = [], action) {\n  if (action.type === 'ADD_USER') {\n    var newState = state.concat([action.user]);\n    return newState;\n  }\n  return state;\n}\n```\n\n通过对reducer的更新，添加新用户会更改并返回状态参数的副本。不添加新用户时，请注意返回原始状态而不是创建副本。\n\n下面有关于不可变数据结构的一节介绍了这些类型的最佳实践。\n\n您可能还注意到，现在初始状态来自ES2015默认参数。到目前为止，在本系列中，我们避免了ES2015让您专注于主要主题。但是，Redux在ES2015上更加出色。因此，我们会在本文中开始使用ES2015。不要担心，每次使用新的ES2015功能时，都会指出并解释。\n\n## 多Reducer\n\n最后一个例子是一个很好的入门，但是大多数应用程序在整个应用程序中需要更复杂的状态。由于Redux只使用一个存储，因此我们需要使用嵌套对象将状态组织到不同的部分。让我们想象我们希望我们的存储类似于这个对象：\n\n```js\n{\n  userState: { ... },\n  widgetState: { ... }\n}\n```\n\n对于整个应用程序来说，它仍然是“一个存储=一个对象”，但它具有可以包含各种数据的`userState`和`widgetState`的嵌套对象。这可能看起来过于简单化，但实际上它与真正的Redux存储相去不远。为了使用嵌套对象创建存储，我们需要用reducer定义每个部分：\n\n```js\nimport { createStore, combineReducers } from 'redux';\n\n// The User Reducer\nconst userReducer = function(state = {}, action) {\n  return state;\n}\n\n// The Widget Reducer\nconst widgetReducer = function(state = {}, action) {\n  return state;\n}\n\n// Combine Reducers\nconst reducers = combineReducers({\n  userState: userReducer,\n  widgetState: widgetReducer\n});\n\nconst store = createStore(reducers);\n```\n\n`combineReducers（）`允许我们根据不同的逻辑部分来描述我们的存储，并将reducer分配给每个部分。现在，当每个reducer返回初始状态时，该状态将进入其各自的`storeState`或`widgetState`部分。\n\n值得注意的是，现在，每个reducer都会通过其整体状态的各个子部分，而不是整个存储的状态值，就像one-reducer示例一样。然后从每个reducer返回的状态适用于其子部分。\n\n## 分发行动之后调用哪个reducer\n\n所有的reducers。如果我们认为每次发布操作时都会将reducer与漏斗进行比较，那么所有reducer都将被调用，并且将有机会更新其各自的状态：\n![dispatch](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-05.svg)\n\n我仔细地说“他们的”状态，因为reducer的“当前状态”参数及其返回的“更新后的”状态仅影响存储的reducer的部分。请记住，正如前一节所述，每个reducer只能通过其各自的状态，而不是整个状态。\n\n## 动作策略\n\n实际上有很多创建和管理动作和动作类型的策略。虽然他们很好，但并不像本文中的其他信息那么重要。为了保持文章更短，我们已经记录了你该知道的基本策略在[github仓库](https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/master/guide-3-redux/docs/action-strategies.md)。\n\n## 不可变数据结构\n\n> 状态的结构取决于你：它可以是一个原始结构，一个数组，一个对象或者甚至是一个Immutable.js 数据结构。唯一重要的部分是“你不能改变状态对象，而是返回一个新的状态变更后的状态对象”--[Redux docs](https://github.com/reactjs/redux#the-gist)\n\n该声明说了很多,同时我们已经在本教程中提到了这一点。我只会强调一些要点。\n\n首先：\n\n* js原始数据类型（Number, String, Boolean, Undefined, Null）是不可变的\n* Objects, arrays,  functions 是可变的\n\n有人说过，数据结构上的可变性很容易出现错误。由于我们的存储将由状态对象和数组组成，因此我们需要实施一个策略来保持状态不变。\n\n让我们想象一个我们需要改变属性的状态对象。这里有三种方法：\n\n```js\n// Example One\nstate.foo = '123';\n\n// Example Two\nObject.assign(state, { foo: 123 });\n\n// Example Three\nvar newState = Object.assign({}, state, { foo: 123 });\n```\n\n第一个和第二个例子改变了状态对象。第二个例子改变是因为`Object.assign()`方法合并所有的参数到第一个参数中。但这也是为什么第三个例子不会改变状态的原因。\n\n第三个例子合并`state`和`{foo: 123}`到一个新的空对象。这是一个常见的技巧，它使我们能够在不影响原始状态的情况下创建状态副本并对副本进行变更。\n\n对象“传播运算符”是保持状态不变的另一种方法：\n\n```js\nconst newState = { ...state, foo: 123 };\n```\n\n## 初始化状态和时间旅行\n\n如果你阅读了[文档](http://redux.js.org/docs/api/createStore.html),你可能意识到`createStore()`的第二个参数，是为了`initial state`。这看起来像是reducer创建初始状态的替代方案。但是，这个初始状态只能用于“state hydration”。\n\n想象一下，用户会对SPA进行刷新，并且存储的状态将重置为reducer初始状态。这可能不是用户所期望的。\n\n相反，想象一下，您可以使用策略来固化存储，然后您可以在刷新时将其重新水合到Redux中。这是将初始状态发送到`createStore（）`的原因。\n\n## Redux with React\n\n正如我们已经讨论过的，Redux是框架无关的。先了解Redux的核心概念，然后再考虑它如何与React协同工作。但是现在我们准备从上一篇文章中获取一个容器组件，并将Redux应用到它。\n\n首先，这里是没有Redux的原始组件：\n\n```js\nimport React from 'react';\nimport axios from 'axios';\nimport UserList from '../views/list-user';\n\nconst UserListContainer = React.createClass({\n  getInitialState: function() {\n    return {\n      users: []\n    };\n  },\n\n  componentDidMount: function() {\n    axios.get('/path/to/user-api').then(response => {\n      this.setState({users: response.data});\n    });\n  },\n\n  render: function() {\n    return <UserList users={this.state.users} />;\n  }\n});\n\nexport default UserListContainer;\n```\n\n当然，它会执行它的Ajax请求并更新它自己的本地状态。但如果应用程序中的其他区域需要根据新获得的用户列表进行更改，则此策略是不够的。\n\n使用Redux策略，我们可以在Ajax请求返回时调度一个动作，而不是执行`this.setState（）`。然后这个组件和其他人可以订阅状态更改。但是这实际上给我们带来了一个问题，我们如何设置`store.subscribe（）`来更新组件的状态？\n\n我想我可以提供几个手动将组件连接到Redux存储的示例。你甚至可以想象如何用你自己的方法来处理。但最终，在这些例子的最后，我会解释说有更好的方法，忘记手动例子。然后我将介绍名为r[eact-redux](http://redux.js.org/docs/basics/UsageWithReact.html)的官方React / Redux绑定模块。所以让我们直接跳到这一点。\n\n## Connecting with react-redux\n\n为了清楚起见，`react`，`redux`和`react-redux`是npm上的三个独立模块。`react-redux`模块使我们能够以更方便的方式将`React`组件连接到`Redux`。\n\n如下：\n\n```js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport store from '../path/to/store';\nimport axios from 'axios';\nimport UserList from '../views/list-user';\n\nconst UserListContainer = React.createClass({\n  componentDidMount: function() {\n    axios.get('/path/to/user-api').then(response => {\n      store.dispatch({\n        type: 'USER_LIST_SUCCESS',\n        users: response.data\n      });\n    });\n  },\n\n  render: function() {\n    return <UserList users={this.props.users} />;\n  }\n});\n\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n\nexport default connect(mapStateToProps)(UserListContainer);\n```\n\n上面代码做了以下事情：\n\n1. 从`react-redux`导入`connect`方法\n2. 从下向上看代码。`connect`方法其实有两个参数，但是我们值提供了一个`mapStateToProps()`。\n3. `connect()`方法的第一个参数是一个函数返回一个对象。对象的属性会变为组件的`props`。可以在状态中看到他们。现在，我希望函数名“mapStateToProps”更有意义。另请注意，`mapStateToProps（）`将收到一个参数，它是整个Redux存储的参数。`mapStateToProps（）`的主要思想是将组件需要的整体状态的哪些部分作为其`props`。\n4. 由于第三条的原因我们不在需要`getInitialState()`。我们使用`this.props.users`替代`this.state.users`，因为`users `现在是一个道具而不是本地组件状态。\n5. Ajax返回现在调度一个操作，而不是更新本地组件状态。\n\n示例代码假设用户reducer的工作原理可能并不明显。注意存储如何拥有userState属性。但是这个名字来自哪里？\n\n```js\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n```\n\n这个名字来自我们结合我们的reducer的时候:\n\n```js\nconst reducers = combineReducers({\n  userState: userReducer,\n  widgetState: widgetReducer\n});\n```\n\n虽然我们没有为示例显示实际的reducer（因为它将在另一个文件中），但它是确定其各自状态的子属性的reducer。为了确保`.users`是`userState`的属性，这些示例的缩减器可能如下所示：\n\n```js\nconst initialUserState = {\n  users: []\n}\n\nconst userReducer = function(state = initialUserState, action) {\n  switch(action.type) {\n  case 'USER_LIST_SUCCESS':\n    return Object.assign({}, state, { users: action.users });\n  }\n  return state;\n}\n```\n\n## Ajax Lifecycle Dispatches\n\n在我们的Ajax示例中，我们只调度了一个动作。它故意被称为“USER_LIST_SUCCESS”，因为我们可能还希望在Ajax启动前发送'USER_LIST_REQUEST'，在Ajax发生故障时发送'USER_LIST_FAILED'。请务必阅读有关[异步操作](http://redux.js.org/docs/advanced/AsyncActions.html)的文档。\n\n## Dispatching from Events\n\n在之前的文章中，我们看到事件应该从容器组件传递到展示组件。事实证明，在事件只需发送一个动作的情况下，react-redux同样有效：\n\n```js\nconst mapDispatchToProps = function(dispatch, ownProps) {\n  return {\n    toggleActive: function() {\n      dispatch({ ... });\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserListContainer);\n```\n\n在展示组件中，我们可以像以前那样做`onClick = {this.props.toggleActive}`，但是这次我们不必自己编写事件。\n\n## Container Component Omission\n\n有时，容器组件只需要订阅存储，并且不需要像`componentDidMount（）`这样的方法来启动Ajax请求。它可能只需要一个`render（）`方法将状态传递给展示组件。在这种情况下，我们可以通过以下方式创建一个容器组件：\n\n```js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport UserList from '../views/list-user';\n\nconst mapStateToProps = function(store) {\n  return {\n    users: store.userState.users\n  };\n}\n\nexport default connect(mapStateToProps)(UserList);\n```\n\n是的，这是我们新的容器组件的整个文件。但是请等待，容器组件在哪里？我们为什么不在这里使用`React.createClass（）`？\n\n事实证明，`connect（）`为我们创建了一个容器组件。注意这次我们直接传递了展示组件，而不是传入自己创建的容器组件。如果您真的想到容器组件所做的事情，请记住它们存在以允许演示组件只关注视图而不关注状态。他们也以属性形式将状态传递给子视图。这正是`connect（）`所做的 - 它将状态（通过props）传递给我们的展示组件，并实际返回一个包装容器组件的React组件。实质上，该包装器是一个容器组件。\n\n那么这是否意味着之前的例子实际上是两个包装展示性的容器组件？当然，你可以这样想。但这不是问题，只有当我们的容器组件需要除`render（）`之外的更多React方法时才有必要。\n\n将这两个容器组件看作服务于不同但相关的角色:\n![presentational](https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-06.svg)\n\n嗯，也许这就是为什么React标志看起来像一个原子！\n\n## Provider\n\n为了使这个`react-redux`代码正常工作，您需要让应用程序知道如何将`react-redux`与`<Provider />`组件一起使用。这个组件包装你的整个React应用程序。如果您使用的是React Router，它将如下所示：\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport router from './router';\n\nReactDOM.render(\n  <Provider store={store}>{router}</Provider>,\n  document.getElementById('root')\n);\n```\n\n被附加在`Provider`上的存储是通过``react-redux``真正“连接”React和Redux。\n\n## Redux with React Router\n\n这不是必需的，但还有另一个名为`react-router-redux`的`npm`项目。由于路由在技术上属于UI状态的一部分，并且React Router不知道Redux，因此该项目有助于将两者联系起来。\n\n你看到我在那里做了什么？我们走了一圈，然后回到第一篇文章！# \n\n## Final Project\n\n本系列的[最终项目指南](https://github.com/bradwestfall/CSS-Tricks-React-Series/tree/master/guide-3-redux)允许您创建一个小的“用户和小部件”单页应用程序：\n![final](https://raw.githubusercontent.com/bradwestfall/CSS-Tricks-React-Series/master/guide-3-redux/docs/preview.gif)\n\n与本系列中的其他文章一样，每个文章都附带了一份指南，该指南更详细地介绍了指南在GitHub中的工作方式。\n\n## Summary\n\n我真的很希望你喜欢这个系列，就像我写的一样。我意识到有很多关于React的话题我们没有涉及（表格为一），但我试图保持真实的前提，即我想让新用户了解如何通过基本知识以及制作单页应用程序的感受。\n\n## 系列文章\n\n**第一部分：[React Router](https://css-tricks.com/learning-react-router/)\n\n**第二部分：[Container Components](https://css-tricks.com/learning-react-container-components/)\n\n**第三部分：Redux\n","slug":"react-redux","published":1,"updated":"2018-06-20T03:06:39.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8id001nvqqj10m1dcrr","content":"<p><a href=\"https://css-tricks.com/learning-react-redux/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>Redux是一个在js应用中用来管理数据状态和UI状态的工具。对于管理随着时间的推移而变得复杂的单页应用程序（SPA）来说，它非常理想。它是框架无关的，虽然它由React编写，但是它同样可以在Anjular或者jQuery应用中使用。</p>\n<p>此外，它是从一个“时间旅行”的实验中构思出来的 - 事实是，我们将在以后做到这一点！</p>\n<p>正如我们之前的教程所见到的，React通过组件流转数据。进一步说，称之为“单向数据流”–数据从父组件流向子组件。因为这个特性，两个非父子关系的组件如何在React中进行通信并不明显：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-01.svg\" alt=\"flow\"></p>\n<p>React不建议以这种方式直接进行组件间通信。即使它确实有支持这种方法的能力，但它被认为是很糟糕的做法，因为直接的组件间通信很容易出错，并导致意大利面代码 - 一个难以遵循的旧代码术语。</p>\n<p>React提供了一个建议，但他们希望你自己实现它。下面是React文档的一部分节选：</p>\n<blockquote>\n<p> 对于两个没有父子关系的组件之间的通信，你可以设置自己的全局事件系统。Flux模式是一个可行的方案。</p>\n</blockquote>\n<p>这就是Redux的用武之地。Redux提供了将所有应用程序状态存储在一个地方的解决方案，称为“存储”。组件然后将状态更改“分派”给存储，而不是直接传递给其他组件。需要了解状态更改的组件可以“订阅”存储：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-02.svg\" alt=\"redux\"></p>\n<p>存储可以被认为是应用中所有状态变化的“中间人”。因为Redux的参与，组件之间不直接通信，而是所有的状态变换都要通过存储这个单一数据源。</p>\n<p>这与部分应用程序直接相互通信的其他策略有很大不同。有时候，这些策略被认为是容易出错和混淆的原因如下：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg\" alt=\"other\"></p>\n<p>显而易见，借助Redux，所有组件都可以从商店获取其状态。同样清楚的是，组件应该发送状态更改 - 也就是存储。发起更改的组件只需要关注将更改分派给存储，而不必担心需要状态更改的其他组件。这就是Redux如何使数据流更易于推理。</p>\n<p>使用存储来协调应用状态的概念就是Flux模式。这是一种设计模式，可以像React一样支持单向数据流体系结构。Redux很像Flux，但是它们有多相似呢？</p>\n<h2 id=\"Redux-是类Flux\"><a href=\"#Redux-是类Flux\" class=\"headerlink\" title=\"Redux 是类Flux\"></a>Redux 是类Flux</h2><p>Flux是一种模式，而不是类似Redux的工具，所以它不是你可以下载的东西。Redux是一个受Flux模式启发的工具，还包括其他的东西比如Elm。有很多比较Redux和Flux的指南。他们中的大多数人会得出结论，Redux是Flux或者是类似Flux的，这取决于我们如何严格定义Flux的规则。最终，这并不重要。Facebook非常喜欢并支持Redux，因此他们聘请了其主要开发人员Dan Abramov。</p>\n<p>本文假定您不熟悉Flux模式。但如果你是，你会发现一些小的差异，特别是Redux的三大指导原则：</p>\n<h3 id=\"1-真相的唯一来源\"><a href=\"#1-真相的唯一来源\" class=\"headerlink\" title=\"1. 真相的唯一来源\"></a>1. 真相的唯一来源</h3><p>Redux仅为其所有应用程序状态使用一个存储。由于所有状态都驻留在一个地方，Redux称这是真相的唯一来源。</p>\n<p>存储的数据结构最终取决于您，但在实际应用程序中它通常是一个深层嵌套对象。</p>\n<p>Redux的这种单存储方法是它与Flux的多存储方法之间的主要区别之一。</p>\n<h3 id=\"2-状态是只读的\"><a href=\"#2-状态是只读的\" class=\"headerlink\" title=\"2. 状态是只读的\"></a>2. 状态是只读的</h3><p>根据Redux的文档，“改变状态的唯一途径就是发出一个描述是发生了何事的动作对象”。</p>\n<p>这就意味着应用不能直接修改状态。相反，“动作”是被分发用来改变存储中的状态。</p>\n<p>存储对象自身有一个包含四个方法的API：</p>\n<ul>\n<li>store.dispatch(action)</li>\n<li>store.subscribe(listener)</li>\n<li>store.getState()</li>\n<li>replaceReducer(nextReducer)</li>\n</ul>\n<p>如你所见，没有设置状态的方法。因此，分发一个动作是应用代码表示状态变换的唯一途径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_USER'</span>,</span><br><span class=\"line\">  user: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Dan'</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming a store object has been created already</span></span><br><span class=\"line\">store.dispatch(action);</span><br></pre></td></tr></table></figure>\n<p><code>dispatch()</code>方法发送一个动作对象给Redux。这个动作可以被描述为一个“有效载荷”，它携带一个<code>type</code>和用来更新状态的所有其他数据 - 上面例子中式用户信息。请记住，在<code>type</code>属性之后，操作对象的设计取决于您。</p>\n<h3 id=\"3-使用纯函数进行更改状态\"><a href=\"#3-使用纯函数进行更改状态\" class=\"headerlink\" title=\"3. 使用纯函数进行更改状态\"></a>3. 使用纯函数进行更改状态</h3><p>如上所述，Redux不允许应用程序直接更改状态。相反，分发的动作“描述”状态变化和改变状态的意图。Reducers是您编写的处理调度动作并可以实际更改状态的函数。</p>\n<p>一个reducer将当前状态作为参数，并且只能通过返回新状态来修改状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Reducer Function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reducers应该是“纯函数”，“纯函数”是具有以下特征的功能的函数：</p>\n<ul>\n<li>它不会进行外部网络或数据库调用</li>\n<li>其返回值完全取决于其参数的值</li>\n<li>参数应该被认为是“不可变的”，这意味着它们不应该改变。</li>\n<li>使用同一组参数调用纯函数将始终返回相同的值。</li>\n</ul>\n<p>他们之所以被称为“纯粹”是因为它们什么都不做只根据参数返回基于参数的结果。他们对系统的任何其他部分没有副作用。</p>\n<h2 id=\"我们第一个Redux存储\"><a href=\"#我们第一个Redux存储\" class=\"headerlink\" title=\"我们第一个Redux存储\"></a>我们第一个Redux存储</h2><p>首先，使用<code>Redux.createStore()</code>创建一个存储，并将所有reducer作为参数传递。我们来看一下只有一个reducer的简单例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Note that using .push() in this way isn't the</span></span><br><span class=\"line\"><span class=\"comment\">// best approach. It's just the easiest to show</span></span><br><span class=\"line\"><span class=\"comment\">// for this example. We'll explain why in the next section.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Reducer Function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (state === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    state = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'ADD_USER'</span>) &#123;</span><br><span class=\"line\">    state.push(action.user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a store by passing in the reducer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = Redux.createStore(userReducer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dispatch our first action to express an intent to change the state</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_USER'</span>,</span><br><span class=\"line\">  user: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Dan'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>下面是代码的简要说明：</p>\n<ol>\n<li>存储创建附带一个reducer</li>\n<li>reducer初始化存储为一个空数组。</li>\n<li>动作分发创建一个用户</li>\n<li>reducer添加用户用到state更新存储并返回。</li>\n</ol>\n<p><strong>reducer被调用了两次</strong>–一次是在存储创建的时候，然后分发之后又调用了执行了。</p>\n<p>当存储被创建，Redux立即调用reducers并使用它们的返回值作为初始化状态。第一次调用reducer返回<code>undefined</code>给状态。Reducer代码预计到这一点，并返回一个空数组来初始化存储的初始状态。每次调度动作时也会调用reducer。由于从reducer返回的状态将成为我们在存储中的新状态，<strong>Redux总是期望reducer返回状态。</strong></p>\n<p>在这个例子中，在分发之后第二次调用reducer。请记住，分派的动作描述了更改状态的意图，并且通常会携带新状态的数据。这一次，Redux将当前状态（仍是一个空数组）与action对象一起传递给reducer。动作对象现在具有<code>ADD_USER</code>类型属性，让reducer知道如何更改状态。</p>\n<p>很容易将reducer想象为允许状态通过的漏斗。这是因为reducers总是收到并返回状态以更新存储：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-04.svg\" alt=\"reducers\"></p>\n<p>基于该示例，我们的存储现在将成为一个包含一个用户对象的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.getState();   <span class=\"comment\">// =&gt; [&#123;name: 'Dan'&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"不要变动状态，拷贝它\"><a href=\"#不要变动状态，拷贝它\" class=\"headerlink\" title=\"不要变动状态，拷贝它\"></a>不要变动状态，拷贝它</h2><p>虽然我们例子中的reducer在技术上起作用，但它改变状态这种做法很差的方式。尽管reducer负责改变状态，但不应该直接改变“当前状态”参数。这就是为什么我们不应该在reducer的状态参数中使用<code>.push（）</code>这种突变方法。</p>\n<p>传递给reducer的参数应该被认为是不可变的。换句话说，他们不能被直接修改。相比直接修改，我们可以使用<code>.concat()</code>这样的非变异方法来克隆一个数组，然后我们改变克隆的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = [], action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'ADD_USER'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newState = state.concat([action.user]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过对reducer的更新，添加新用户会更改并返回状态参数的副本。不添加新用户时，请注意返回原始状态而不是创建副本。</p>\n<p>下面有关于不可变数据结构的一节介绍了这些类型的最佳实践。</p>\n<p>您可能还注意到，现在初始状态来自ES2015默认参数。到目前为止，在本系列中，我们避免了ES2015让您专注于主要主题。但是，Redux在ES2015上更加出色。因此，我们会在本文中开始使用ES2015。不要担心，每次使用新的ES2015功能时，都会指出并解释。</p>\n<h2 id=\"多Reducer\"><a href=\"#多Reducer\" class=\"headerlink\" title=\"多Reducer\"></a>多Reducer</h2><p>最后一个例子是一个很好的入门，但是大多数应用程序在整个应用程序中需要更复杂的状态。由于Redux只使用一个存储，因此我们需要使用嵌套对象将状态组织到不同的部分。让我们想象我们希望我们的存储类似于这个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  userState: &#123; ... &#125;,</span><br><span class=\"line\">  widgetState: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于整个应用程序来说，它仍然是“一个存储=一个对象”，但它具有可以包含各种数据的<code>userState</code>和<code>widgetState</code>的嵌套对象。这可能看起来过于简单化，但实际上它与真正的Redux存储相去不远。为了使用嵌套对象创建存储，我们需要用reducer定义每个部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The User Reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Widget Reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> widgetReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Combine Reducers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducers = combineReducers(&#123;</span><br><span class=\"line\">  userState: userReducer,</span><br><span class=\"line\">  widgetState: widgetReducer</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducers);</span><br></pre></td></tr></table></figure>\n<p><code>combineReducers（）</code>允许我们根据不同的逻辑部分来描述我们的存储，并将reducer分配给每个部分。现在，当每个reducer返回初始状态时，该状态将进入其各自的<code>storeState</code>或<code>widgetState</code>部分。</p>\n<p>值得注意的是，现在，每个reducer都会通过其整体状态的各个子部分，而不是整个存储的状态值，就像one-reducer示例一样。然后从每个reducer返回的状态适用于其子部分。</p>\n<h2 id=\"分发行动之后调用哪个reducer\"><a href=\"#分发行动之后调用哪个reducer\" class=\"headerlink\" title=\"分发行动之后调用哪个reducer\"></a>分发行动之后调用哪个reducer</h2><p>所有的reducers。如果我们认为每次发布操作时都会将reducer与漏斗进行比较，那么所有reducer都将被调用，并且将有机会更新其各自的状态：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-05.svg\" alt=\"dispatch\"></p>\n<p>我仔细地说“他们的”状态，因为reducer的“当前状态”参数及其返回的“更新后的”状态仅影响存储的reducer的部分。请记住，正如前一节所述，每个reducer只能通过其各自的状态，而不是整个状态。</p>\n<h2 id=\"动作策略\"><a href=\"#动作策略\" class=\"headerlink\" title=\"动作策略\"></a>动作策略</h2><p>实际上有很多创建和管理动作和动作类型的策略。虽然他们很好，但并不像本文中的其他信息那么重要。为了保持文章更短，我们已经记录了你该知道的基本策略在<a href=\"https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/master/guide-3-redux/docs/action-strategies.md\" target=\"_blank\" rel=\"noopener\">github仓库</a>。</p>\n<h2 id=\"不可变数据结构\"><a href=\"#不可变数据结构\" class=\"headerlink\" title=\"不可变数据结构\"></a>不可变数据结构</h2><blockquote>\n<p>状态的结构取决于你：它可以是一个原始结构，一个数组，一个对象或者甚至是一个Immutable.js 数据结构。唯一重要的部分是“你不能改变状态对象，而是返回一个新的状态变更后的状态对象”–<a href=\"https://github.com/reactjs/redux#the-gist\" target=\"_blank\" rel=\"noopener\">Redux docs</a></p>\n</blockquote>\n<p>该声明说了很多,同时我们已经在本教程中提到了这一点。我只会强调一些要点。</p>\n<p>首先：</p>\n<ul>\n<li>js原始数据类型（Number, String, Boolean, Undefined, Null）是不可变的</li>\n<li>Objects, arrays,  functions 是可变的</li>\n</ul>\n<p>有人说过，数据结构上的可变性很容易出现错误。由于我们的存储将由状态对象和数组组成，因此我们需要实施一个策略来保持状态不变。</p>\n<p>让我们想象一个我们需要改变属性的状态对象。这里有三种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example One</span></span><br><span class=\"line\">state.foo = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example Two</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(state, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example Three</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newState = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个和第二个例子改变了状态对象。第二个例子改变是因为<code>Object.assign()</code>方法合并所有的参数到第一个参数中。但这也是为什么第三个例子不会改变状态的原因。</p>\n<p>第三个例子合并<code>state</code>和<code>{foo: 123}</code>到一个新的空对象。这是一个常见的技巧，它使我们能够在不影响原始状态的情况下创建状态副本并对副本进行变更。</p>\n<p>对象“传播运算符”是保持状态不变的另一种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newState = &#123; ...state, <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化状态和时间旅行\"><a href=\"#初始化状态和时间旅行\" class=\"headerlink\" title=\"初始化状态和时间旅行\"></a>初始化状态和时间旅行</h2><p>如果你阅读了<a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"noopener\">文档</a>,你可能意识到<code>createStore()</code>的第二个参数，是为了<code>initial state</code>。这看起来像是reducer创建初始状态的替代方案。但是，这个初始状态只能用于“state hydration”。</p>\n<p>想象一下，用户会对SPA进行刷新，并且存储的状态将重置为reducer初始状态。这可能不是用户所期望的。</p>\n<p>相反，想象一下，您可以使用策略来固化存储，然后您可以在刷新时将其重新水合到Redux中。这是将初始状态发送到<code>createStore（）</code>的原因。</p>\n<h2 id=\"Redux-with-React\"><a href=\"#Redux-with-React\" class=\"headerlink\" title=\"Redux with React\"></a>Redux with React</h2><p>正如我们已经讨论过的，Redux是框架无关的。先了解Redux的核心概念，然后再考虑它如何与React协同工作。但是现在我们准备从上一篇文章中获取一个容器组件，并将Redux应用到它。</p>\n<p>首先，这里是没有Redux的原始组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserListContainer = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      users: []</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/path/to/user-api'</span>).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">users</span>: response.data&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> <span class=\"attr\">users</span>=<span class=\"string\">&#123;this.state.users&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">export default UserListContainer;</span></span><br></pre></td></tr></table></figure>\n<p>当然，它会执行它的Ajax请求并更新它自己的本地状态。但如果应用程序中的其他区域需要根据新获得的用户列表进行更改，则此策略是不够的。</p>\n<p>使用Redux策略，我们可以在Ajax请求返回时调度一个动作，而不是执行<code>this.setState（）</code>。然后这个组件和其他人可以订阅状态更改。但是这实际上给我们带来了一个问题，我们如何设置<code>store.subscribe（）</code>来更新组件的状态？</p>\n<p>我想我可以提供几个手动将组件连接到Redux存储的示例。你甚至可以想象如何用你自己的方法来处理。但最终，在这些例子的最后，我会解释说有更好的方法，忘记手动例子。然后我将介绍名为r<a href=\"http://redux.js.org/docs/basics/UsageWithReact.html\" target=\"_blank\" rel=\"noopener\">eact-redux</a>的官方React / Redux绑定模块。所以让我们直接跳到这一点。</p>\n<h2 id=\"Connecting-with-react-redux\"><a href=\"#Connecting-with-react-redux\" class=\"headerlink\" title=\"Connecting with react-redux\"></a>Connecting with react-redux</h2><p>为了清楚起见，<code>react</code>，<code>redux</code>和<code>react-redux</code>是npm上的三个独立模块。<code>react-redux</code>模块使我们能够以更方便的方式将<code>React</code>组件连接到<code>Redux</code>。</p>\n<p>如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../path/to/store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserListContainer = React.createClass(&#123;</span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/path/to/user-api'</span>).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      store.dispatch(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'USER_LIST_SUCCESS'</span>,</span><br><span class=\"line\">        users: response.data</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> <span class=\"attr\">users</span>=<span class=\"string\">&#123;this.props.users&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">const mapStateToProps = function(store) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  return &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    users: store.userState.users</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">export default connect(mapStateToProps)(UserListContainer);</span></span><br></pre></td></tr></table></figure>\n<p>上面代码做了以下事情：</p>\n<ol>\n<li>从<code>react-redux</code>导入<code>connect</code>方法</li>\n<li>从下向上看代码。<code>connect</code>方法其实有两个参数，但是我们值提供了一个<code>mapStateToProps()</code>。</li>\n<li><code>connect()</code>方法的第一个参数是一个函数返回一个对象。对象的属性会变为组件的<code>props</code>。可以在状态中看到他们。现在，我希望函数名“mapStateToProps”更有意义。另请注意，<code>mapStateToProps（）</code>将收到一个参数，它是整个Redux存储的参数。<code>mapStateToProps（）</code>的主要思想是将组件需要的整体状态的哪些部分作为其<code>props</code>。</li>\n<li>由于第三条的原因我们不在需要<code>getInitialState()</code>。我们使用<code>this.props.users</code>替代<code>this.state.users</code>，因为<code>users</code>现在是一个道具而不是本地组件状态。</li>\n<li>Ajax返回现在调度一个操作，而不是更新本地组件状态。</li>\n</ol>\n<p>示例代码假设用户reducer的工作原理可能并不明显。注意存储如何拥有userState属性。但是这个名字来自哪里？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    users: store.userState.users</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个名字来自我们结合我们的reducer的时候:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducers = combineReducers(&#123;</span><br><span class=\"line\">  userState: userReducer,</span><br><span class=\"line\">  widgetState: widgetReducer</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>虽然我们没有为示例显示实际的reducer（因为它将在另一个文件中），但它是确定其各自状态的子属性的reducer。为了确保<code>.users</code>是<code>userState</code>的属性，这些示例的缩减器可能如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialUserState = &#123;</span><br><span class=\"line\">  users: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = initialUserState, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'USER_LIST_SUCCESS'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123; <span class=\"attr\">users</span>: action.users &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Lifecycle-Dispatches\"><a href=\"#Ajax-Lifecycle-Dispatches\" class=\"headerlink\" title=\"Ajax Lifecycle Dispatches\"></a>Ajax Lifecycle Dispatches</h2><p>在我们的Ajax示例中，我们只调度了一个动作。它故意被称为“USER_LIST_SUCCESS”，因为我们可能还希望在Ajax启动前发送’USER_LIST_REQUEST’，在Ajax发生故障时发送’USER_LIST_FAILED’。请务必阅读有关<a href=\"http://redux.js.org/docs/advanced/AsyncActions.html\" target=\"_blank\" rel=\"noopener\">异步操作</a>的文档。</p>\n<h2 id=\"Dispatching-from-Events\"><a href=\"#Dispatching-from-Events\" class=\"headerlink\" title=\"Dispatching from Events\"></a>Dispatching from Events</h2><p>在之前的文章中，我们看到事件应该从容器组件传递到展示组件。事实证明，在事件只需发送一个动作的情况下，react-redux同样有效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dispatch, ownProps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    toggleActive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      dispatch(&#123; ... &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</span><br><span class=\"line\">  mapStateToProps,</span><br><span class=\"line\">  mapDispatchToProps</span><br><span class=\"line\">)(UserListContainer);</span><br></pre></td></tr></table></figure>\n<p>在展示组件中，我们可以像以前那样做<code>onClick = {this.props.toggleActive}</code>，但是这次我们不必自己编写事件。</p>\n<h2 id=\"Container-Component-Omission\"><a href=\"#Container-Component-Omission\" class=\"headerlink\" title=\"Container Component Omission\"></a>Container Component Omission</h2><p>有时，容器组件只需要订阅存储，并且不需要像<code>componentDidMount（）</code>这样的方法来启动Ajax请求。它可能只需要一个<code>render（）</code>方法将状态传递给展示组件。在这种情况下，我们可以通过以下方式创建一个容器组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    users: store.userState.users</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(UserList);</span><br></pre></td></tr></table></figure>\n<p>是的，这是我们新的容器组件的整个文件。但是请等待，容器组件在哪里？我们为什么不在这里使用<code>React.createClass（）</code>？</p>\n<p>事实证明，<code>connect（）</code>为我们创建了一个容器组件。注意这次我们直接传递了展示组件，而不是传入自己创建的容器组件。如果您真的想到容器组件所做的事情，请记住它们存在以允许演示组件只关注视图而不关注状态。他们也以属性形式将状态传递给子视图。这正是<code>connect（）</code>所做的 - 它将状态（通过props）传递给我们的展示组件，并实际返回一个包装容器组件的React组件。实质上，该包装器是一个容器组件。</p>\n<p>那么这是否意味着之前的例子实际上是两个包装展示性的容器组件？当然，你可以这样想。但这不是问题，只有当我们的容器组件需要除<code>render（）</code>之外的更多React方法时才有必要。</p>\n<p>将这两个容器组件看作服务于不同但相关的角色:<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-06.svg\" alt=\"presentational\"></p>\n<p>嗯，也许这就是为什么React标志看起来像一个原子！</p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><p>为了使这个<code>react-redux</code>代码正常工作，您需要让应用程序知道如何将<code>react-redux</code>与<code>&lt;Provider /&gt;</code>组件一起使用。这个组件包装你的整个React应用程序。如果您使用的是React Router，它将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;&#123;router&#125;&lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>被附加在<code>Provider</code>上的存储是通过<code>react-redux</code>真正“连接”React和Redux。</p>\n<h2 id=\"Redux-with-React-Router\"><a href=\"#Redux-with-React-Router\" class=\"headerlink\" title=\"Redux with React Router\"></a>Redux with React Router</h2><p>这不是必需的，但还有另一个名为<code>react-router-redux</code>的<code>npm</code>项目。由于路由在技术上属于UI状态的一部分，并且React Router不知道Redux，因此该项目有助于将两者联系起来。</p>\n<p>你看到我在那里做了什么？我们走了一圈，然后回到第一篇文章！# </p>\n<h2 id=\"Final-Project\"><a href=\"#Final-Project\" class=\"headerlink\" title=\"Final Project\"></a>Final Project</h2><p>本系列的<a href=\"https://github.com/bradwestfall/CSS-Tricks-React-Series/tree/master/guide-3-redux\" target=\"_blank\" rel=\"noopener\">最终项目指南</a>允许您创建一个小的“用户和小部件”单页应用程序：<br><img src=\"https://raw.githubusercontent.com/bradwestfall/CSS-Tricks-React-Series/master/guide-3-redux/docs/preview.gif\" alt=\"final\"></p>\n<p>与本系列中的其他文章一样，每个文章都附带了一份指南，该指南更详细地介绍了指南在GitHub中的工作方式。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>我真的很希望你喜欢这个系列，就像我写的一样。我意识到有很多关于React的话题我们没有涉及（表格为一），但我试图保持真实的前提，即我想让新用户了解如何通过基本知识以及制作单页应用程序的感受。</p>\n<h2 id=\"系列文章\"><a href=\"#系列文章\" class=\"headerlink\" title=\"系列文章\"></a>系列文章</h2><p>**第一部分：<a href=\"https://css-tricks.com/learning-react-router/\" target=\"_blank\" rel=\"noopener\">React Router</a></p>\n<p>**第二部分：<a href=\"https://css-tricks.com/learning-react-container-components/\" target=\"_blank\" rel=\"noopener\">Container Components</a></p>\n<p>**第三部分：Redux</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://css-tricks.com/learning-react-redux/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>Redux是一个在js应用中用来管理数据状态和UI状态的工具。对于管理随着时间的推移而变得复杂的单页应用程序（SPA）来说，它非常理想。它是框架无关的，虽然它由React编写，但是它同样可以在Anjular或者jQuery应用中使用。</p>\n<p>此外，它是从一个“时间旅行”的实验中构思出来的 - 事实是，我们将在以后做到这一点！</p>\n<p>正如我们之前的教程所见到的，React通过组件流转数据。进一步说，称之为“单向数据流”–数据从父组件流向子组件。因为这个特性，两个非父子关系的组件如何在React中进行通信并不明显：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-01.svg\" alt=\"flow\"></p>\n<p>React不建议以这种方式直接进行组件间通信。即使它确实有支持这种方法的能力，但它被认为是很糟糕的做法，因为直接的组件间通信很容易出错，并导致意大利面代码 - 一个难以遵循的旧代码术语。</p>\n<p>React提供了一个建议，但他们希望你自己实现它。下面是React文档的一部分节选：</p>\n<blockquote>\n<p> 对于两个没有父子关系的组件之间的通信，你可以设置自己的全局事件系统。Flux模式是一个可行的方案。</p>\n</blockquote>\n<p>这就是Redux的用武之地。Redux提供了将所有应用程序状态存储在一个地方的解决方案，称为“存储”。组件然后将状态更改“分派”给存储，而不是直接传递给其他组件。需要了解状态更改的组件可以“订阅”存储：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-02.svg\" alt=\"redux\"></p>\n<p>存储可以被认为是应用中所有状态变化的“中间人”。因为Redux的参与，组件之间不直接通信，而是所有的状态变换都要通过存储这个单一数据源。</p>\n<p>这与部分应用程序直接相互通信的其他策略有很大不同。有时候，这些策略被认为是容易出错和混淆的原因如下：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg\" alt=\"other\"></p>\n<p>显而易见，借助Redux，所有组件都可以从商店获取其状态。同样清楚的是，组件应该发送状态更改 - 也就是存储。发起更改的组件只需要关注将更改分派给存储，而不必担心需要状态更改的其他组件。这就是Redux如何使数据流更易于推理。</p>\n<p>使用存储来协调应用状态的概念就是Flux模式。这是一种设计模式，可以像React一样支持单向数据流体系结构。Redux很像Flux，但是它们有多相似呢？</p>\n<h2 id=\"Redux-是类Flux\"><a href=\"#Redux-是类Flux\" class=\"headerlink\" title=\"Redux 是类Flux\"></a>Redux 是类Flux</h2><p>Flux是一种模式，而不是类似Redux的工具，所以它不是你可以下载的东西。Redux是一个受Flux模式启发的工具，还包括其他的东西比如Elm。有很多比较Redux和Flux的指南。他们中的大多数人会得出结论，Redux是Flux或者是类似Flux的，这取决于我们如何严格定义Flux的规则。最终，这并不重要。Facebook非常喜欢并支持Redux，因此他们聘请了其主要开发人员Dan Abramov。</p>\n<p>本文假定您不熟悉Flux模式。但如果你是，你会发现一些小的差异，特别是Redux的三大指导原则：</p>\n<h3 id=\"1-真相的唯一来源\"><a href=\"#1-真相的唯一来源\" class=\"headerlink\" title=\"1. 真相的唯一来源\"></a>1. 真相的唯一来源</h3><p>Redux仅为其所有应用程序状态使用一个存储。由于所有状态都驻留在一个地方，Redux称这是真相的唯一来源。</p>\n<p>存储的数据结构最终取决于您，但在实际应用程序中它通常是一个深层嵌套对象。</p>\n<p>Redux的这种单存储方法是它与Flux的多存储方法之间的主要区别之一。</p>\n<h3 id=\"2-状态是只读的\"><a href=\"#2-状态是只读的\" class=\"headerlink\" title=\"2. 状态是只读的\"></a>2. 状态是只读的</h3><p>根据Redux的文档，“改变状态的唯一途径就是发出一个描述是发生了何事的动作对象”。</p>\n<p>这就意味着应用不能直接修改状态。相反，“动作”是被分发用来改变存储中的状态。</p>\n<p>存储对象自身有一个包含四个方法的API：</p>\n<ul>\n<li>store.dispatch(action)</li>\n<li>store.subscribe(listener)</li>\n<li>store.getState()</li>\n<li>replaceReducer(nextReducer)</li>\n</ul>\n<p>如你所见，没有设置状态的方法。因此，分发一个动作是应用代码表示状态变换的唯一途径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_USER'</span>,</span><br><span class=\"line\">  user: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Dan'</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming a store object has been created already</span></span><br><span class=\"line\">store.dispatch(action);</span><br></pre></td></tr></table></figure>\n<p><code>dispatch()</code>方法发送一个动作对象给Redux。这个动作可以被描述为一个“有效载荷”，它携带一个<code>type</code>和用来更新状态的所有其他数据 - 上面例子中式用户信息。请记住，在<code>type</code>属性之后，操作对象的设计取决于您。</p>\n<h3 id=\"3-使用纯函数进行更改状态\"><a href=\"#3-使用纯函数进行更改状态\" class=\"headerlink\" title=\"3. 使用纯函数进行更改状态\"></a>3. 使用纯函数进行更改状态</h3><p>如上所述，Redux不允许应用程序直接更改状态。相反，分发的动作“描述”状态变化和改变状态的意图。Reducers是您编写的处理调度动作并可以实际更改状态的函数。</p>\n<p>一个reducer将当前状态作为参数，并且只能通过返回新状态来修改状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Reducer Function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reducers应该是“纯函数”，“纯函数”是具有以下特征的功能的函数：</p>\n<ul>\n<li>它不会进行外部网络或数据库调用</li>\n<li>其返回值完全取决于其参数的值</li>\n<li>参数应该被认为是“不可变的”，这意味着它们不应该改变。</li>\n<li>使用同一组参数调用纯函数将始终返回相同的值。</li>\n</ul>\n<p>他们之所以被称为“纯粹”是因为它们什么都不做只根据参数返回基于参数的结果。他们对系统的任何其他部分没有副作用。</p>\n<h2 id=\"我们第一个Redux存储\"><a href=\"#我们第一个Redux存储\" class=\"headerlink\" title=\"我们第一个Redux存储\"></a>我们第一个Redux存储</h2><p>首先，使用<code>Redux.createStore()</code>创建一个存储，并将所有reducer作为参数传递。我们来看一下只有一个reducer的简单例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Note that using .push() in this way isn't the</span></span><br><span class=\"line\"><span class=\"comment\">// best approach. It's just the easiest to show</span></span><br><span class=\"line\"><span class=\"comment\">// for this example. We'll explain why in the next section.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Reducer Function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (state === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    state = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'ADD_USER'</span>) &#123;</span><br><span class=\"line\">    state.push(action.user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a store by passing in the reducer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = Redux.createStore(userReducer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dispatch our first action to express an intent to change the state</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_USER'</span>,</span><br><span class=\"line\">  user: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Dan'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>下面是代码的简要说明：</p>\n<ol>\n<li>存储创建附带一个reducer</li>\n<li>reducer初始化存储为一个空数组。</li>\n<li>动作分发创建一个用户</li>\n<li>reducer添加用户用到state更新存储并返回。</li>\n</ol>\n<p><strong>reducer被调用了两次</strong>–一次是在存储创建的时候，然后分发之后又调用了执行了。</p>\n<p>当存储被创建，Redux立即调用reducers并使用它们的返回值作为初始化状态。第一次调用reducer返回<code>undefined</code>给状态。Reducer代码预计到这一点，并返回一个空数组来初始化存储的初始状态。每次调度动作时也会调用reducer。由于从reducer返回的状态将成为我们在存储中的新状态，<strong>Redux总是期望reducer返回状态。</strong></p>\n<p>在这个例子中，在分发之后第二次调用reducer。请记住，分派的动作描述了更改状态的意图，并且通常会携带新状态的数据。这一次，Redux将当前状态（仍是一个空数组）与action对象一起传递给reducer。动作对象现在具有<code>ADD_USER</code>类型属性，让reducer知道如何更改状态。</p>\n<p>很容易将reducer想象为允许状态通过的漏斗。这是因为reducers总是收到并返回状态以更新存储：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-04.svg\" alt=\"reducers\"></p>\n<p>基于该示例，我们的存储现在将成为一个包含一个用户对象的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.getState();   <span class=\"comment\">// =&gt; [&#123;name: 'Dan'&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"不要变动状态，拷贝它\"><a href=\"#不要变动状态，拷贝它\" class=\"headerlink\" title=\"不要变动状态，拷贝它\"></a>不要变动状态，拷贝它</h2><p>虽然我们例子中的reducer在技术上起作用，但它改变状态这种做法很差的方式。尽管reducer负责改变状态，但不应该直接改变“当前状态”参数。这就是为什么我们不应该在reducer的状态参数中使用<code>.push（）</code>这种突变方法。</p>\n<p>传递给reducer的参数应该被认为是不可变的。换句话说，他们不能被直接修改。相比直接修改，我们可以使用<code>.concat()</code>这样的非变异方法来克隆一个数组，然后我们改变克隆的数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = [], action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'ADD_USER'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newState = state.concat([action.user]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过对reducer的更新，添加新用户会更改并返回状态参数的副本。不添加新用户时，请注意返回原始状态而不是创建副本。</p>\n<p>下面有关于不可变数据结构的一节介绍了这些类型的最佳实践。</p>\n<p>您可能还注意到，现在初始状态来自ES2015默认参数。到目前为止，在本系列中，我们避免了ES2015让您专注于主要主题。但是，Redux在ES2015上更加出色。因此，我们会在本文中开始使用ES2015。不要担心，每次使用新的ES2015功能时，都会指出并解释。</p>\n<h2 id=\"多Reducer\"><a href=\"#多Reducer\" class=\"headerlink\" title=\"多Reducer\"></a>多Reducer</h2><p>最后一个例子是一个很好的入门，但是大多数应用程序在整个应用程序中需要更复杂的状态。由于Redux只使用一个存储，因此我们需要使用嵌套对象将状态组织到不同的部分。让我们想象我们希望我们的存储类似于这个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  userState: &#123; ... &#125;,</span><br><span class=\"line\">  widgetState: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于整个应用程序来说，它仍然是“一个存储=一个对象”，但它具有可以包含各种数据的<code>userState</code>和<code>widgetState</code>的嵌套对象。这可能看起来过于简单化，但实际上它与真正的Redux存储相去不远。为了使用嵌套对象创建存储，我们需要用reducer定义每个部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The User Reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Widget Reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> widgetReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Combine Reducers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducers = combineReducers(&#123;</span><br><span class=\"line\">  userState: userReducer,</span><br><span class=\"line\">  widgetState: widgetReducer</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducers);</span><br></pre></td></tr></table></figure>\n<p><code>combineReducers（）</code>允许我们根据不同的逻辑部分来描述我们的存储，并将reducer分配给每个部分。现在，当每个reducer返回初始状态时，该状态将进入其各自的<code>storeState</code>或<code>widgetState</code>部分。</p>\n<p>值得注意的是，现在，每个reducer都会通过其整体状态的各个子部分，而不是整个存储的状态值，就像one-reducer示例一样。然后从每个reducer返回的状态适用于其子部分。</p>\n<h2 id=\"分发行动之后调用哪个reducer\"><a href=\"#分发行动之后调用哪个reducer\" class=\"headerlink\" title=\"分发行动之后调用哪个reducer\"></a>分发行动之后调用哪个reducer</h2><p>所有的reducers。如果我们认为每次发布操作时都会将reducer与漏斗进行比较，那么所有reducer都将被调用，并且将有机会更新其各自的状态：<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-05.svg\" alt=\"dispatch\"></p>\n<p>我仔细地说“他们的”状态，因为reducer的“当前状态”参数及其返回的“更新后的”状态仅影响存储的reducer的部分。请记住，正如前一节所述，每个reducer只能通过其各自的状态，而不是整个状态。</p>\n<h2 id=\"动作策略\"><a href=\"#动作策略\" class=\"headerlink\" title=\"动作策略\"></a>动作策略</h2><p>实际上有很多创建和管理动作和动作类型的策略。虽然他们很好，但并不像本文中的其他信息那么重要。为了保持文章更短，我们已经记录了你该知道的基本策略在<a href=\"https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/master/guide-3-redux/docs/action-strategies.md\" target=\"_blank\" rel=\"noopener\">github仓库</a>。</p>\n<h2 id=\"不可变数据结构\"><a href=\"#不可变数据结构\" class=\"headerlink\" title=\"不可变数据结构\"></a>不可变数据结构</h2><blockquote>\n<p>状态的结构取决于你：它可以是一个原始结构，一个数组，一个对象或者甚至是一个Immutable.js 数据结构。唯一重要的部分是“你不能改变状态对象，而是返回一个新的状态变更后的状态对象”–<a href=\"https://github.com/reactjs/redux#the-gist\" target=\"_blank\" rel=\"noopener\">Redux docs</a></p>\n</blockquote>\n<p>该声明说了很多,同时我们已经在本教程中提到了这一点。我只会强调一些要点。</p>\n<p>首先：</p>\n<ul>\n<li>js原始数据类型（Number, String, Boolean, Undefined, Null）是不可变的</li>\n<li>Objects, arrays,  functions 是可变的</li>\n</ul>\n<p>有人说过，数据结构上的可变性很容易出现错误。由于我们的存储将由状态对象和数组组成，因此我们需要实施一个策略来保持状态不变。</p>\n<p>让我们想象一个我们需要改变属性的状态对象。这里有三种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example One</span></span><br><span class=\"line\">state.foo = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example Two</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(state, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example Three</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newState = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个和第二个例子改变了状态对象。第二个例子改变是因为<code>Object.assign()</code>方法合并所有的参数到第一个参数中。但这也是为什么第三个例子不会改变状态的原因。</p>\n<p>第三个例子合并<code>state</code>和<code>{foo: 123}</code>到一个新的空对象。这是一个常见的技巧，它使我们能够在不影响原始状态的情况下创建状态副本并对副本进行变更。</p>\n<p>对象“传播运算符”是保持状态不变的另一种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newState = &#123; ...state, <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化状态和时间旅行\"><a href=\"#初始化状态和时间旅行\" class=\"headerlink\" title=\"初始化状态和时间旅行\"></a>初始化状态和时间旅行</h2><p>如果你阅读了<a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"noopener\">文档</a>,你可能意识到<code>createStore()</code>的第二个参数，是为了<code>initial state</code>。这看起来像是reducer创建初始状态的替代方案。但是，这个初始状态只能用于“state hydration”。</p>\n<p>想象一下，用户会对SPA进行刷新，并且存储的状态将重置为reducer初始状态。这可能不是用户所期望的。</p>\n<p>相反，想象一下，您可以使用策略来固化存储，然后您可以在刷新时将其重新水合到Redux中。这是将初始状态发送到<code>createStore（）</code>的原因。</p>\n<h2 id=\"Redux-with-React\"><a href=\"#Redux-with-React\" class=\"headerlink\" title=\"Redux with React\"></a>Redux with React</h2><p>正如我们已经讨论过的，Redux是框架无关的。先了解Redux的核心概念，然后再考虑它如何与React协同工作。但是现在我们准备从上一篇文章中获取一个容器组件，并将Redux应用到它。</p>\n<p>首先，这里是没有Redux的原始组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserListContainer = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      users: []</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/path/to/user-api'</span>).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">users</span>: response.data&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> <span class=\"attr\">users</span>=<span class=\"string\">&#123;this.state.users&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">export default UserListContainer;</span></span><br></pre></td></tr></table></figure>\n<p>当然，它会执行它的Ajax请求并更新它自己的本地状态。但如果应用程序中的其他区域需要根据新获得的用户列表进行更改，则此策略是不够的。</p>\n<p>使用Redux策略，我们可以在Ajax请求返回时调度一个动作，而不是执行<code>this.setState（）</code>。然后这个组件和其他人可以订阅状态更改。但是这实际上给我们带来了一个问题，我们如何设置<code>store.subscribe（）</code>来更新组件的状态？</p>\n<p>我想我可以提供几个手动将组件连接到Redux存储的示例。你甚至可以想象如何用你自己的方法来处理。但最终，在这些例子的最后，我会解释说有更好的方法，忘记手动例子。然后我将介绍名为r<a href=\"http://redux.js.org/docs/basics/UsageWithReact.html\" target=\"_blank\" rel=\"noopener\">eact-redux</a>的官方React / Redux绑定模块。所以让我们直接跳到这一点。</p>\n<h2 id=\"Connecting-with-react-redux\"><a href=\"#Connecting-with-react-redux\" class=\"headerlink\" title=\"Connecting with react-redux\"></a>Connecting with react-redux</h2><p>为了清楚起见，<code>react</code>，<code>redux</code>和<code>react-redux</code>是npm上的三个独立模块。<code>react-redux</code>模块使我们能够以更方便的方式将<code>React</code>组件连接到<code>Redux</code>。</p>\n<p>如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../path/to/store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserListContainer = React.createClass(&#123;</span><br><span class=\"line\">  componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/path/to/user-api'</span>).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      store.dispatch(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'USER_LIST_SUCCESS'</span>,</span><br><span class=\"line\">        users: response.data</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> <span class=\"attr\">users</span>=<span class=\"string\">&#123;this.props.users&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">const mapStateToProps = function(store) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  return &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    users: store.userState.users</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">export default connect(mapStateToProps)(UserListContainer);</span></span><br></pre></td></tr></table></figure>\n<p>上面代码做了以下事情：</p>\n<ol>\n<li>从<code>react-redux</code>导入<code>connect</code>方法</li>\n<li>从下向上看代码。<code>connect</code>方法其实有两个参数，但是我们值提供了一个<code>mapStateToProps()</code>。</li>\n<li><code>connect()</code>方法的第一个参数是一个函数返回一个对象。对象的属性会变为组件的<code>props</code>。可以在状态中看到他们。现在，我希望函数名“mapStateToProps”更有意义。另请注意，<code>mapStateToProps（）</code>将收到一个参数，它是整个Redux存储的参数。<code>mapStateToProps（）</code>的主要思想是将组件需要的整体状态的哪些部分作为其<code>props</code>。</li>\n<li>由于第三条的原因我们不在需要<code>getInitialState()</code>。我们使用<code>this.props.users</code>替代<code>this.state.users</code>，因为<code>users</code>现在是一个道具而不是本地组件状态。</li>\n<li>Ajax返回现在调度一个操作，而不是更新本地组件状态。</li>\n</ol>\n<p>示例代码假设用户reducer的工作原理可能并不明显。注意存储如何拥有userState属性。但是这个名字来自哪里？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    users: store.userState.users</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个名字来自我们结合我们的reducer的时候:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducers = combineReducers(&#123;</span><br><span class=\"line\">  userState: userReducer,</span><br><span class=\"line\">  widgetState: widgetReducer</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>虽然我们没有为示例显示实际的reducer（因为它将在另一个文件中），但它是确定其各自状态的子属性的reducer。为了确保<code>.users</code>是<code>userState</code>的属性，这些示例的缩减器可能如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialUserState = &#123;</span><br><span class=\"line\">  users: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userReducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state = initialUserState, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'USER_LIST_SUCCESS'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123; <span class=\"attr\">users</span>: action.users &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Lifecycle-Dispatches\"><a href=\"#Ajax-Lifecycle-Dispatches\" class=\"headerlink\" title=\"Ajax Lifecycle Dispatches\"></a>Ajax Lifecycle Dispatches</h2><p>在我们的Ajax示例中，我们只调度了一个动作。它故意被称为“USER_LIST_SUCCESS”，因为我们可能还希望在Ajax启动前发送’USER_LIST_REQUEST’，在Ajax发生故障时发送’USER_LIST_FAILED’。请务必阅读有关<a href=\"http://redux.js.org/docs/advanced/AsyncActions.html\" target=\"_blank\" rel=\"noopener\">异步操作</a>的文档。</p>\n<h2 id=\"Dispatching-from-Events\"><a href=\"#Dispatching-from-Events\" class=\"headerlink\" title=\"Dispatching from Events\"></a>Dispatching from Events</h2><p>在之前的文章中，我们看到事件应该从容器组件传递到展示组件。事实证明，在事件只需发送一个动作的情况下，react-redux同样有效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dispatch, ownProps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    toggleActive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      dispatch(&#123; ... &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</span><br><span class=\"line\">  mapStateToProps,</span><br><span class=\"line\">  mapDispatchToProps</span><br><span class=\"line\">)(UserListContainer);</span><br></pre></td></tr></table></figure>\n<p>在展示组件中，我们可以像以前那样做<code>onClick = {this.props.toggleActive}</code>，但是这次我们不必自己编写事件。</p>\n<h2 id=\"Container-Component-Omission\"><a href=\"#Container-Component-Omission\" class=\"headerlink\" title=\"Container Component Omission\"></a>Container Component Omission</h2><p>有时，容器组件只需要订阅存储，并且不需要像<code>componentDidMount（）</code>这样的方法来启动Ajax请求。它可能只需要一个<code>render（）</code>方法将状态传递给展示组件。在这种情况下，我们可以通过以下方式创建一个容器组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../views/list-user'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    users: store.userState.users</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(UserList);</span><br></pre></td></tr></table></figure>\n<p>是的，这是我们新的容器组件的整个文件。但是请等待，容器组件在哪里？我们为什么不在这里使用<code>React.createClass（）</code>？</p>\n<p>事实证明，<code>connect（）</code>为我们创建了一个容器组件。注意这次我们直接传递了展示组件，而不是传入自己创建的容器组件。如果您真的想到容器组件所做的事情，请记住它们存在以允许演示组件只关注视图而不关注状态。他们也以属性形式将状态传递给子视图。这正是<code>connect（）</code>所做的 - 它将状态（通过props）传递给我们的展示组件，并实际返回一个包装容器组件的React组件。实质上，该包装器是一个容器组件。</p>\n<p>那么这是否意味着之前的例子实际上是两个包装展示性的容器组件？当然，你可以这样想。但这不是问题，只有当我们的容器组件需要除<code>render（）</code>之外的更多React方法时才有必要。</p>\n<p>将这两个容器组件看作服务于不同但相关的角色:<br><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/03/redux-article-3-06.svg\" alt=\"presentational\"></p>\n<p>嗯，也许这就是为什么React标志看起来像一个原子！</p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><p>为了使这个<code>react-redux</code>代码正常工作，您需要让应用程序知道如何将<code>react-redux</code>与<code>&lt;Provider /&gt;</code>组件一起使用。这个组件包装你的整个React应用程序。如果您使用的是React Router，它将如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;&#123;router&#125;&lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>被附加在<code>Provider</code>上的存储是通过<code>react-redux</code>真正“连接”React和Redux。</p>\n<h2 id=\"Redux-with-React-Router\"><a href=\"#Redux-with-React-Router\" class=\"headerlink\" title=\"Redux with React Router\"></a>Redux with React Router</h2><p>这不是必需的，但还有另一个名为<code>react-router-redux</code>的<code>npm</code>项目。由于路由在技术上属于UI状态的一部分，并且React Router不知道Redux，因此该项目有助于将两者联系起来。</p>\n<p>你看到我在那里做了什么？我们走了一圈，然后回到第一篇文章！# </p>\n<h2 id=\"Final-Project\"><a href=\"#Final-Project\" class=\"headerlink\" title=\"Final Project\"></a>Final Project</h2><p>本系列的<a href=\"https://github.com/bradwestfall/CSS-Tricks-React-Series/tree/master/guide-3-redux\" target=\"_blank\" rel=\"noopener\">最终项目指南</a>允许您创建一个小的“用户和小部件”单页应用程序：<br><img src=\"https://raw.githubusercontent.com/bradwestfall/CSS-Tricks-React-Series/master/guide-3-redux/docs/preview.gif\" alt=\"final\"></p>\n<p>与本系列中的其他文章一样，每个文章都附带了一份指南，该指南更详细地介绍了指南在GitHub中的工作方式。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>我真的很希望你喜欢这个系列，就像我写的一样。我意识到有很多关于React的话题我们没有涉及（表格为一），但我试图保持真实的前提，即我想让新用户了解如何通过基本知识以及制作单页应用程序的感受。</p>\n<h2 id=\"系列文章\"><a href=\"#系列文章\" class=\"headerlink\" title=\"系列文章\"></a>系列文章</h2><p>**第一部分：<a href=\"https://css-tricks.com/learning-react-router/\" target=\"_blank\" rel=\"noopener\">React Router</a></p>\n<p>**第二部分：<a href=\"https://css-tricks.com/learning-react-container-components/\" target=\"_blank\" rel=\"noopener\">Container Components</a></p>\n<p>**第三部分：Redux</p>\n"},{"title":"react-state-lifecycle","date":"2017-11-14T00:00:00.000Z","description":"React状态和生命周期","_content":"\n# React状态和生命周期\n\n考虑之前我们的时钟例子：\n\n```js\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n到目前为止我们只学习了一种更新UI的方法。我们调用`ReactDOM.render()`来改变渲染输出。\n\n在这里我们将学习如何真正的将`Clock`组件封装和可重用。它将设置自己的计时器，并且每秒更新一次。\n\n我们从封装时钟对象开始：\n\n```js\nfunction Clock(props) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n\nfunction tick() {\n  ReactDOM.render(\n    <Clock date={new Date()} />,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n但是，它却忽略了一个关键的要求：`Clock`设置一个定时器并每秒更新一次UI的事实应该是`Clock`的实现细节。\n\n理想情况下，我们想生成一次`Clock`，然后`Clock`更新自己的时间：\n\n```js\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n要实现这种功能我们需要添加“state”到`Clock`组件中。\n\nState与props很相似，但是它是组件私有的，完全由组件控制。\n\n我们之前提到，定义为类的组件具有一些额外的功能。本地状态正是这样的：一个只有类组件具有的功能。\n\n## 把函数转换为类\n\n可以通过5步把函数式组件`Clock`转变为类组件：\n\n1. 创建与函数同名的ES6语法的class，然后继承`React.Component`。\n2. 添加一个独立的`render()`空方法。\n3. 把函数式组件的内容转移到render方法中。\n4. 在`render()`方法中把`props`替换为`this.props`。\n5. 删除函数式声明组件。\n\n```js\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n`Clock`现在就是类式组件了。\n\n这样我们就可以使用附加功能，例如本地状态和生命周期挂钩。\n\n## 添加本地状态到类组件中\n\n我们将通过三个步骤把`date`从`props`中转移到`state`中。\n\n1. 在`render()`方法中把`this.props.date`替换为`this.state.date`：\n\n```js\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n2. 添加一个类构造器指定初始化的`this.state`:\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n注意我们是如何把`props`传递给基础构造器的：\n\n```js\nconstructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n```\n\n类组件应该总是调用基础构造器传入`props`。\n\n3. 把`date`属性从`Clock`组件移除：\n\n```js\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n我们稍后将计时器代码添加到组件本身。\n\n完整的代码如下：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n[demo](http://codepen.io/gaearon/pen/KgQpJd?editors=0010)\n\n接下来，我们将使时钟设置自己的计时器，并每秒更新一次。\n\n## 添加生命周期方法到类组件中\n\n在多组件应用中，在组件销毁时释放组件占用的资源是很重要的。\n\n当`Clock`组件第一次被渲染到DOM时我们会设置一个定时器。在React中我们称之为“mounting”。\n\n当`Clock`组件渲染的DOM移除时我们要销毁定时器。在React中我们称之为“unmounting”。\n\n在React组件类中我们可以声明特定的方法在mount和unmount的时候运行相关代码：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n这些方法称之为“生命周期钩子”。\n\n`componentDidMount()`钩子方法会在React组件输出渲染到DOM的时候触发。这就是设置定时器最佳时机：\n\n```js\ncomponentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n```\n\n注意我们把定时器的ID赋值给`this.timerID`。\n\n虽然`this.props`和`this.state`是由React组件自身设置的具有特殊意义的字段，你同样可以设置自己需要的存储的数据到类中，这些数据不能用于视觉输出。\n\n如果你在`render()`中没有使用一些数据，那么他们就不应该出现在`state`中。\n\n我们会在`componentWillUnmount()`钩子方法中销毁定时器：\n\n```js\ncomponentWillUnmount() {\n\tclearInterval(this.timerID);\n}\n```\n\n最后，我们实现一个`tick()`方法供`Clock`组件每秒钟执行一次。\n\n`tick()`方法会调用`this.setSate()`方法定时更新组件的本地状态：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/amqdNA?editors=0010)\n\n现在时钟每秒都在走着。\n\n让我们快速回顾一下发生了什么以及调用方法的顺序：\n\n1. 当把`<Clock />`传递给`ReactDOM.render()`时，React调用`Clock`组件的构造方法。由于Clock需要显示当前时间，因此它会使用包含当前时间的对象来初始化`this.state`。我们稍后会更新这个状态。\n\n2. React随后调用`Clock`组件的`render()`方法。这就是React如何知道屏幕上应该显示的内容。然后React更新DOM以匹配时钟的渲染输出。\n\n3. 当`Clock`组件输入插入到DOM元素后，React调用`componentDidMount()`生命周期钩子。在它里面，`Clock`组件要求浏览器设置一个定时器来每秒调用一次组件的`tick()`方法。\n\n4. 浏览器每秒调用`tick()`方法。在它里面，`Clock`组件通过用包含当前时间的对象调用`setState()`来调度UI更新。由于`setState()`调用，React知道状态已经改变，并再次调用`render()`方法来获取屏幕上应该显示的内容。这次，render（）方法中的this.state.date将会不同，所以渲染输出将包含更新的时间。 React会相应地更新DOM。\n\n5. 如果`Clock`组件被从DOM中删除，React调用`componentWillUnmount()`生命周期钩子，停止定时器。\n\n## 正确使用状态\n\n关于`setState()`你该知道的三件事。\n\n### 不要直接修改状态\n\n比如，下面的代码不会重新渲染组件：\n\n```js\n// Wrong\nthis.state.comment = 'Hello';\n```\n\n正确的是使用`setState()`：\n\n```js\n// Correct\nthis.setState({comment: 'Hello'});\n```\n\n唯一可以分配`this.state`的地方是构造函数。\n\n## 状态更新可能是异步的\n\nReact可能会将多个`setState()`调用批量处理为单个更新，以提高性能。\n\n由于`this.props`和`this.state`可能会异步更新，所以你不应该依靠它们的值来计算下一个状态。\n\n比如，下面的代码可能会更新出错：\n\n```js\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n```\n\n为了解决这个问题，使用接受函数而不是对象的形式使用`setState()`。该函数将接收前一个状态作为第一个参数，并将更新应用时的`props`作为第二个参数：\n\n```js\n// Correct\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n上面使用的是箭头函数表示法，当然普通的函数写法也是可以的：\n\n```js\n// Correct\nthis.setState(function(prevState, props) {\n  return {\n    counter: prevState.counter + props.increment\n  };\n});\n```\n\n## 状态是合并更新的\n\n当调用`setState()`方法时，React会把传入的参数和原来的`state`进行合并。\n\n比如，你的状态可能包含几个独立变量：\n\n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    posts: [],\n\tcomments: []\n  };\n}\n```\n\n然后你可以单独的调用`setState()`来更新它们：\n\n```js\n  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n```\n\n合并是浅合并，所以`this.setState（{comments}）`表达式会保持`this.state.posts`不变，但会完全替换`this.state.comments`。\n\n## 数据流向下\n\n不论父组件还是子组件都不应该知道自身是有状态的还是无状态的，他们不应该关心自己是函数是组件还是类组件。\n\n这就是为什么状态经常被称为本地或封装。除了拥有和设置它的组件之外，任何组件都无法访问它。\n\n组件可以选择将其状态作为属性传递给其子组件：\n\n```js\n<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n```\n\n着同样适用于自定义组件：\n\n```js\n<FormattedDate date={this.state.date} />\n```\n\n`FormattedDate`组件会通过`props`接收`date`，但是不会知道`date`是来自于`Clock`组件的`state`或者`props`，还是手动输入的：\n\n```js\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n```\n\n这通常叫做自顶向下或者单向数据流。任何状态总是属于某些特定组件，并且从该状态派生的任何数据或UI只能影响组件树中“在其下面”的组件。\n\n如果你把一个组件树想象为一个属性瀑布，每一个组件的状态就像二外的水源，它在任意点加入瀑布，顺着流下来。\n\n为了显示所有的组件都是独立的，我们创建一个有三个`Clock`组件组成的`App`组件：\n\n```js\nfunction App() {\n  return (\n    <div>\n      <Clock />\n      <Clock />\n      <Clock />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/vXdGmd?editors=0010)\n\n我们可以看到每一个时钟都有自己的定时器并且独立的更新时间。\n\n在React应用程序中，无论组件是有状态的还是无状态的，都被认为是组件的实现细节，可能随时间而改变。您可以在有状态组件内使用无状态组件，反之亦然。\n","source":"_posts/react-state.md","raw":"---\ntitle: react-state-lifecycle\ndate: '2017-11-14'\ndescription: React状态和生命周期\ncategories: \n- react\n\ntags:\n\n- react\n- lifecycle\n- state\n\n---\n\n# React状态和生命周期\n\n考虑之前我们的时钟例子：\n\n```js\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n到目前为止我们只学习了一种更新UI的方法。我们调用`ReactDOM.render()`来改变渲染输出。\n\n在这里我们将学习如何真正的将`Clock`组件封装和可重用。它将设置自己的计时器，并且每秒更新一次。\n\n我们从封装时钟对象开始：\n\n```js\nfunction Clock(props) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n\nfunction tick() {\n  ReactDOM.render(\n    <Clock date={new Date()} />,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\n\n但是，它却忽略了一个关键的要求：`Clock`设置一个定时器并每秒更新一次UI的事实应该是`Clock`的实现细节。\n\n理想情况下，我们想生成一次`Clock`，然后`Clock`更新自己的时间：\n\n```js\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n要实现这种功能我们需要添加“state”到`Clock`组件中。\n\nState与props很相似，但是它是组件私有的，完全由组件控制。\n\n我们之前提到，定义为类的组件具有一些额外的功能。本地状态正是这样的：一个只有类组件具有的功能。\n\n## 把函数转换为类\n\n可以通过5步把函数式组件`Clock`转变为类组件：\n\n1. 创建与函数同名的ES6语法的class，然后继承`React.Component`。\n2. 添加一个独立的`render()`空方法。\n3. 把函数式组件的内容转移到render方法中。\n4. 在`render()`方法中把`props`替换为`this.props`。\n5. 删除函数式声明组件。\n\n```js\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n`Clock`现在就是类式组件了。\n\n这样我们就可以使用附加功能，例如本地状态和生命周期挂钩。\n\n## 添加本地状态到类组件中\n\n我们将通过三个步骤把`date`从`props`中转移到`state`中。\n\n1. 在`render()`方法中把`this.props.date`替换为`this.state.date`：\n\n```js\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n2. 添加一个类构造器指定初始化的`this.state`:\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n注意我们是如何把`props`传递给基础构造器的：\n\n```js\nconstructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n```\n\n类组件应该总是调用基础构造器传入`props`。\n\n3. 把`date`属性从`Clock`组件移除：\n\n```js\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n我们稍后将计时器代码添加到组件本身。\n\n完整的代码如下：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n[demo](http://codepen.io/gaearon/pen/KgQpJd?editors=0010)\n\n接下来，我们将使时钟设置自己的计时器，并每秒更新一次。\n\n## 添加生命周期方法到类组件中\n\n在多组件应用中，在组件销毁时释放组件占用的资源是很重要的。\n\n当`Clock`组件第一次被渲染到DOM时我们会设置一个定时器。在React中我们称之为“mounting”。\n\n当`Clock`组件渲染的DOM移除时我们要销毁定时器。在React中我们称之为“unmounting”。\n\n在React组件类中我们可以声明特定的方法在mount和unmount的时候运行相关代码：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n这些方法称之为“生命周期钩子”。\n\n`componentDidMount()`钩子方法会在React组件输出渲染到DOM的时候触发。这就是设置定时器最佳时机：\n\n```js\ncomponentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n```\n\n注意我们把定时器的ID赋值给`this.timerID`。\n\n虽然`this.props`和`this.state`是由React组件自身设置的具有特殊意义的字段，你同样可以设置自己需要的存储的数据到类中，这些数据不能用于视觉输出。\n\n如果你在`render()`中没有使用一些数据，那么他们就不应该出现在`state`中。\n\n我们会在`componentWillUnmount()`钩子方法中销毁定时器：\n\n```js\ncomponentWillUnmount() {\n\tclearInterval(this.timerID);\n}\n```\n\n最后，我们实现一个`tick()`方法供`Clock`组件每秒钟执行一次。\n\n`tick()`方法会调用`this.setSate()`方法定时更新组件的本地状态：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/amqdNA?editors=0010)\n\n现在时钟每秒都在走着。\n\n让我们快速回顾一下发生了什么以及调用方法的顺序：\n\n1. 当把`<Clock />`传递给`ReactDOM.render()`时，React调用`Clock`组件的构造方法。由于Clock需要显示当前时间，因此它会使用包含当前时间的对象来初始化`this.state`。我们稍后会更新这个状态。\n\n2. React随后调用`Clock`组件的`render()`方法。这就是React如何知道屏幕上应该显示的内容。然后React更新DOM以匹配时钟的渲染输出。\n\n3. 当`Clock`组件输入插入到DOM元素后，React调用`componentDidMount()`生命周期钩子。在它里面，`Clock`组件要求浏览器设置一个定时器来每秒调用一次组件的`tick()`方法。\n\n4. 浏览器每秒调用`tick()`方法。在它里面，`Clock`组件通过用包含当前时间的对象调用`setState()`来调度UI更新。由于`setState()`调用，React知道状态已经改变，并再次调用`render()`方法来获取屏幕上应该显示的内容。这次，render（）方法中的this.state.date将会不同，所以渲染输出将包含更新的时间。 React会相应地更新DOM。\n\n5. 如果`Clock`组件被从DOM中删除，React调用`componentWillUnmount()`生命周期钩子，停止定时器。\n\n## 正确使用状态\n\n关于`setState()`你该知道的三件事。\n\n### 不要直接修改状态\n\n比如，下面的代码不会重新渲染组件：\n\n```js\n// Wrong\nthis.state.comment = 'Hello';\n```\n\n正确的是使用`setState()`：\n\n```js\n// Correct\nthis.setState({comment: 'Hello'});\n```\n\n唯一可以分配`this.state`的地方是构造函数。\n\n## 状态更新可能是异步的\n\nReact可能会将多个`setState()`调用批量处理为单个更新，以提高性能。\n\n由于`this.props`和`this.state`可能会异步更新，所以你不应该依靠它们的值来计算下一个状态。\n\n比如，下面的代码可能会更新出错：\n\n```js\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n```\n\n为了解决这个问题，使用接受函数而不是对象的形式使用`setState()`。该函数将接收前一个状态作为第一个参数，并将更新应用时的`props`作为第二个参数：\n\n```js\n// Correct\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n上面使用的是箭头函数表示法，当然普通的函数写法也是可以的：\n\n```js\n// Correct\nthis.setState(function(prevState, props) {\n  return {\n    counter: prevState.counter + props.increment\n  };\n});\n```\n\n## 状态是合并更新的\n\n当调用`setState()`方法时，React会把传入的参数和原来的`state`进行合并。\n\n比如，你的状态可能包含几个独立变量：\n\n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    posts: [],\n\tcomments: []\n  };\n}\n```\n\n然后你可以单独的调用`setState()`来更新它们：\n\n```js\n  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n```\n\n合并是浅合并，所以`this.setState（{comments}）`表达式会保持`this.state.posts`不变，但会完全替换`this.state.comments`。\n\n## 数据流向下\n\n不论父组件还是子组件都不应该知道自身是有状态的还是无状态的，他们不应该关心自己是函数是组件还是类组件。\n\n这就是为什么状态经常被称为本地或封装。除了拥有和设置它的组件之外，任何组件都无法访问它。\n\n组件可以选择将其状态作为属性传递给其子组件：\n\n```js\n<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n```\n\n着同样适用于自定义组件：\n\n```js\n<FormattedDate date={this.state.date} />\n```\n\n`FormattedDate`组件会通过`props`接收`date`，但是不会知道`date`是来自于`Clock`组件的`state`或者`props`，还是手动输入的：\n\n```js\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n```\n\n这通常叫做自顶向下或者单向数据流。任何状态总是属于某些特定组件，并且从该状态派生的任何数据或UI只能影响组件树中“在其下面”的组件。\n\n如果你把一个组件树想象为一个属性瀑布，每一个组件的状态就像二外的水源，它在任意点加入瀑布，顺着流下来。\n\n为了显示所有的组件都是独立的，我们创建一个有三个`Clock`组件组成的`App`组件：\n\n```js\nfunction App() {\n  return (\n    <div>\n      <Clock />\n      <Clock />\n      <Clock />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n```\n\n[demo](http://codepen.io/gaearon/pen/vXdGmd?editors=0010)\n\n我们可以看到每一个时钟都有自己的定时器并且独立的更新时间。\n\n在React应用程序中，无论组件是有状态的还是无状态的，都被认为是组件的实现细节，可能随时间而改变。您可以在有状态组件内使用无状态组件，反之亦然。\n","slug":"react-state","published":1,"updated":"2018-06-20T03:07:26.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8if001qvqqjwnejc82w","content":"<h1 id=\"React状态和生命周期\"><a href=\"#React状态和生命周期\" class=\"headerlink\" title=\"React状态和生命周期\"></a>React状态和生命周期</h1><p>考虑之前我们的时钟例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    element,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>到目前为止我们只学习了一种更新UI的方法。我们调用<code>ReactDOM.render()</code>来改变渲染输出。</p>\n<p>在这里我们将学习如何真正的将<code>Clock</code>组件封装和可重用。它将设置自己的计时器，并且每秒更新一次。</p>\n<p>我们从封装时钟对象开始：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Clock</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;Clock date=&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125; /&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，它却忽略了一个关键的要求：<code>Clock</code>设置一个定时器并每秒更新一次UI的事实应该是<code>Clock</code>的实现细节。</p>\n<p>理想情况下，我们想生成一次<code>Clock</code>，然后<code>Clock</code>更新自己的时间：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>要实现这种功能我们需要添加“state”到<code>Clock</code>组件中。</p>\n<p>State与props很相似，但是它是组件私有的，完全由组件控制。</p>\n<p>我们之前提到，定义为类的组件具有一些额外的功能。本地状态正是这样的：一个只有类组件具有的功能。</p>\n<h2 id=\"把函数转换为类\"><a href=\"#把函数转换为类\" class=\"headerlink\" title=\"把函数转换为类\"></a>把函数转换为类</h2><p>可以通过5步把函数式组件<code>Clock</code>转变为类组件：</p>\n<ol>\n<li>创建与函数同名的ES6语法的class，然后继承<code>React.Component</code>。</li>\n<li>添加一个独立的<code>render()</code>空方法。</li>\n<li>把函数式组件的内容转移到render方法中。</li>\n<li>在<code>render()</code>方法中把<code>props</code>替换为<code>this.props</code>。</li>\n<li>删除函数式声明组件。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.props.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Clock</code>现在就是类式组件了。</p>\n<p>这样我们就可以使用附加功能，例如本地状态和生命周期挂钩。</p>\n<h2 id=\"添加本地状态到类组件中\"><a href=\"#添加本地状态到类组件中\" class=\"headerlink\" title=\"添加本地状态到类组件中\"></a>添加本地状态到类组件中</h2><p>我们将通过三个步骤把<code>date</code>从<code>props</code>中转移到<code>state</code>中。</p>\n<ol>\n<li>在<code>render()</code>方法中把<code>this.props.date</code>替换为<code>this.state.date</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加一个类构造器指定初始化的<code>this.state</code>:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们是如何把<code>props</code>传递给基础构造器的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>类组件应该总是调用基础构造器传入<code>props</code>。</p>\n<ol start=\"3\">\n<li>把<code>date</code>属性从<code>Clock</code>组件移除：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们稍后将计时器代码添加到组件本身。</p>\n<p>完整的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/KgQpJd?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>接下来，我们将使时钟设置自己的计时器，并每秒更新一次。</p>\n<h2 id=\"添加生命周期方法到类组件中\"><a href=\"#添加生命周期方法到类组件中\" class=\"headerlink\" title=\"添加生命周期方法到类组件中\"></a>添加生命周期方法到类组件中</h2><p>在多组件应用中，在组件销毁时释放组件占用的资源是很重要的。</p>\n<p>当<code>Clock</code>组件第一次被渲染到DOM时我们会设置一个定时器。在React中我们称之为“mounting”。</p>\n<p>当<code>Clock</code>组件渲染的DOM移除时我们要销毁定时器。在React中我们称之为“unmounting”。</p>\n<p>在React组件类中我们可以声明特定的方法在mount和unmount的时候运行相关代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些方法称之为“生命周期钩子”。</p>\n<p><code>componentDidMount()</code>钩子方法会在React组件输出渲染到DOM的时候触发。这就是设置定时器最佳时机：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们把定时器的ID赋值给<code>this.timerID</code>。</p>\n<p>虽然<code>this.props</code>和<code>this.state</code>是由React组件自身设置的具有特殊意义的字段，你同样可以设置自己需要的存储的数据到类中，这些数据不能用于视觉输出。</p>\n<p>如果你在<code>render()</code>中没有使用一些数据，那么他们就不应该出现在<code>state</code>中。</p>\n<p>我们会在<code>componentWillUnmount()</code>钩子方法中销毁定时器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUnmount() &#123;</span><br><span class=\"line\">\tclearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，我们实现一个<code>tick()</code>方法供<code>Clock</code>组件每秒钟执行一次。</p>\n<p><code>tick()</code>方法会调用<code>this.setSate()</code>方法定时更新组件的本地状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/amqdNA?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>现在时钟每秒都在走着。</p>\n<p>让我们快速回顾一下发生了什么以及调用方法的顺序：</p>\n<ol>\n<li><p>当把<code>&lt;Clock /&gt;</code>传递给<code>ReactDOM.render()</code>时，React调用<code>Clock</code>组件的构造方法。由于Clock需要显示当前时间，因此它会使用包含当前时间的对象来初始化<code>this.state</code>。我们稍后会更新这个状态。</p>\n</li>\n<li><p>React随后调用<code>Clock</code>组件的<code>render()</code>方法。这就是React如何知道屏幕上应该显示的内容。然后React更新DOM以匹配时钟的渲染输出。</p>\n</li>\n<li><p>当<code>Clock</code>组件输入插入到DOM元素后，React调用<code>componentDidMount()</code>生命周期钩子。在它里面，<code>Clock</code>组件要求浏览器设置一个定时器来每秒调用一次组件的<code>tick()</code>方法。</p>\n</li>\n<li><p>浏览器每秒调用<code>tick()</code>方法。在它里面，<code>Clock</code>组件通过用包含当前时间的对象调用<code>setState()</code>来调度UI更新。由于<code>setState()</code>调用，React知道状态已经改变，并再次调用<code>render()</code>方法来获取屏幕上应该显示的内容。这次，render（）方法中的this.state.date将会不同，所以渲染输出将包含更新的时间。 React会相应地更新DOM。</p>\n</li>\n<li><p>如果<code>Clock</code>组件被从DOM中删除，React调用<code>componentWillUnmount()</code>生命周期钩子，停止定时器。</p>\n</li>\n</ol>\n<h2 id=\"正确使用状态\"><a href=\"#正确使用状态\" class=\"headerlink\" title=\"正确使用状态\"></a>正确使用状态</h2><p>关于<code>setState()</code>你该知道的三件事。</p>\n<h3 id=\"不要直接修改状态\"><a href=\"#不要直接修改状态\" class=\"headerlink\" title=\"不要直接修改状态\"></a>不要直接修改状态</h3><p>比如，下面的代码不会重新渲染组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.state.comment = <span class=\"string\">'Hello'</span>;</span><br></pre></td></tr></table></figure>\n<p>正确的是使用<code>setState()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">comment</span>: <span class=\"string\">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>唯一可以分配<code>this.state</code>的地方是构造函数。</p>\n<h2 id=\"状态更新可能是异步的\"><a href=\"#状态更新可能是异步的\" class=\"headerlink\" title=\"状态更新可能是异步的\"></a>状态更新可能是异步的</h2><p>React可能会将多个<code>setState()</code>调用批量处理为单个更新，以提高性能。</p>\n<p>由于<code>this.props</code>和<code>this.state</code>可能会异步更新，所以你不应该依靠它们的值来计算下一个状态。</p>\n<p>比如，下面的代码可能会更新出错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">  counter: <span class=\"keyword\">this</span>.state.counter + <span class=\"keyword\">this</span>.props.increment,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了解决这个问题，使用接受函数而不是对象的形式使用<code>setState()</code>。该函数将接收前一个状态作为第一个参数，并将更新应用时的<code>props</code>作为第二个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  counter: prevState.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>上面使用的是箭头函数表示法，当然普通的函数写法也是可以的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prevState, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    counter: prevState.counter + props.increment</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"状态是合并更新的\"><a href=\"#状态是合并更新的\" class=\"headerlink\" title=\"状态是合并更新的\"></a>状态是合并更新的</h2><p>当调用<code>setState()</code>方法时，React会把传入的参数和原来的<code>state</code>进行合并。</p>\n<p>比如，你的状态可能包含几个独立变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    posts: [],</span><br><span class=\"line\">\tcomments: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后你可以单独的调用<code>setState()</code>来更新它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  fetchPosts().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      posts: response.posts</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchComments().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      comments: response.comments</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合并是浅合并，所以<code>this.setState（{comments}）</code>表达式会保持<code>this.state.posts</code>不变，但会完全替换<code>this.state.comments</code>。</p>\n<h2 id=\"数据流向下\"><a href=\"#数据流向下\" class=\"headerlink\" title=\"数据流向下\"></a>数据流向下</h2><p>不论父组件还是子组件都不应该知道自身是有状态的还是无状态的，他们不应该关心自己是函数是组件还是类组件。</p>\n<p>这就是为什么状态经常被称为本地或封装。除了拥有和设置它的组件之外，任何组件都无法访问它。</p>\n<p>组件可以选择将其状态作为属性传递给其子组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br></pre></td></tr></table></figure>\n<p>着同样适用于自定义组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FormattedDate date=&#123;<span class=\"keyword\">this</span>.state.date&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p><code>FormattedDate</code>组件会通过<code>props</code>接收<code>date</code>，但是不会知道<code>date</code>是来自于<code>Clock</code>组件的<code>state</code>或者<code>props</code>，还是手动输入的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FormattedDate</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这通常叫做自顶向下或者单向数据流。任何状态总是属于某些特定组件，并且从该状态派生的任何数据或UI只能影响组件树中“在其下面”的组件。</p>\n<p>如果你把一个组件树想象为一个属性瀑布，每一个组件的状态就像二外的水源，它在任意点加入瀑布，顺着流下来。</p>\n<p>为了显示所有的组件都是独立的，我们创建一个有三个<code>Clock</code>组件组成的<code>App</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/vXdGmd?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>我们可以看到每一个时钟都有自己的定时器并且独立的更新时间。</p>\n<p>在React应用程序中，无论组件是有状态的还是无状态的，都被认为是组件的实现细节，可能随时间而改变。您可以在有状态组件内使用无状态组件，反之亦然。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React状态和生命周期\"><a href=\"#React状态和生命周期\" class=\"headerlink\" title=\"React状态和生命周期\"></a>React状态和生命周期</h1><p>考虑之前我们的时钟例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    element,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>到目前为止我们只学习了一种更新UI的方法。我们调用<code>ReactDOM.render()</code>来改变渲染输出。</p>\n<p>在这里我们将学习如何真正的将<code>Clock</code>组件封装和可重用。它将设置自己的计时器，并且每秒更新一次。</p>\n<p>我们从封装时钟对象开始：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Clock</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">      &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;Clock date=&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125; /&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(tick, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，它却忽略了一个关键的要求：<code>Clock</code>设置一个定时器并每秒更新一次UI的事实应该是<code>Clock</code>的实现细节。</p>\n<p>理想情况下，我们想生成一次<code>Clock</code>，然后<code>Clock</code>更新自己的时间：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>要实现这种功能我们需要添加“state”到<code>Clock</code>组件中。</p>\n<p>State与props很相似，但是它是组件私有的，完全由组件控制。</p>\n<p>我们之前提到，定义为类的组件具有一些额外的功能。本地状态正是这样的：一个只有类组件具有的功能。</p>\n<h2 id=\"把函数转换为类\"><a href=\"#把函数转换为类\" class=\"headerlink\" title=\"把函数转换为类\"></a>把函数转换为类</h2><p>可以通过5步把函数式组件<code>Clock</code>转变为类组件：</p>\n<ol>\n<li>创建与函数同名的ES6语法的class，然后继承<code>React.Component</code>。</li>\n<li>添加一个独立的<code>render()</code>空方法。</li>\n<li>把函数式组件的内容转移到render方法中。</li>\n<li>在<code>render()</code>方法中把<code>props</code>替换为<code>this.props</code>。</li>\n<li>删除函数式声明组件。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.props.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Clock</code>现在就是类式组件了。</p>\n<p>这样我们就可以使用附加功能，例如本地状态和生命周期挂钩。</p>\n<h2 id=\"添加本地状态到类组件中\"><a href=\"#添加本地状态到类组件中\" class=\"headerlink\" title=\"添加本地状态到类组件中\"></a>添加本地状态到类组件中</h2><p>我们将通过三个步骤把<code>date</code>从<code>props</code>中转移到<code>state</code>中。</p>\n<ol>\n<li>在<code>render()</code>方法中把<code>this.props.date</code>替换为<code>this.state.date</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加一个类构造器指定初始化的<code>this.state</code>:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们是如何把<code>props</code>传递给基础构造器的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>类组件应该总是调用基础构造器传入<code>props</code>。</p>\n<ol start=\"3\">\n<li>把<code>date</code>属性从<code>Clock</code>组件移除：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们稍后将计时器代码添加到组件本身。</p>\n<p>完整的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/KgQpJd?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>接下来，我们将使时钟设置自己的计时器，并每秒更新一次。</p>\n<h2 id=\"添加生命周期方法到类组件中\"><a href=\"#添加生命周期方法到类组件中\" class=\"headerlink\" title=\"添加生命周期方法到类组件中\"></a>添加生命周期方法到类组件中</h2><p>在多组件应用中，在组件销毁时释放组件占用的资源是很重要的。</p>\n<p>当<code>Clock</code>组件第一次被渲染到DOM时我们会设置一个定时器。在React中我们称之为“mounting”。</p>\n<p>当<code>Clock</code>组件渲染的DOM移除时我们要销毁定时器。在React中我们称之为“unmounting”。</p>\n<p>在React组件类中我们可以声明特定的方法在mount和unmount的时候运行相关代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些方法称之为“生命周期钩子”。</p>\n<p><code>componentDidMount()</code>钩子方法会在React组件输出渲染到DOM的时候触发。这就是设置定时器最佳时机：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们把定时器的ID赋值给<code>this.timerID</code>。</p>\n<p>虽然<code>this.props</code>和<code>this.state</code>是由React组件自身设置的具有特殊意义的字段，你同样可以设置自己需要的存储的数据到类中，这些数据不能用于视觉输出。</p>\n<p>如果你在<code>render()</code>中没有使用一些数据，那么他们就不应该出现在<code>state</code>中。</p>\n<p>我们会在<code>componentWillUnmount()</code>钩子方法中销毁定时器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUnmount() &#123;</span><br><span class=\"line\">\tclearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，我们实现一个<code>tick()</code>方法供<code>Clock</code>组件每秒钟执行一次。</p>\n<p><code>tick()</code>方法会调用<code>this.setSate()</code>方法定时更新组件的本地状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Clock /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/amqdNA?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>现在时钟每秒都在走着。</p>\n<p>让我们快速回顾一下发生了什么以及调用方法的顺序：</p>\n<ol>\n<li><p>当把<code>&lt;Clock /&gt;</code>传递给<code>ReactDOM.render()</code>时，React调用<code>Clock</code>组件的构造方法。由于Clock需要显示当前时间，因此它会使用包含当前时间的对象来初始化<code>this.state</code>。我们稍后会更新这个状态。</p>\n</li>\n<li><p>React随后调用<code>Clock</code>组件的<code>render()</code>方法。这就是React如何知道屏幕上应该显示的内容。然后React更新DOM以匹配时钟的渲染输出。</p>\n</li>\n<li><p>当<code>Clock</code>组件输入插入到DOM元素后，React调用<code>componentDidMount()</code>生命周期钩子。在它里面，<code>Clock</code>组件要求浏览器设置一个定时器来每秒调用一次组件的<code>tick()</code>方法。</p>\n</li>\n<li><p>浏览器每秒调用<code>tick()</code>方法。在它里面，<code>Clock</code>组件通过用包含当前时间的对象调用<code>setState()</code>来调度UI更新。由于<code>setState()</code>调用，React知道状态已经改变，并再次调用<code>render()</code>方法来获取屏幕上应该显示的内容。这次，render（）方法中的this.state.date将会不同，所以渲染输出将包含更新的时间。 React会相应地更新DOM。</p>\n</li>\n<li><p>如果<code>Clock</code>组件被从DOM中删除，React调用<code>componentWillUnmount()</code>生命周期钩子，停止定时器。</p>\n</li>\n</ol>\n<h2 id=\"正确使用状态\"><a href=\"#正确使用状态\" class=\"headerlink\" title=\"正确使用状态\"></a>正确使用状态</h2><p>关于<code>setState()</code>你该知道的三件事。</p>\n<h3 id=\"不要直接修改状态\"><a href=\"#不要直接修改状态\" class=\"headerlink\" title=\"不要直接修改状态\"></a>不要直接修改状态</h3><p>比如，下面的代码不会重新渲染组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.state.comment = <span class=\"string\">'Hello'</span>;</span><br></pre></td></tr></table></figure>\n<p>正确的是使用<code>setState()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">comment</span>: <span class=\"string\">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>唯一可以分配<code>this.state</code>的地方是构造函数。</p>\n<h2 id=\"状态更新可能是异步的\"><a href=\"#状态更新可能是异步的\" class=\"headerlink\" title=\"状态更新可能是异步的\"></a>状态更新可能是异步的</h2><p>React可能会将多个<code>setState()</code>调用批量处理为单个更新，以提高性能。</p>\n<p>由于<code>this.props</code>和<code>this.state</code>可能会异步更新，所以你不应该依靠它们的值来计算下一个状态。</p>\n<p>比如，下面的代码可能会更新出错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">  counter: <span class=\"keyword\">this</span>.state.counter + <span class=\"keyword\">this</span>.props.increment,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了解决这个问题，使用接受函数而不是对象的形式使用<code>setState()</code>。该函数将接收前一个状态作为第一个参数，并将更新应用时的<code>props</code>作为第二个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  counter: prevState.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>上面使用的是箭头函数表示法，当然普通的函数写法也是可以的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Correct</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prevState, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    counter: prevState.counter + props.increment</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"状态是合并更新的\"><a href=\"#状态是合并更新的\" class=\"headerlink\" title=\"状态是合并更新的\"></a>状态是合并更新的</h2><p>当调用<code>setState()</code>方法时，React会把传入的参数和原来的<code>state</code>进行合并。</p>\n<p>比如，你的状态可能包含几个独立变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    posts: [],</span><br><span class=\"line\">\tcomments: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后你可以单独的调用<code>setState()</code>来更新它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  fetchPosts().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      posts: response.posts</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchComments().then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      comments: response.comments</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合并是浅合并，所以<code>this.setState（{comments}）</code>表达式会保持<code>this.state.posts</code>不变，但会完全替换<code>this.state.comments</code>。</p>\n<h2 id=\"数据流向下\"><a href=\"#数据流向下\" class=\"headerlink\" title=\"数据流向下\"></a>数据流向下</h2><p>不论父组件还是子组件都不应该知道自身是有状态的还是无状态的，他们不应该关心自己是函数是组件还是类组件。</p>\n<p>这就是为什么状态经常被称为本地或封装。除了拥有和设置它的组件之外，任何组件都无法访问它。</p>\n<p>组件可以选择将其状态作为属性传递给其子组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br></pre></td></tr></table></figure>\n<p>着同样适用于自定义组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FormattedDate date=&#123;<span class=\"keyword\">this</span>.state.date&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p><code>FormattedDate</code>组件会通过<code>props</code>接收<code>date</code>，但是不会知道<code>date</code>是来自于<code>Clock</code>组件的<code>state</code>或者<code>props</code>，还是手动输入的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FormattedDate</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这通常叫做自顶向下或者单向数据流。任何状态总是属于某些特定组件，并且从该状态派生的任何数据或UI只能影响组件树中“在其下面”的组件。</p>\n<p>如果你把一个组件树想象为一个属性瀑布，每一个组件的状态就像二外的水源，它在任意点加入瀑布，顺着流下来。</p>\n<p>为了显示所有的组件都是独立的，我们创建一个有三个<code>Clock</code>组件组成的<code>App</code>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">      &lt;Clock /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/gaearon/pen/vXdGmd?editors=0010\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>我们可以看到每一个时钟都有自己的定时器并且独立的更新时间。</p>\n<p>在React应用程序中，无论组件是有状态的还是无状态的，都被认为是组件的实现细节，可能随时间而改变。您可以在有状态组件内使用无状态组件，反之亦然。</p>\n"},{"title":"rpc","date":"2017-05-11T00:00:00.000Z","description":"基于jdk序列化和tcp的rpc调用","_content":"\n# 基于jdk序列化和tcp的rpc调用\n\n**RPC调用图**\n\n<img src=\"http://7xj99v.com1.z0.glb.clouddn.com/rpc.png\" width = \"800\" height = \"400\" alt=\"rpc\" align=center />\n\n1、2和服务注册未实现\n\n**文件说明**\n---\n\n    AbstractService 抽象服务类\n    RpcRequest      服务请求对象\n    RpcResponse     服务返回结果对象\n\n    RpcClient       rpc客户端\n    RpcServer       rpc服务端\n\n    UserService     用户服务\n    User            用户对象\n    UserParam       用户参数对象\n\n**代码展示**\n---\n\n> AbstractService\n\n    public abstract class AbstractService<T extends RpcRequest, F extends RpcResponse> implements Serializable {\n\n        public abstract F execute(T request);\n\n    }\n\n> RpcRequest\n\n    public class RpcRequest<T extends Serializable> implements Serializable{\n\n        private T params;\n\n        public T getParams() {\n            return params;\n        }\n\n        public void setParams(T params) {\n            this.params = params;\n        }\n    }\n\n> RpcResponse\n\n    public class RpcResponse<T extends Serializable> implements Serializable {\n\n        private int code = 200;\n\n        private String message = \"success\";\n\n        private T result;\n\n        public int getCode() {\n            return code;\n        }\n\n        public void setCode(int code) {\n            this.code = code;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public T getResult() {\n            return result;\n        }\n\n        public void setResult(T result) {\n            this.result = result;\n        }\n    }\n\n> UserService\n\n    public class UserService extends AbstractService<RpcRequest<UserParam>,RpcResponse<User>> {\n\n        @Override\n        public RpcResponse<User> execute(RpcRequest<UserParam> request) {\n            UserParam params = request.getParams();\n            String name = params.getName();\n            RpcResponse<User> response = new RpcResponse<>();\n            User user = new User();\n            if (\"wanghao\".equals(name)) {\n                user.setName(\"wanghao\");\n                user.setAge(29);\n                response.setResult(user);\n            } else {\n                response.setCode(-200);\n                response.setMessage(\"no the user\");\n            }\n            return response;\n        }\n    }\n\n> User\n\n    public class User implements Serializable {\n\n        private String name;\n\n        private int age;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public int getAge() {\n            return age;\n        }\n\n        public void setAge(int age) {\n            this.age = age;\n        }\n    }\n\n> UserParam\n\n    public class UserParam implements Serializable {\n\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n    }\n\n> RpcClient\n\n    public class RpcClient {\n\n        public static void main(String[] args) throws IOException, ClassNotFoundException {\n            Socket socket = new Socket(\"10.2.6.20\", 8888);\n            OutputStream outputStream = socket.getOutputStream();\n            ObjectOutputStream stream = new ObjectOutputStream(outputStream);\n            RpcRequest<UserParam> request = new RpcRequest<>();\n            UserParam param = new UserParam();\n            param.setName(\"sakyawang\");\n            request.setParams(param);\n            stream.writeObject(request);\n            stream.flush();\n            InputStream inputStream = socket.getInputStream();\n            ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);\n            RpcResponse<User> response = (RpcResponse<User>) objectInputStream.readObject();\n            System.out.println(response.getMessage());\n            System.out.println(response.getResult().getAge());\n        }\n    }\n\n> RpcServer\n\n    public class RpcServer {\n\n        public static void main(String[] args) throws IOException, ClassNotFoundException {\n            ServerSocket serverSocket = new ServerSocket();\n            serverSocket.bind(new InetSocketAddress(8888));\n            Socket socket = serverSocket.accept();\n            InputStream inputStream = socket.getInputStream();\n            OutputStream outputStream = socket.getOutputStream();\n            ObjectInputStream stream = new ObjectInputStream(inputStream);\n            RpcRequest<UserParam> request = (RpcRequest<UserParam>) stream.readObject();\n            UserService userService = new UserService();\n            RpcResponse<User> response = userService.execute(request);\n            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\n            objectOutputStream.writeObject(response);\n            objectOutputStream.flush();\n        }\n    }\n","source":"_posts/rpc.md","raw":"---\ntitle: rpc\ndate: '2017-05-11'\ndescription: 基于jdk序列化和tcp的rpc调用\ncategories:\n- java\n\ntags:\n- java\n- rpc\n- socket\n\n---\n\n# 基于jdk序列化和tcp的rpc调用\n\n**RPC调用图**\n\n<img src=\"http://7xj99v.com1.z0.glb.clouddn.com/rpc.png\" width = \"800\" height = \"400\" alt=\"rpc\" align=center />\n\n1、2和服务注册未实现\n\n**文件说明**\n---\n\n    AbstractService 抽象服务类\n    RpcRequest      服务请求对象\n    RpcResponse     服务返回结果对象\n\n    RpcClient       rpc客户端\n    RpcServer       rpc服务端\n\n    UserService     用户服务\n    User            用户对象\n    UserParam       用户参数对象\n\n**代码展示**\n---\n\n> AbstractService\n\n    public abstract class AbstractService<T extends RpcRequest, F extends RpcResponse> implements Serializable {\n\n        public abstract F execute(T request);\n\n    }\n\n> RpcRequest\n\n    public class RpcRequest<T extends Serializable> implements Serializable{\n\n        private T params;\n\n        public T getParams() {\n            return params;\n        }\n\n        public void setParams(T params) {\n            this.params = params;\n        }\n    }\n\n> RpcResponse\n\n    public class RpcResponse<T extends Serializable> implements Serializable {\n\n        private int code = 200;\n\n        private String message = \"success\";\n\n        private T result;\n\n        public int getCode() {\n            return code;\n        }\n\n        public void setCode(int code) {\n            this.code = code;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public T getResult() {\n            return result;\n        }\n\n        public void setResult(T result) {\n            this.result = result;\n        }\n    }\n\n> UserService\n\n    public class UserService extends AbstractService<RpcRequest<UserParam>,RpcResponse<User>> {\n\n        @Override\n        public RpcResponse<User> execute(RpcRequest<UserParam> request) {\n            UserParam params = request.getParams();\n            String name = params.getName();\n            RpcResponse<User> response = new RpcResponse<>();\n            User user = new User();\n            if (\"wanghao\".equals(name)) {\n                user.setName(\"wanghao\");\n                user.setAge(29);\n                response.setResult(user);\n            } else {\n                response.setCode(-200);\n                response.setMessage(\"no the user\");\n            }\n            return response;\n        }\n    }\n\n> User\n\n    public class User implements Serializable {\n\n        private String name;\n\n        private int age;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public int getAge() {\n            return age;\n        }\n\n        public void setAge(int age) {\n            this.age = age;\n        }\n    }\n\n> UserParam\n\n    public class UserParam implements Serializable {\n\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n    }\n\n> RpcClient\n\n    public class RpcClient {\n\n        public static void main(String[] args) throws IOException, ClassNotFoundException {\n            Socket socket = new Socket(\"10.2.6.20\", 8888);\n            OutputStream outputStream = socket.getOutputStream();\n            ObjectOutputStream stream = new ObjectOutputStream(outputStream);\n            RpcRequest<UserParam> request = new RpcRequest<>();\n            UserParam param = new UserParam();\n            param.setName(\"sakyawang\");\n            request.setParams(param);\n            stream.writeObject(request);\n            stream.flush();\n            InputStream inputStream = socket.getInputStream();\n            ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);\n            RpcResponse<User> response = (RpcResponse<User>) objectInputStream.readObject();\n            System.out.println(response.getMessage());\n            System.out.println(response.getResult().getAge());\n        }\n    }\n\n> RpcServer\n\n    public class RpcServer {\n\n        public static void main(String[] args) throws IOException, ClassNotFoundException {\n            ServerSocket serverSocket = new ServerSocket();\n            serverSocket.bind(new InetSocketAddress(8888));\n            Socket socket = serverSocket.accept();\n            InputStream inputStream = socket.getInputStream();\n            OutputStream outputStream = socket.getOutputStream();\n            ObjectInputStream stream = new ObjectInputStream(inputStream);\n            RpcRequest<UserParam> request = (RpcRequest<UserParam>) stream.readObject();\n            UserService userService = new UserService();\n            RpcResponse<User> response = userService.execute(request);\n            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\n            objectOutputStream.writeObject(response);\n            objectOutputStream.flush();\n        }\n    }\n","slug":"rpc","published":1,"updated":"2018-06-20T03:07:45.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ih001tvqqjlrydtrus","content":"<h1 id=\"基于jdk序列化和tcp的rpc调用\"><a href=\"#基于jdk序列化和tcp的rpc调用\" class=\"headerlink\" title=\"基于jdk序列化和tcp的rpc调用\"></a>基于jdk序列化和tcp的rpc调用</h1><p><strong>RPC调用图</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/rpc.png\" width=\"800\" height=\"400\" alt=\"rpc\" align=\"center\"></p>\n<p>1、2和服务注册未实现</p>\n<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a><strong>文件说明</strong></h2><pre><code>AbstractService 抽象服务类\nRpcRequest      服务请求对象\nRpcResponse     服务返回结果对象\n\nRpcClient       rpc客户端\nRpcServer       rpc服务端\n\nUserService     用户服务\nUser            用户对象\nUserParam       用户参数对象\n</code></pre><h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a><strong>代码展示</strong></h2><blockquote>\n<p>AbstractService</p>\n</blockquote>\n<pre><code>public abstract class AbstractService&lt;T extends RpcRequest, F extends RpcResponse&gt; implements Serializable {\n\n    public abstract F execute(T request);\n\n}\n</code></pre><blockquote>\n<p>RpcRequest</p>\n</blockquote>\n<pre><code>public class RpcRequest&lt;T extends Serializable&gt; implements Serializable{\n\n    private T params;\n\n    public T getParams() {\n        return params;\n    }\n\n    public void setParams(T params) {\n        this.params = params;\n    }\n}\n</code></pre><blockquote>\n<p>RpcResponse</p>\n</blockquote>\n<pre><code>public class RpcResponse&lt;T extends Serializable&gt; implements Serializable {\n\n    private int code = 200;\n\n    private String message = &quot;success&quot;;\n\n    private T result;\n\n    public int getCode() {\n        return code;\n    }\n\n    public void setCode(int code) {\n        this.code = code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getResult() {\n        return result;\n    }\n\n    public void setResult(T result) {\n        this.result = result;\n    }\n}\n</code></pre><blockquote>\n<p>UserService</p>\n</blockquote>\n<pre><code>public class UserService extends AbstractService&lt;RpcRequest&lt;UserParam&gt;,RpcResponse&lt;User&gt;&gt; {\n\n    @Override\n    public RpcResponse&lt;User&gt; execute(RpcRequest&lt;UserParam&gt; request) {\n        UserParam params = request.getParams();\n        String name = params.getName();\n        RpcResponse&lt;User&gt; response = new RpcResponse&lt;&gt;();\n        User user = new User();\n        if (&quot;wanghao&quot;.equals(name)) {\n            user.setName(&quot;wanghao&quot;);\n            user.setAge(29);\n            response.setResult(user);\n        } else {\n            response.setCode(-200);\n            response.setMessage(&quot;no the user&quot;);\n        }\n        return response;\n    }\n}\n</code></pre><blockquote>\n<p>User</p>\n</blockquote>\n<pre><code>public class User implements Serializable {\n\n    private String name;\n\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n</code></pre><blockquote>\n<p>UserParam</p>\n</blockquote>\n<pre><code>public class UserParam implements Serializable {\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n</code></pre><blockquote>\n<p>RpcClient</p>\n</blockquote>\n<pre><code>public class RpcClient {\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        Socket socket = new Socket(&quot;10.2.6.20&quot;, 8888);\n        OutputStream outputStream = socket.getOutputStream();\n        ObjectOutputStream stream = new ObjectOutputStream(outputStream);\n        RpcRequest&lt;UserParam&gt; request = new RpcRequest&lt;&gt;();\n        UserParam param = new UserParam();\n        param.setName(&quot;sakyawang&quot;);\n        request.setParams(param);\n        stream.writeObject(request);\n        stream.flush();\n        InputStream inputStream = socket.getInputStream();\n        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);\n        RpcResponse&lt;User&gt; response = (RpcResponse&lt;User&gt;) objectInputStream.readObject();\n        System.out.println(response.getMessage());\n        System.out.println(response.getResult().getAge());\n    }\n}\n</code></pre><blockquote>\n<p>RpcServer</p>\n</blockquote>\n<pre><code>public class RpcServer {\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ServerSocket serverSocket = new ServerSocket();\n        serverSocket.bind(new InetSocketAddress(8888));\n        Socket socket = serverSocket.accept();\n        InputStream inputStream = socket.getInputStream();\n        OutputStream outputStream = socket.getOutputStream();\n        ObjectInputStream stream = new ObjectInputStream(inputStream);\n        RpcRequest&lt;UserParam&gt; request = (RpcRequest&lt;UserParam&gt;) stream.readObject();\n        UserService userService = new UserService();\n        RpcResponse&lt;User&gt; response = userService.execute(request);\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\n        objectOutputStream.writeObject(response);\n        objectOutputStream.flush();\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于jdk序列化和tcp的rpc调用\"><a href=\"#基于jdk序列化和tcp的rpc调用\" class=\"headerlink\" title=\"基于jdk序列化和tcp的rpc调用\"></a>基于jdk序列化和tcp的rpc调用</h1><p><strong>RPC调用图</strong></p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/rpc.png\" width=\"800\" height=\"400\" alt=\"rpc\" align=\"center\"></p>\n<p>1、2和服务注册未实现</p>\n<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a><strong>文件说明</strong></h2><pre><code>AbstractService 抽象服务类\nRpcRequest      服务请求对象\nRpcResponse     服务返回结果对象\n\nRpcClient       rpc客户端\nRpcServer       rpc服务端\n\nUserService     用户服务\nUser            用户对象\nUserParam       用户参数对象\n</code></pre><h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a><strong>代码展示</strong></h2><blockquote>\n<p>AbstractService</p>\n</blockquote>\n<pre><code>public abstract class AbstractService&lt;T extends RpcRequest, F extends RpcResponse&gt; implements Serializable {\n\n    public abstract F execute(T request);\n\n}\n</code></pre><blockquote>\n<p>RpcRequest</p>\n</blockquote>\n<pre><code>public class RpcRequest&lt;T extends Serializable&gt; implements Serializable{\n\n    private T params;\n\n    public T getParams() {\n        return params;\n    }\n\n    public void setParams(T params) {\n        this.params = params;\n    }\n}\n</code></pre><blockquote>\n<p>RpcResponse</p>\n</blockquote>\n<pre><code>public class RpcResponse&lt;T extends Serializable&gt; implements Serializable {\n\n    private int code = 200;\n\n    private String message = &quot;success&quot;;\n\n    private T result;\n\n    public int getCode() {\n        return code;\n    }\n\n    public void setCode(int code) {\n        this.code = code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getResult() {\n        return result;\n    }\n\n    public void setResult(T result) {\n        this.result = result;\n    }\n}\n</code></pre><blockquote>\n<p>UserService</p>\n</blockquote>\n<pre><code>public class UserService extends AbstractService&lt;RpcRequest&lt;UserParam&gt;,RpcResponse&lt;User&gt;&gt; {\n\n    @Override\n    public RpcResponse&lt;User&gt; execute(RpcRequest&lt;UserParam&gt; request) {\n        UserParam params = request.getParams();\n        String name = params.getName();\n        RpcResponse&lt;User&gt; response = new RpcResponse&lt;&gt;();\n        User user = new User();\n        if (&quot;wanghao&quot;.equals(name)) {\n            user.setName(&quot;wanghao&quot;);\n            user.setAge(29);\n            response.setResult(user);\n        } else {\n            response.setCode(-200);\n            response.setMessage(&quot;no the user&quot;);\n        }\n        return response;\n    }\n}\n</code></pre><blockquote>\n<p>User</p>\n</blockquote>\n<pre><code>public class User implements Serializable {\n\n    private String name;\n\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n</code></pre><blockquote>\n<p>UserParam</p>\n</blockquote>\n<pre><code>public class UserParam implements Serializable {\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n</code></pre><blockquote>\n<p>RpcClient</p>\n</blockquote>\n<pre><code>public class RpcClient {\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        Socket socket = new Socket(&quot;10.2.6.20&quot;, 8888);\n        OutputStream outputStream = socket.getOutputStream();\n        ObjectOutputStream stream = new ObjectOutputStream(outputStream);\n        RpcRequest&lt;UserParam&gt; request = new RpcRequest&lt;&gt;();\n        UserParam param = new UserParam();\n        param.setName(&quot;sakyawang&quot;);\n        request.setParams(param);\n        stream.writeObject(request);\n        stream.flush();\n        InputStream inputStream = socket.getInputStream();\n        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);\n        RpcResponse&lt;User&gt; response = (RpcResponse&lt;User&gt;) objectInputStream.readObject();\n        System.out.println(response.getMessage());\n        System.out.println(response.getResult().getAge());\n    }\n}\n</code></pre><blockquote>\n<p>RpcServer</p>\n</blockquote>\n<pre><code>public class RpcServer {\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ServerSocket serverSocket = new ServerSocket();\n        serverSocket.bind(new InetSocketAddress(8888));\n        Socket socket = serverSocket.accept();\n        InputStream inputStream = socket.getInputStream();\n        OutputStream outputStream = socket.getOutputStream();\n        ObjectInputStream stream = new ObjectInputStream(inputStream);\n        RpcRequest&lt;UserParam&gt; request = (RpcRequest&lt;UserParam&gt;) stream.readObject();\n        UserService userService = new UserService();\n        RpcResponse&lt;User&gt; response = userService.execute(request);\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\n        objectOutputStream.writeObject(response);\n        objectOutputStream.flush();\n    }\n}\n</code></pre>"},{"title":"stack的三种含义","date":"2015-07-17T00:00:00.000Z","description":"stack不同场景下的含义","_content":"\n本文来自：\n\n[阮一峰的网络日志](http://www.ruanyifeng.com/blog/2013/11/stack.html)\n\n如有引用请注明，谢谢！\n\n#stack的三种含义\n\n学习编程的时候，经常会看到stack这个词，它的中文名字叫做\"栈\"。\n理解这个概念，对于理解程序的运行至关重要。容易混淆的是，这个词其实有三种含义，适用于不同的场合，必须加以区分。\n\n## 含义一：数据结构\n\nstack的第一种含义是一组数据的[存放方式](http://en.wikipedia.org/wiki/Stack_(abstract_data_type))，特点为LIFO，即后进先出（Last in, first out）。\n\n![stack](http://image.beekka.com/blog/201311/bg2013112901.png)\n\n在这种数据结构中，数据像积木那样一层层堆起来，后面加入的数据就放在最上层。使用的时候，最上层的数据第一个被用掉，这就叫做\"后进先出\"。\n\n与这种结构配套的，是一些特定的方法，主要为下面这些。\n\n\tpush：在最顶层加入数据。\n\tpop：返回并移除最顶层的数据。\n\ttop：返回最顶层数据的值，但不移除它。\n\tisempty：返回一个布尔值，表示当前stack是否为空栈。\n\n## 含义二：代码运行方式\n\nstack的第二种含义是[\"调用栈\"](http://en.wikipedia.org/wiki/Call_stack)（call stack），表示函数或子例程像堆积木一样存放，以实现层层调用。\n下面以一段Java代码为例（[来源](http://www.itcsolutions.eu/2011/02/06/tutorial-java-8-understand-stack-and-heap/)）。\n\n\tclass Student{\n\t    int age;              \n\t    String name;      \n\t\n\t    public Student(int Age, String Name)\n\t    {\n\t        this.age = Age;\n\t        setName(Name);\n\t    }\n\t    public void setName(String Name)\n\t    {\n\t        this.name = Name;\n\t    }\n\t}\n\t\n\tpublic class Main{\n\t    public static void main(String[] args) {\n\t            Student s;           \n\t            s = new Student(23,\"Jonh\");\n\t    }\n\t}\n\n上面这段代码运行的时候，首先调用main方法，里面需要生成一个Student的实例，于是又调用Student构造函数。在构造函数中，又调用到setName方法。\n\n![](http://image.beekka.com/blog/201311/bg2013112902.gif)\n\n这三次调用像积木一样堆起来，就叫做\"调用栈\"。程序运行的时候，总是先完成最上层的调用，然后将它的值返回到下一层调用，直至完成整个调用栈，返回最后的结果。\n\n## 含义三：内存区域\n\nstack的第三种含义是[存放数据的一种内存区域](http://en.wikipedia.org/wiki/Stack-based_memory_allocation)。程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：一种叫做stack（栈），另一种叫做heap（堆）。\n\n![](http://image.beekka.com/blog/201311/bg2013112903.jpg)\n\n它们的主要区别是：stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。\n\n![](http://image.beekka.com/blog/201311/bg2013112904.jpg)\n\n其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。\n\n根据上面这些区别，数据存放的规则是：只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面。请看下面这段代码（[来源](http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types)）。\n\n\tpublic void Method1()\n\t{\n\t    int i=4;\n\t\n\t    int y=2;\n\t\n\t    class1 cls1 = new class1();\n\t}\n\n上面代码的Method1方法，共包含了三个变量：i, y 和 cls1。其中，i和y的值是整数，内存占用空间是确定的，而且是局部变量，只用在Method1区块之内，不会用于区块之外。cls1也是局部变量，但是类型为指针变量，指向一个对象的实例。指针变量占用的大小是确定的，但是对象实例以目前的信息无法确知所占用的内存空间大小。\n\n这三个变量和一个对象实例在内存中的存放方式如下。\n\n![](http://image.beekka.com/blog/201311/bg2013112905.jpg)\n\n从上图可以看到，i、y和cls1都存放在stack，因为它们占用内存空间都是确定的，而且本身也属于局部变量。但是，cls1指向的对象实例存放在heap，因为它的大小不确定。作为一条规则可以记住，所有的对象都存放在heap。\n\n接下来的问题是，当Method1方法运行结束，会发生什么事？\n\n回答是整个stack被清空，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而heap之中的那个对象实例继续存在，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。\n","source":"_posts/stack.md","raw":"---\ntitle: stack的三种含义\ndate: '2015-07-17'\ndescription: stack不同场景下的含义\ncategories:\n- 转载\ntags:\n- 转载\n- stack\n\n---\n\n本文来自：\n\n[阮一峰的网络日志](http://www.ruanyifeng.com/blog/2013/11/stack.html)\n\n如有引用请注明，谢谢！\n\n#stack的三种含义\n\n学习编程的时候，经常会看到stack这个词，它的中文名字叫做\"栈\"。\n理解这个概念，对于理解程序的运行至关重要。容易混淆的是，这个词其实有三种含义，适用于不同的场合，必须加以区分。\n\n## 含义一：数据结构\n\nstack的第一种含义是一组数据的[存放方式](http://en.wikipedia.org/wiki/Stack_(abstract_data_type))，特点为LIFO，即后进先出（Last in, first out）。\n\n![stack](http://image.beekka.com/blog/201311/bg2013112901.png)\n\n在这种数据结构中，数据像积木那样一层层堆起来，后面加入的数据就放在最上层。使用的时候，最上层的数据第一个被用掉，这就叫做\"后进先出\"。\n\n与这种结构配套的，是一些特定的方法，主要为下面这些。\n\n\tpush：在最顶层加入数据。\n\tpop：返回并移除最顶层的数据。\n\ttop：返回最顶层数据的值，但不移除它。\n\tisempty：返回一个布尔值，表示当前stack是否为空栈。\n\n## 含义二：代码运行方式\n\nstack的第二种含义是[\"调用栈\"](http://en.wikipedia.org/wiki/Call_stack)（call stack），表示函数或子例程像堆积木一样存放，以实现层层调用。\n下面以一段Java代码为例（[来源](http://www.itcsolutions.eu/2011/02/06/tutorial-java-8-understand-stack-and-heap/)）。\n\n\tclass Student{\n\t    int age;              \n\t    String name;      \n\t\n\t    public Student(int Age, String Name)\n\t    {\n\t        this.age = Age;\n\t        setName(Name);\n\t    }\n\t    public void setName(String Name)\n\t    {\n\t        this.name = Name;\n\t    }\n\t}\n\t\n\tpublic class Main{\n\t    public static void main(String[] args) {\n\t            Student s;           \n\t            s = new Student(23,\"Jonh\");\n\t    }\n\t}\n\n上面这段代码运行的时候，首先调用main方法，里面需要生成一个Student的实例，于是又调用Student构造函数。在构造函数中，又调用到setName方法。\n\n![](http://image.beekka.com/blog/201311/bg2013112902.gif)\n\n这三次调用像积木一样堆起来，就叫做\"调用栈\"。程序运行的时候，总是先完成最上层的调用，然后将它的值返回到下一层调用，直至完成整个调用栈，返回最后的结果。\n\n## 含义三：内存区域\n\nstack的第三种含义是[存放数据的一种内存区域](http://en.wikipedia.org/wiki/Stack-based_memory_allocation)。程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：一种叫做stack（栈），另一种叫做heap（堆）。\n\n![](http://image.beekka.com/blog/201311/bg2013112903.jpg)\n\n它们的主要区别是：stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。\n\n![](http://image.beekka.com/blog/201311/bg2013112904.jpg)\n\n其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。\n\n根据上面这些区别，数据存放的规则是：只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面。请看下面这段代码（[来源](http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types)）。\n\n\tpublic void Method1()\n\t{\n\t    int i=4;\n\t\n\t    int y=2;\n\t\n\t    class1 cls1 = new class1();\n\t}\n\n上面代码的Method1方法，共包含了三个变量：i, y 和 cls1。其中，i和y的值是整数，内存占用空间是确定的，而且是局部变量，只用在Method1区块之内，不会用于区块之外。cls1也是局部变量，但是类型为指针变量，指向一个对象的实例。指针变量占用的大小是确定的，但是对象实例以目前的信息无法确知所占用的内存空间大小。\n\n这三个变量和一个对象实例在内存中的存放方式如下。\n\n![](http://image.beekka.com/blog/201311/bg2013112905.jpg)\n\n从上图可以看到，i、y和cls1都存放在stack，因为它们占用内存空间都是确定的，而且本身也属于局部变量。但是，cls1指向的对象实例存放在heap，因为它的大小不确定。作为一条规则可以记住，所有的对象都存放在heap。\n\n接下来的问题是，当Method1方法运行结束，会发生什么事？\n\n回答是整个stack被清空，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而heap之中的那个对象实例继续存在，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。\n","slug":"stack","published":1,"updated":"2018-06-20T03:08:20.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ii001wvqqja7ujjdyc","content":"<p>本文来自：</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/11/stack.html\" target=\"_blank\" rel=\"noopener\">阮一峰的网络日志</a></p>\n<p>如有引用请注明，谢谢！</p>\n<p>#stack的三种含义</p>\n<p>学习编程的时候，经常会看到stack这个词，它的中文名字叫做”栈”。<br>理解这个概念，对于理解程序的运行至关重要。容易混淆的是，这个词其实有三种含义，适用于不同的场合，必须加以区分。</p>\n<h2 id=\"含义一：数据结构\"><a href=\"#含义一：数据结构\" class=\"headerlink\" title=\"含义一：数据结构\"></a>含义一：数据结构</h2><p>stack的第一种含义是一组数据的<a href=\"http://en.wikipedia.org/wiki/Stack_(abstract_data_type\" target=\"_blank\" rel=\"noopener\">存放方式</a>)，特点为LIFO，即后进先出（Last in, first out）。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112901.png\" alt=\"stack\"></p>\n<p>在这种数据结构中，数据像积木那样一层层堆起来，后面加入的数据就放在最上层。使用的时候，最上层的数据第一个被用掉，这就叫做”后进先出”。</p>\n<p>与这种结构配套的，是一些特定的方法，主要为下面这些。</p>\n<pre><code>push：在最顶层加入数据。\npop：返回并移除最顶层的数据。\ntop：返回最顶层数据的值，但不移除它。\nisempty：返回一个布尔值，表示当前stack是否为空栈。\n</code></pre><h2 id=\"含义二：代码运行方式\"><a href=\"#含义二：代码运行方式\" class=\"headerlink\" title=\"含义二：代码运行方式\"></a>含义二：代码运行方式</h2><p>stack的第二种含义是<a href=\"http://en.wikipedia.org/wiki/Call_stack\" target=\"_blank\" rel=\"noopener\">“调用栈”</a>（call stack），表示函数或子例程像堆积木一样存放，以实现层层调用。<br>下面以一段Java代码为例（<a href=\"http://www.itcsolutions.eu/2011/02/06/tutorial-java-8-understand-stack-and-heap/\" target=\"_blank\" rel=\"noopener\">来源</a>）。</p>\n<pre><code>class Student{\n    int age;              \n    String name;      \n\n    public Student(int Age, String Name)\n    {\n        this.age = Age;\n        setName(Name);\n    }\n    public void setName(String Name)\n    {\n        this.name = Name;\n    }\n}\n\npublic class Main{\n    public static void main(String[] args) {\n            Student s;           \n            s = new Student(23,&quot;Jonh&quot;);\n    }\n}\n</code></pre><p>上面这段代码运行的时候，首先调用main方法，里面需要生成一个Student的实例，于是又调用Student构造函数。在构造函数中，又调用到setName方法。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112902.gif\" alt=\"\"></p>\n<p>这三次调用像积木一样堆起来，就叫做”调用栈”。程序运行的时候，总是先完成最上层的调用，然后将它的值返回到下一层调用，直至完成整个调用栈，返回最后的结果。</p>\n<h2 id=\"含义三：内存区域\"><a href=\"#含义三：内存区域\" class=\"headerlink\" title=\"含义三：内存区域\"></a>含义三：内存区域</h2><p>stack的第三种含义是<a href=\"http://en.wikipedia.org/wiki/Stack-based_memory_allocation\" target=\"_blank\" rel=\"noopener\">存放数据的一种内存区域</a>。程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：一种叫做stack（栈），另一种叫做heap（堆）。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112903.jpg\" alt=\"\"></p>\n<p>它们的主要区别是：stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112904.jpg\" alt=\"\"></p>\n<p>其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。</p>\n<p>根据上面这些区别，数据存放的规则是：只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面。请看下面这段代码（<a href=\"http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types\" target=\"_blank\" rel=\"noopener\">来源</a>）。</p>\n<pre><code>public void Method1()\n{\n    int i=4;\n\n    int y=2;\n\n    class1 cls1 = new class1();\n}\n</code></pre><p>上面代码的Method1方法，共包含了三个变量：i, y 和 cls1。其中，i和y的值是整数，内存占用空间是确定的，而且是局部变量，只用在Method1区块之内，不会用于区块之外。cls1也是局部变量，但是类型为指针变量，指向一个对象的实例。指针变量占用的大小是确定的，但是对象实例以目前的信息无法确知所占用的内存空间大小。</p>\n<p>这三个变量和一个对象实例在内存中的存放方式如下。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112905.jpg\" alt=\"\"></p>\n<p>从上图可以看到，i、y和cls1都存放在stack，因为它们占用内存空间都是确定的，而且本身也属于局部变量。但是，cls1指向的对象实例存放在heap，因为它的大小不确定。作为一条规则可以记住，所有的对象都存放在heap。</p>\n<p>接下来的问题是，当Method1方法运行结束，会发生什么事？</p>\n<p>回答是整个stack被清空，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而heap之中的那个对象实例继续存在，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文来自：</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/11/stack.html\" target=\"_blank\" rel=\"noopener\">阮一峰的网络日志</a></p>\n<p>如有引用请注明，谢谢！</p>\n<p>#stack的三种含义</p>\n<p>学习编程的时候，经常会看到stack这个词，它的中文名字叫做”栈”。<br>理解这个概念，对于理解程序的运行至关重要。容易混淆的是，这个词其实有三种含义，适用于不同的场合，必须加以区分。</p>\n<h2 id=\"含义一：数据结构\"><a href=\"#含义一：数据结构\" class=\"headerlink\" title=\"含义一：数据结构\"></a>含义一：数据结构</h2><p>stack的第一种含义是一组数据的<a href=\"http://en.wikipedia.org/wiki/Stack_(abstract_data_type\" target=\"_blank\" rel=\"noopener\">存放方式</a>)，特点为LIFO，即后进先出（Last in, first out）。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112901.png\" alt=\"stack\"></p>\n<p>在这种数据结构中，数据像积木那样一层层堆起来，后面加入的数据就放在最上层。使用的时候，最上层的数据第一个被用掉，这就叫做”后进先出”。</p>\n<p>与这种结构配套的，是一些特定的方法，主要为下面这些。</p>\n<pre><code>push：在最顶层加入数据。\npop：返回并移除最顶层的数据。\ntop：返回最顶层数据的值，但不移除它。\nisempty：返回一个布尔值，表示当前stack是否为空栈。\n</code></pre><h2 id=\"含义二：代码运行方式\"><a href=\"#含义二：代码运行方式\" class=\"headerlink\" title=\"含义二：代码运行方式\"></a>含义二：代码运行方式</h2><p>stack的第二种含义是<a href=\"http://en.wikipedia.org/wiki/Call_stack\" target=\"_blank\" rel=\"noopener\">“调用栈”</a>（call stack），表示函数或子例程像堆积木一样存放，以实现层层调用。<br>下面以一段Java代码为例（<a href=\"http://www.itcsolutions.eu/2011/02/06/tutorial-java-8-understand-stack-and-heap/\" target=\"_blank\" rel=\"noopener\">来源</a>）。</p>\n<pre><code>class Student{\n    int age;              \n    String name;      \n\n    public Student(int Age, String Name)\n    {\n        this.age = Age;\n        setName(Name);\n    }\n    public void setName(String Name)\n    {\n        this.name = Name;\n    }\n}\n\npublic class Main{\n    public static void main(String[] args) {\n            Student s;           \n            s = new Student(23,&quot;Jonh&quot;);\n    }\n}\n</code></pre><p>上面这段代码运行的时候，首先调用main方法，里面需要生成一个Student的实例，于是又调用Student构造函数。在构造函数中，又调用到setName方法。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112902.gif\" alt=\"\"></p>\n<p>这三次调用像积木一样堆起来，就叫做”调用栈”。程序运行的时候，总是先完成最上层的调用，然后将它的值返回到下一层调用，直至完成整个调用栈，返回最后的结果。</p>\n<h2 id=\"含义三：内存区域\"><a href=\"#含义三：内存区域\" class=\"headerlink\" title=\"含义三：内存区域\"></a>含义三：内存区域</h2><p>stack的第三种含义是<a href=\"http://en.wikipedia.org/wiki/Stack-based_memory_allocation\" target=\"_blank\" rel=\"noopener\">存放数据的一种内存区域</a>。程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：一种叫做stack（栈），另一种叫做heap（堆）。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112903.jpg\" alt=\"\"></p>\n<p>它们的主要区别是：stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112904.jpg\" alt=\"\"></p>\n<p>其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。</p>\n<p>根据上面这些区别，数据存放的规则是：只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面。请看下面这段代码（<a href=\"http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types\" target=\"_blank\" rel=\"noopener\">来源</a>）。</p>\n<pre><code>public void Method1()\n{\n    int i=4;\n\n    int y=2;\n\n    class1 cls1 = new class1();\n}\n</code></pre><p>上面代码的Method1方法，共包含了三个变量：i, y 和 cls1。其中，i和y的值是整数，内存占用空间是确定的，而且是局部变量，只用在Method1区块之内，不会用于区块之外。cls1也是局部变量，但是类型为指针变量，指向一个对象的实例。指针变量占用的大小是确定的，但是对象实例以目前的信息无法确知所占用的内存空间大小。</p>\n<p>这三个变量和一个对象实例在内存中的存放方式如下。</p>\n<p><img src=\"http://image.beekka.com/blog/201311/bg2013112905.jpg\" alt=\"\"></p>\n<p>从上图可以看到，i、y和cls1都存放在stack，因为它们占用内存空间都是确定的，而且本身也属于局部变量。但是，cls1指向的对象实例存放在heap，因为它的大小不确定。作为一条规则可以记住，所有的对象都存放在heap。</p>\n<p>接下来的问题是，当Method1方法运行结束，会发生什么事？</p>\n<p>回答是整个stack被清空，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而heap之中的那个对象实例继续存在，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。</p>\n"},{"title":"面向对象设计基本原则","date":"2017-10-27T00:00:00.000Z","description":"面向对象设计基本原则S.O.L.I.D","_content":"\n## 面向对象设计原则SOLID\n\n参考：\n\nhttps://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\n\nhttp://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html\n\n### 1. S – Single Responsibility Principle 职责单一原则 ###\n\t\n>对象应该仅具有一种单一功能。\t\n>概念上和unix的设计原则 “Do one thing and do it well”很相似。听起来很简单但是实践起来很难。\n\n比如，现在有一些图形要计算所有图形的面积。\n```java\nclass Circle {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n首先，创建图形类，包含构造函数和需要的属性参数。\n接下来创建面积计算类AreaCalculator，然后编写方法计算提供的图形参数的面积总和。\n```java\nclass AreaCalculator {\n\n    private List shapes;\n\n    public AreaCalculator(List shapes) {\n        this.shapes = shapes;\n    }\n\n    public double sum() {\n        // logic to sum the areas\n    }\n\n    public void output() {\n        return System.out.println(String.format(\"Sum of the areas of provided shapes: %s\", this.sum());\n    }\n}\n```\n简单实例化AreaCalculator对象，然后传入一个图形集合，然后调用output方法显示面积总和。\n```java\nAreaCalculator areaCalculator = new AreaCalculator(Arrays.asList(new Circle(10.0f), new Square(12.0f)));\nareaCalculator.output()\n```\n这里output方法的问题是AreaCalculator处理计算逻辑然后输出字符串结果。那么，如果用户想用json或者其他格式输出计算结果呢？\n所有的操作都放到AreaCalculator中做违背了职责单一原则。AreaCalculator应该只计算提供的图形的面积总和，而不用关心如何输入结果。\n\n因此，需要新建一个SumCalculatorOutputter类用来处理统计结果输出操作。\n\nSumCalculatorOutputter类如下：\n```java\nclass SumCalculatorOutputter {\n\n\tprivate AreaCalculator areaCalculator;\n\n\tpublic SumCalculatorOutputter(AreaCalculator areaCalculator) {\n\t\tthis.areaCalculator = areaCalculator;\n\t}\n\n\tpublic void outputJson() {\n\t\tdouble sum = this.areaCalculator.sum();\n\t}\n\n\tpublic void outputHtml() {\n\n\t}\n\n\tpublic void outputString() {\n\n\t}\n\n}\n\nAreaCalculator areaCalculator = new AreaCalculator(Arrays.asList(new Circle(10.0f), new Square(12.0f)));\n\nSumCalculatorOutputter output = new SumCalculatorOutputter(areaCalculator);\noutput.outputJson();\noutput.outputHtml();\noutput.outputString();\n```\n\n现在不管你要把结果按照何种方式输出都放在SumCalculatorOutputter中处理。\n\n### 2. O – Open-Closed Principle 开放封闭原则 ###\n\n>对象应该是对于扩展开放的，但是对于修改封闭的。\n>这意味着一个类应该可以容易地扩展，而不需要修改类本身。\n\n我们来看下AreaCalculator类的sum方法：\n```java\npublic double sum() {\n\tdouble sum = 0.0f;\n\tfor(Object shape : this.shapes) {\n\t\tif(shape instanceof Circle) {\n\t\t\tCircle shape = (Circle)shape;\n\t\t\tsum += Math.pi * Math.sqrt(shape.getRadius());\n\t\t} else if(shape instanceof Square) {\n\t\t\tSquare shape = (Square)shape;\n\t\t\tsum += Math.sqrt(shape.getLength());\n\t\t}\n\t}\n\treturn sum;\n}   \n```\n如果我们要支持更多的图形就需要添加更多的“else if”代码块儿，这就违背了开闭原则。\n一种解决方式是把面积计算的逻辑迁移到图形类中，AreaCalculator类的sum方法调用图形类的面积计算方法。\n```java\nclass Circle {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\tpublic double area(){\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\tpublic double area(){\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n然后我们抽取公共方法area作为接口ShapeInterface的方法，这样新增图形的时候只要实现ShapeInterface接口。\n```java\ninterface ShapeInterface {\n\tdouble area();\n}\n\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area(){\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area(){\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n现在修改AreaCalculator类的sum方法：\n```java\nclass AreaCalculator {\n\n    private List<ShapeInterface> shapes;\n\n    public AreaCalculator(List<ShapeInterface> shapes) {\n        this.shapes = shapes;\n    }\n\n    public double sum() {\n    \treturn this.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();\n    }\n}\n```\n\n### 3. L – Liskov Substitution Principle 里氏替换原则 ###\n\n>对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。\n>\n>子类可以扩展父类的功能，但不能改变父类原有的功能。\n>\n>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。\n>\n>子类中可以增加自己特有的方法。\n>\n>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n>\n>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n违背里氏替换原则的例子，我们新增一个体积计算器类VolumeCalculator继承面积计算器类，覆盖sum方法：\n```java\nclass VolumeCalculator extends AreaCalulator {\n\n    public VolumeCalculator(List<ShapeInterface> shapes) {\n        super(shapes);\n    }\n\n\t@override\n    public double sum() {\n        // 新增其他逻辑操作变为体积统计\n        return this.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();\n    }\n\n}    \n```\n遵循里氏替换原则的例子如下：\n```java\nclass VolumeCalculator extends AreaCalulator {\n\n    public VolumeCalculator(List<ShapeInterface> shapes) {\n        super(shapes);\n    }\n\n\t/**\n\t * 新增体积统计方法\n\t */\n    public double volume() {\n    \treturn 0.0d;\n    }\n\n}    \n```\n\n### 4. I – Interface Segregation Principle 接口隔离原则 ###\n\n>多个特定客户端接口要好于一个宽泛用途的接口。\n>\n>客户端不应该强行依赖它不需要的接口。\n>\n>类间的依赖关系应该建立在最小的接口上。\n>\n>客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。\n>\n>“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。\n>\n>通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。\n\n我们继续以形状举例，形状有立体形状所以给形状接口ShapeInterface提供体积计算方法volume：\n```java\ninterface ShapeInterface {\n\tdouble area();\n\tdouble volume();\n}\n```\n所有实现ShapeInterface接口的形状类都要实现volume方法：\n```java\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\t\n\t@override\n\tpublic double volume() {\n\t\treturn 0.0d;\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn 0.0d;\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n\nclass Cube implements ShapeInterface {\n\n    private double length;\n\n    public Cube(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn 6 * Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn Math.pow(this.length, 3);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n这么做会导致Circle和Square这样的平面图形必须要实现一个不必要的volume方法。\n可以提供一个立体形状接口SolidShapeInterface，提供volume供立体形状来实现：\n```java\ninterface ShapeInterface {\n\tdouble area();\n}\n\ninterface SolidShapeInterface {\n\tdouble volume();\n}\n\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n\nclass Cube implements ShapeInterface, SolidShapeInterface {\n\n    private double length;\n\n    public Cube(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn 6 * Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn Math.pow(this.length, 3);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n\n### 5. D – Dependency Inversion Principle 依赖倒置原则 ###\n\n>一个方法应该遵从“依赖于抽象而不是一个实例”\n>\n>高层模块不应该依赖低层模块，两者都应该依赖其抽象；\n>\n>抽象不应该依赖细节；\n>\n>细节应该依赖抽象。\n\n>抽象：即抽象类或接口，两者是不能够实例化的。\n>\n>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。\n\n>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。\n>\n>这种场景下，类A一般是高层模块，负责复杂的业务逻辑。\n>\n>类B和C是底层模块，负责基本的原子操作。\n>\n>假如修改类A，将会给程序带来不必要的风险。\n>\n>而遵循依赖倒置原则的程序设计可以解决这一问题。\n\n下面以代码示例说明：\n```java\n//具体Jim人类\npublic class Jim {\n    public void eat(Apple apple){\n        System.out.println(\"Jim eat \" + apple.getName());\n    }\n}\n//具体苹果类\npublic class Apple {\n    public String getName(){\n        return \"apple\";\n    }\n}\npublic class Client {\n    public static void main(String[] args) {\n        Jim jim = new Jim();\n        Apple apple = new Apple();\n        jim.eat(apple);\n    }\n}\n```\n上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。\n\n上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。\n\n而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。\n\n代码如下：\n```java\n//人接口\npublic interface People {\n    public void eat(Fruit fruit);//人都有吃的方法，不然都饿死了\n}\n//水果接口\npublic interface Fruit {\n    public String getName();//水果都是有名字的\n}\n//具体Jim人类\npublic class Jim implements People{\n    public void eat(Fruit fruit){\n        System.out.println(\"Jim eat \" + fruit.getName());\n    }\n}\n//具体苹果类\npublic class Apple implements Fruit{\n    public String getName(){\n        return \"apple\";\n    }\n}\n//具体香蕉类\npublic class Banana implements Fruit{\n    public String getName(){\n        return \"banana\";\n    }\n}\npublic class Client {\n    public static void main(String[] args) {\n        People jim = new Jim();\n        Fruit apple = new Apple();\n        Fruit Banana = new Banana();//这里符合了里氏替换原则\n        jim.eat(apple);\n        jim.eat(Banana);\n    }\n}\n```\n* People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。\n* Pople和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。\n* Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。\n通过上面的代码段我们可以看到，高级和低级模块都取决于抽象。\n\n到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。\n\n依赖倒置常用的三种实现方式：\n\n1. 依赖接口作为参数使用\n2. 依赖接口通过构造函数传递\n3. 依赖接口通过setter方法传递\n\n### 总结 ###\n\n面向对象设计的这五条基本原则是设计模式和重构的基础。\n只有充分理解这五条原则才能更好的理解设计模式的思想，更好的进行代码的重构。\n","source":"_posts/solid.md","raw":"---\ntitle: 面向对象设计基本原则\ndate: '2017-10-27'\ndescription: 面向对象设计基本原则S.O.L.I.D\ncategories: \n- java\n\ntags:\n\n- oop\n- 设计模式\n\n---\n\n## 面向对象设计原则SOLID\n\n参考：\n\nhttps://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\n\nhttp://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html\n\n### 1. S – Single Responsibility Principle 职责单一原则 ###\n\t\n>对象应该仅具有一种单一功能。\t\n>概念上和unix的设计原则 “Do one thing and do it well”很相似。听起来很简单但是实践起来很难。\n\n比如，现在有一些图形要计算所有图形的面积。\n```java\nclass Circle {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n首先，创建图形类，包含构造函数和需要的属性参数。\n接下来创建面积计算类AreaCalculator，然后编写方法计算提供的图形参数的面积总和。\n```java\nclass AreaCalculator {\n\n    private List shapes;\n\n    public AreaCalculator(List shapes) {\n        this.shapes = shapes;\n    }\n\n    public double sum() {\n        // logic to sum the areas\n    }\n\n    public void output() {\n        return System.out.println(String.format(\"Sum of the areas of provided shapes: %s\", this.sum());\n    }\n}\n```\n简单实例化AreaCalculator对象，然后传入一个图形集合，然后调用output方法显示面积总和。\n```java\nAreaCalculator areaCalculator = new AreaCalculator(Arrays.asList(new Circle(10.0f), new Square(12.0f)));\nareaCalculator.output()\n```\n这里output方法的问题是AreaCalculator处理计算逻辑然后输出字符串结果。那么，如果用户想用json或者其他格式输出计算结果呢？\n所有的操作都放到AreaCalculator中做违背了职责单一原则。AreaCalculator应该只计算提供的图形的面积总和，而不用关心如何输入结果。\n\n因此，需要新建一个SumCalculatorOutputter类用来处理统计结果输出操作。\n\nSumCalculatorOutputter类如下：\n```java\nclass SumCalculatorOutputter {\n\n\tprivate AreaCalculator areaCalculator;\n\n\tpublic SumCalculatorOutputter(AreaCalculator areaCalculator) {\n\t\tthis.areaCalculator = areaCalculator;\n\t}\n\n\tpublic void outputJson() {\n\t\tdouble sum = this.areaCalculator.sum();\n\t}\n\n\tpublic void outputHtml() {\n\n\t}\n\n\tpublic void outputString() {\n\n\t}\n\n}\n\nAreaCalculator areaCalculator = new AreaCalculator(Arrays.asList(new Circle(10.0f), new Square(12.0f)));\n\nSumCalculatorOutputter output = new SumCalculatorOutputter(areaCalculator);\noutput.outputJson();\noutput.outputHtml();\noutput.outputString();\n```\n\n现在不管你要把结果按照何种方式输出都放在SumCalculatorOutputter中处理。\n\n### 2. O – Open-Closed Principle 开放封闭原则 ###\n\n>对象应该是对于扩展开放的，但是对于修改封闭的。\n>这意味着一个类应该可以容易地扩展，而不需要修改类本身。\n\n我们来看下AreaCalculator类的sum方法：\n```java\npublic double sum() {\n\tdouble sum = 0.0f;\n\tfor(Object shape : this.shapes) {\n\t\tif(shape instanceof Circle) {\n\t\t\tCircle shape = (Circle)shape;\n\t\t\tsum += Math.pi * Math.sqrt(shape.getRadius());\n\t\t} else if(shape instanceof Square) {\n\t\t\tSquare shape = (Square)shape;\n\t\t\tsum += Math.sqrt(shape.getLength());\n\t\t}\n\t}\n\treturn sum;\n}   \n```\n如果我们要支持更多的图形就需要添加更多的“else if”代码块儿，这就违背了开闭原则。\n一种解决方式是把面积计算的逻辑迁移到图形类中，AreaCalculator类的sum方法调用图形类的面积计算方法。\n```java\nclass Circle {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\tpublic double area(){\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\tpublic double area(){\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n然后我们抽取公共方法area作为接口ShapeInterface的方法，这样新增图形的时候只要实现ShapeInterface接口。\n```java\ninterface ShapeInterface {\n\tdouble area();\n}\n\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area(){\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area(){\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n现在修改AreaCalculator类的sum方法：\n```java\nclass AreaCalculator {\n\n    private List<ShapeInterface> shapes;\n\n    public AreaCalculator(List<ShapeInterface> shapes) {\n        this.shapes = shapes;\n    }\n\n    public double sum() {\n    \treturn this.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();\n    }\n}\n```\n\n### 3. L – Liskov Substitution Principle 里氏替换原则 ###\n\n>对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。\n>\n>子类可以扩展父类的功能，但不能改变父类原有的功能。\n>\n>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。\n>\n>子类中可以增加自己特有的方法。\n>\n>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n>\n>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n违背里氏替换原则的例子，我们新增一个体积计算器类VolumeCalculator继承面积计算器类，覆盖sum方法：\n```java\nclass VolumeCalculator extends AreaCalulator {\n\n    public VolumeCalculator(List<ShapeInterface> shapes) {\n        super(shapes);\n    }\n\n\t@override\n    public double sum() {\n        // 新增其他逻辑操作变为体积统计\n        return this.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();\n    }\n\n}    \n```\n遵循里氏替换原则的例子如下：\n```java\nclass VolumeCalculator extends AreaCalulator {\n\n    public VolumeCalculator(List<ShapeInterface> shapes) {\n        super(shapes);\n    }\n\n\t/**\n\t * 新增体积统计方法\n\t */\n    public double volume() {\n    \treturn 0.0d;\n    }\n\n}    \n```\n\n### 4. I – Interface Segregation Principle 接口隔离原则 ###\n\n>多个特定客户端接口要好于一个宽泛用途的接口。\n>\n>客户端不应该强行依赖它不需要的接口。\n>\n>类间的依赖关系应该建立在最小的接口上。\n>\n>客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。\n>\n>“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。\n>\n>通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。\n\n我们继续以形状举例，形状有立体形状所以给形状接口ShapeInterface提供体积计算方法volume：\n```java\ninterface ShapeInterface {\n\tdouble area();\n\tdouble volume();\n}\n```\n所有实现ShapeInterface接口的形状类都要实现volume方法：\n```java\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\t\n\t@override\n\tpublic double volume() {\n\t\treturn 0.0d;\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn 0.0d;\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n\nclass Cube implements ShapeInterface {\n\n    private double length;\n\n    public Cube(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn 6 * Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn Math.pow(this.length, 3);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n这么做会导致Circle和Square这样的平面图形必须要实现一个不必要的volume方法。\n可以提供一个立体形状接口SolidShapeInterface，提供volume供立体形状来实现：\n```java\ninterface ShapeInterface {\n\tdouble area();\n}\n\ninterface SolidShapeInterface {\n\tdouble volume();\n}\n\nclass Circle implements ShapeInterface {\n\n    private double radius;\n\n    public Circle Circle(double radius) {\n        this.radius = radius;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.PI * Math.sqrt(this.radius);\n\t}\n\n    private double getRadius() {\n    \treturn this.radius;\n    }\n}\n\nclass Square implements ShapeInterface {\n\n    private double length;\n\n    public Square(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn Math.sqrt(this.length);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n\nclass Cube implements ShapeInterface, SolidShapeInterface {\n\n    private double length;\n\n    public Cube(double length) {\n        this.length = length;\n    }\n\n\t@override\n\tpublic double area() {\n\t\treturn 6 * Math.sqrt(this.length);\n\t}\n\n\t@override\n\tpublic double volume() {\n\t\treturn Math.pow(this.length, 3);\n\t}\n\n\tpublic double getLength() {\n\t\treturn this.length;\n\t}\n}\n```\n\n### 5. D – Dependency Inversion Principle 依赖倒置原则 ###\n\n>一个方法应该遵从“依赖于抽象而不是一个实例”\n>\n>高层模块不应该依赖低层模块，两者都应该依赖其抽象；\n>\n>抽象不应该依赖细节；\n>\n>细节应该依赖抽象。\n\n>抽象：即抽象类或接口，两者是不能够实例化的。\n>\n>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。\n\n>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。\n>\n>这种场景下，类A一般是高层模块，负责复杂的业务逻辑。\n>\n>类B和C是底层模块，负责基本的原子操作。\n>\n>假如修改类A，将会给程序带来不必要的风险。\n>\n>而遵循依赖倒置原则的程序设计可以解决这一问题。\n\n下面以代码示例说明：\n```java\n//具体Jim人类\npublic class Jim {\n    public void eat(Apple apple){\n        System.out.println(\"Jim eat \" + apple.getName());\n    }\n}\n//具体苹果类\npublic class Apple {\n    public String getName(){\n        return \"apple\";\n    }\n}\npublic class Client {\n    public static void main(String[] args) {\n        Jim jim = new Jim();\n        Apple apple = new Apple();\n        jim.eat(apple);\n    }\n}\n```\n上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。\n\n上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。\n\n而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。\n\n代码如下：\n```java\n//人接口\npublic interface People {\n    public void eat(Fruit fruit);//人都有吃的方法，不然都饿死了\n}\n//水果接口\npublic interface Fruit {\n    public String getName();//水果都是有名字的\n}\n//具体Jim人类\npublic class Jim implements People{\n    public void eat(Fruit fruit){\n        System.out.println(\"Jim eat \" + fruit.getName());\n    }\n}\n//具体苹果类\npublic class Apple implements Fruit{\n    public String getName(){\n        return \"apple\";\n    }\n}\n//具体香蕉类\npublic class Banana implements Fruit{\n    public String getName(){\n        return \"banana\";\n    }\n}\npublic class Client {\n    public static void main(String[] args) {\n        People jim = new Jim();\n        Fruit apple = new Apple();\n        Fruit Banana = new Banana();//这里符合了里氏替换原则\n        jim.eat(apple);\n        jim.eat(Banana);\n    }\n}\n```\n* People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。\n* Pople和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。\n* Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。\n通过上面的代码段我们可以看到，高级和低级模块都取决于抽象。\n\n到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。\n\n依赖倒置常用的三种实现方式：\n\n1. 依赖接口作为参数使用\n2. 依赖接口通过构造函数传递\n3. 依赖接口通过setter方法传递\n\n### 总结 ###\n\n面向对象设计的这五条基本原则是设计模式和重构的基础。\n只有充分理解这五条原则才能更好的理解设计模式的思想，更好的进行代码的重构。\n","slug":"solid","published":1,"updated":"2018-06-20T03:08:08.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8ik0020vqqjopbwm9yk","content":"<h2 id=\"面向对象设计原则SOLID\"><a href=\"#面向对象设计原则SOLID\" class=\"headerlink\" title=\"面向对象设计原则SOLID\"></a>面向对象设计原则SOLID</h2><p>参考：</p>\n<p><a href=\"https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\" target=\"_blank\" rel=\"noopener\">https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design</a></p>\n<p><a href=\"http://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html</a></p>\n<h3 id=\"1-S-–-Single-Responsibility-Principle-职责单一原则\"><a href=\"#1-S-–-Single-Responsibility-Principle-职责单一原则\" class=\"headerlink\" title=\"1. S – Single Responsibility Principle 职责单一原则\"></a>1. S – Single Responsibility Principle 职责单一原则</h3><blockquote>\n<p>对象应该仅具有一种单一功能。<br>概念上和unix的设计原则 “Do one thing and do it well”很相似。听起来很简单但是实践起来很难。</p>\n</blockquote>\n<p>比如，现在有一些图形要计算所有图形的面积。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先，创建图形类，包含构造函数和需要的属性参数。<br>接下来创建面积计算类AreaCalculator，然后编写方法计算提供的图形参数的面积总和。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List shapes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AreaCalculator</span><span class=\"params\">(List shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shapes = shapes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// logic to sum the areas</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.out.println(String.format(<span class=\"string\">\"Sum of the areas of provided shapes: %s\"</span>, <span class=\"keyword\">this</span>.sum());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单实例化AreaCalculator对象，然后传入一个图形集合，然后调用output方法显示面积总和。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AreaCalculator areaCalculator = <span class=\"keyword\">new</span> AreaCalculator(Arrays.asList(<span class=\"keyword\">new</span> Circle(<span class=\"number\">10.0f</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">12.0f</span>)));</span><br><span class=\"line\">areaCalculator.output()</span><br></pre></td></tr></table></figure></p>\n<p>这里output方法的问题是AreaCalculator处理计算逻辑然后输出字符串结果。那么，如果用户想用json或者其他格式输出计算结果呢？<br>所有的操作都放到AreaCalculator中做违背了职责单一原则。AreaCalculator应该只计算提供的图形的面积总和，而不用关心如何输入结果。</p>\n<p>因此，需要新建一个SumCalculatorOutputter类用来处理统计结果输出操作。</p>\n<p>SumCalculatorOutputter类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumCalculatorOutputter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AreaCalculator areaCalculator;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SumCalculatorOutputter</span><span class=\"params\">(AreaCalculator areaCalculator)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.areaCalculator = areaCalculator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputJson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = <span class=\"keyword\">this</span>.areaCalculator.sum();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputHtml</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AreaCalculator areaCalculator = <span class=\"keyword\">new</span> AreaCalculator(Arrays.asList(<span class=\"keyword\">new</span> Circle(<span class=\"number\">10.0f</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">12.0f</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">SumCalculatorOutputter output = <span class=\"keyword\">new</span> SumCalculatorOutputter(areaCalculator);</span><br><span class=\"line\">output.outputJson();</span><br><span class=\"line\">output.outputHtml();</span><br><span class=\"line\">output.outputString();</span><br></pre></td></tr></table></figure></p>\n<p>现在不管你要把结果按照何种方式输出都放在SumCalculatorOutputter中处理。</p>\n<h3 id=\"2-O-–-Open-Closed-Principle-开放封闭原则\"><a href=\"#2-O-–-Open-Closed-Principle-开放封闭原则\" class=\"headerlink\" title=\"2. O – Open-Closed Principle 开放封闭原则\"></a>2. O – Open-Closed Principle 开放封闭原则</h3><blockquote>\n<p>对象应该是对于扩展开放的，但是对于修改封闭的。<br>这意味着一个类应该可以容易地扩展，而不需要修改类本身。</p>\n</blockquote>\n<p>我们来看下AreaCalculator类的sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> sum = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(Object shape : <span class=\"keyword\">this</span>.shapes) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(shape <span class=\"keyword\">instanceof</span> Circle) &#123;</span><br><span class=\"line\">\t\t\tCircle shape = (Circle)shape;</span><br><span class=\"line\">\t\t\tsum += Math.pi * Math.sqrt(shape.getRadius());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shape <span class=\"keyword\">instanceof</span> Square) &#123;</span><br><span class=\"line\">\t\t\tSquare shape = (Square)shape;</span><br><span class=\"line\">\t\t\tsum += Math.sqrt(shape.getLength());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果我们要支持更多的图形就需要添加更多的“else if”代码块儿，这就违背了开闭原则。<br>一种解决方式是把面积计算的逻辑迁移到图形类中，AreaCalculator类的sum方法调用图形类的面积计算方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们抽取公共方法area作为接口ShapeInterface的方法，这样新增图形的时候只要实现ShapeInterface接口。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在修改AreaCalculator类的sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ShapeInterface&gt; shapes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AreaCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shapes = shapes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-L-–-Liskov-Substitution-Principle-里氏替换原则\"><a href=\"#3-L-–-Liskov-Substitution-Principle-里氏替换原则\" class=\"headerlink\" title=\"3. L – Liskov Substitution Principle 里氏替换原则\"></a>3. L – Liskov Substitution Principle 里氏替换原则</h3><blockquote>\n<p>对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。</p>\n<p>子类可以扩展父类的功能，但不能改变父类原有的功能。</p>\n<p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</p>\n<p>子类中可以增加自己特有的方法。</p>\n<p>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</p>\n<p>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</p>\n</blockquote>\n<p>违背里氏替换原则的例子，我们新增一个体积计算器类VolumeCalculator继承面积计算器类，覆盖sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">AreaCalulator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VolumeCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(shapes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新增其他逻辑操作变为体积统计</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>遵循里氏替换原则的例子如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">AreaCalulator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VolumeCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(shapes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 新增体积统计方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-I-–-Interface-Segregation-Principle-接口隔离原则\"><a href=\"#4-I-–-Interface-Segregation-Principle-接口隔离原则\" class=\"headerlink\" title=\"4. I – Interface Segregation Principle 接口隔离原则\"></a>4. I – Interface Segregation Principle 接口隔离原则</h3><blockquote>\n<p>多个特定客户端接口要好于一个宽泛用途的接口。</p>\n<p>客户端不应该强行依赖它不需要的接口。</p>\n<p>类间的依赖关系应该建立在最小的接口上。</p>\n<p>客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。</p>\n<p>“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。</p>\n<p>通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</p>\n</blockquote>\n<p>我们继续以形状举例，形状有立体形状所以给形状接口ShapeInterface提供体积计算方法volume：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所有实现ShapeInterface接口的形状类都要实现volume方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cube</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cube</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">6</span> * Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.pow(<span class=\"keyword\">this</span>.length, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这么做会导致Circle和Square这样的平面图形必须要实现一个不必要的volume方法。<br>可以提供一个立体形状接口SolidShapeInterface，提供volume供立体形状来实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SolidShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cube</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span>, <span class=\"title\">SolidShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cube</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">6</span> * Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.pow(<span class=\"keyword\">this</span>.length, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-D-–-Dependency-Inversion-Principle-依赖倒置原则\"><a href=\"#5-D-–-Dependency-Inversion-Principle-依赖倒置原则\" class=\"headerlink\" title=\"5. D – Dependency Inversion Principle 依赖倒置原则\"></a>5. D – Dependency Inversion Principle 依赖倒置原则</h3><blockquote>\n<p>一个方法应该遵从“依赖于抽象而不是一个实例”</p>\n<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</p>\n<p>抽象不应该依赖细节；</p>\n<p>细节应该依赖抽象。</p>\n</blockquote>\n<blockquote>\n<p>抽象：即抽象类或接口，两者是不能够实例化的。</p>\n<p>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</p>\n</blockquote>\n<blockquote>\n<p>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。</p>\n<p>这种场景下，类A一般是高层模块，负责复杂的业务逻辑。</p>\n<p>类B和C是底层模块，负责基本的原子操作。</p>\n<p>假如修改类A，将会给程序带来不必要的风险。</p>\n<p>而遵循依赖倒置原则的程序设计可以解决这一问题。</p>\n</blockquote>\n<p>下面以代码示例说明：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//具体Jim人类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jim</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Apple apple)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Jim eat \"</span> + apple.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体苹果类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Jim jim = <span class=\"keyword\">new</span> Jim();</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        jim.eat(apple);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。</p>\n<p>上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。</p>\n<p>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//人接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Fruit fruit)</span></span>;<span class=\"comment\">//人都有吃的方法，不然都饿死了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//水果接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;<span class=\"comment\">//水果都是有名字的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体Jim人类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jim</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Fruit fruit)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Jim eat \"</span> + fruit.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体苹果类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体香蕉类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"banana\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People jim = <span class=\"keyword\">new</span> Jim();</span><br><span class=\"line\">        Fruit apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        Fruit Banana = <span class=\"keyword\">new</span> Banana();<span class=\"comment\">//这里符合了里氏替换原则</span></span><br><span class=\"line\">        jim.eat(apple);</span><br><span class=\"line\">        jim.eat(Banana);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>\n<li>Pople和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。</li>\n<li>Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。<br>通过上面的代码段我们可以看到，高级和低级模块都取决于抽象。</li>\n</ul>\n<p>到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。</p>\n<p>依赖倒置常用的三种实现方式：</p>\n<ol>\n<li>依赖接口作为参数使用</li>\n<li>依赖接口通过构造函数传递</li>\n<li>依赖接口通过setter方法传递</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>面向对象设计的这五条基本原则是设计模式和重构的基础。<br>只有充分理解这五条原则才能更好的理解设计模式的思想，更好的进行代码的重构。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向对象设计原则SOLID\"><a href=\"#面向对象设计原则SOLID\" class=\"headerlink\" title=\"面向对象设计原则SOLID\"></a>面向对象设计原则SOLID</h2><p>参考：</p>\n<p><a href=\"https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\" target=\"_blank\" rel=\"noopener\">https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design</a></p>\n<p><a href=\"http://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hellojava/archive/2013/03/18/2966684.html</a></p>\n<h3 id=\"1-S-–-Single-Responsibility-Principle-职责单一原则\"><a href=\"#1-S-–-Single-Responsibility-Principle-职责单一原则\" class=\"headerlink\" title=\"1. S – Single Responsibility Principle 职责单一原则\"></a>1. S – Single Responsibility Principle 职责单一原则</h3><blockquote>\n<p>对象应该仅具有一种单一功能。<br>概念上和unix的设计原则 “Do one thing and do it well”很相似。听起来很简单但是实践起来很难。</p>\n</blockquote>\n<p>比如，现在有一些图形要计算所有图形的面积。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先，创建图形类，包含构造函数和需要的属性参数。<br>接下来创建面积计算类AreaCalculator，然后编写方法计算提供的图形参数的面积总和。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List shapes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AreaCalculator</span><span class=\"params\">(List shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shapes = shapes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// logic to sum the areas</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.out.println(String.format(<span class=\"string\">\"Sum of the areas of provided shapes: %s\"</span>, <span class=\"keyword\">this</span>.sum());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单实例化AreaCalculator对象，然后传入一个图形集合，然后调用output方法显示面积总和。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AreaCalculator areaCalculator = <span class=\"keyword\">new</span> AreaCalculator(Arrays.asList(<span class=\"keyword\">new</span> Circle(<span class=\"number\">10.0f</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">12.0f</span>)));</span><br><span class=\"line\">areaCalculator.output()</span><br></pre></td></tr></table></figure></p>\n<p>这里output方法的问题是AreaCalculator处理计算逻辑然后输出字符串结果。那么，如果用户想用json或者其他格式输出计算结果呢？<br>所有的操作都放到AreaCalculator中做违背了职责单一原则。AreaCalculator应该只计算提供的图形的面积总和，而不用关心如何输入结果。</p>\n<p>因此，需要新建一个SumCalculatorOutputter类用来处理统计结果输出操作。</p>\n<p>SumCalculatorOutputter类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumCalculatorOutputter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AreaCalculator areaCalculator;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SumCalculatorOutputter</span><span class=\"params\">(AreaCalculator areaCalculator)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.areaCalculator = areaCalculator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputJson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = <span class=\"keyword\">this</span>.areaCalculator.sum();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputHtml</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">outputString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AreaCalculator areaCalculator = <span class=\"keyword\">new</span> AreaCalculator(Arrays.asList(<span class=\"keyword\">new</span> Circle(<span class=\"number\">10.0f</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">12.0f</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">SumCalculatorOutputter output = <span class=\"keyword\">new</span> SumCalculatorOutputter(areaCalculator);</span><br><span class=\"line\">output.outputJson();</span><br><span class=\"line\">output.outputHtml();</span><br><span class=\"line\">output.outputString();</span><br></pre></td></tr></table></figure></p>\n<p>现在不管你要把结果按照何种方式输出都放在SumCalculatorOutputter中处理。</p>\n<h3 id=\"2-O-–-Open-Closed-Principle-开放封闭原则\"><a href=\"#2-O-–-Open-Closed-Principle-开放封闭原则\" class=\"headerlink\" title=\"2. O – Open-Closed Principle 开放封闭原则\"></a>2. O – Open-Closed Principle 开放封闭原则</h3><blockquote>\n<p>对象应该是对于扩展开放的，但是对于修改封闭的。<br>这意味着一个类应该可以容易地扩展，而不需要修改类本身。</p>\n</blockquote>\n<p>我们来看下AreaCalculator类的sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> sum = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(Object shape : <span class=\"keyword\">this</span>.shapes) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(shape <span class=\"keyword\">instanceof</span> Circle) &#123;</span><br><span class=\"line\">\t\t\tCircle shape = (Circle)shape;</span><br><span class=\"line\">\t\t\tsum += Math.pi * Math.sqrt(shape.getRadius());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shape <span class=\"keyword\">instanceof</span> Square) &#123;</span><br><span class=\"line\">\t\t\tSquare shape = (Square)shape;</span><br><span class=\"line\">\t\t\tsum += Math.sqrt(shape.getLength());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果我们要支持更多的图形就需要添加更多的“else if”代码块儿，这就违背了开闭原则。<br>一种解决方式是把面积计算的逻辑迁移到图形类中，AreaCalculator类的sum方法调用图形类的面积计算方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们抽取公共方法area作为接口ShapeInterface的方法，这样新增图形的时候只要实现ShapeInterface接口。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在修改AreaCalculator类的sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ShapeInterface&gt; shapes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AreaCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shapes = shapes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-L-–-Liskov-Substitution-Principle-里氏替换原则\"><a href=\"#3-L-–-Liskov-Substitution-Principle-里氏替换原则\" class=\"headerlink\" title=\"3. L – Liskov Substitution Principle 里氏替换原则\"></a>3. L – Liskov Substitution Principle 里氏替换原则</h3><blockquote>\n<p>对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。</p>\n<p>子类可以扩展父类的功能，但不能改变父类原有的功能。</p>\n<p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</p>\n<p>子类中可以增加自己特有的方法。</p>\n<p>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</p>\n<p>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</p>\n</blockquote>\n<p>违背里氏替换原则的例子，我们新增一个体积计算器类VolumeCalculator继承面积计算器类，覆盖sum方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">AreaCalulator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VolumeCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(shapes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新增其他逻辑操作变为体积统计</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shapes.stream.map(ShapeInterface::sum).mapToDouble(Double::doubleValue).sum();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>遵循里氏替换原则的例子如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">AreaCalulator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VolumeCalculator</span><span class=\"params\">(List&lt;ShapeInterface&gt; shapes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(shapes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 新增体积统计方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-I-–-Interface-Segregation-Principle-接口隔离原则\"><a href=\"#4-I-–-Interface-Segregation-Principle-接口隔离原则\" class=\"headerlink\" title=\"4. I – Interface Segregation Principle 接口隔离原则\"></a>4. I – Interface Segregation Principle 接口隔离原则</h3><blockquote>\n<p>多个特定客户端接口要好于一个宽泛用途的接口。</p>\n<p>客户端不应该强行依赖它不需要的接口。</p>\n<p>类间的依赖关系应该建立在最小的接口上。</p>\n<p>客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。</p>\n<p>“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。</p>\n<p>通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</p>\n</blockquote>\n<p>我们继续以形状举例，形状有立体形状所以给形状接口ShapeInterface提供体积计算方法volume：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所有实现ShapeInterface接口的形状类都要实现volume方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cube</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cube</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">6</span> * Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.pow(<span class=\"keyword\">this</span>.length, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这么做会导致Circle和Square这样的平面图形必须要实现一个不必要的volume方法。<br>可以提供一个立体形状接口SolidShapeInterface，提供volume供立体形状来实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SolidShapeInterface</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Circle <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.PI * Math.sqrt(<span class=\"keyword\">this</span>.radius);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cube</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShapeInterface</span>, <span class=\"title\">SolidShapeInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cube</span><span class=\"params\">(<span class=\"keyword\">double</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">6</span> * Math.sqrt(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">volume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.pow(<span class=\"keyword\">this</span>.length, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-D-–-Dependency-Inversion-Principle-依赖倒置原则\"><a href=\"#5-D-–-Dependency-Inversion-Principle-依赖倒置原则\" class=\"headerlink\" title=\"5. D – Dependency Inversion Principle 依赖倒置原则\"></a>5. D – Dependency Inversion Principle 依赖倒置原则</h3><blockquote>\n<p>一个方法应该遵从“依赖于抽象而不是一个实例”</p>\n<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</p>\n<p>抽象不应该依赖细节；</p>\n<p>细节应该依赖抽象。</p>\n</blockquote>\n<blockquote>\n<p>抽象：即抽象类或接口，两者是不能够实例化的。</p>\n<p>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</p>\n</blockquote>\n<blockquote>\n<p>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。</p>\n<p>这种场景下，类A一般是高层模块，负责复杂的业务逻辑。</p>\n<p>类B和C是底层模块，负责基本的原子操作。</p>\n<p>假如修改类A，将会给程序带来不必要的风险。</p>\n<p>而遵循依赖倒置原则的程序设计可以解决这一问题。</p>\n</blockquote>\n<p>下面以代码示例说明：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//具体Jim人类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jim</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Apple apple)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Jim eat \"</span> + apple.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体苹果类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Jim jim = <span class=\"keyword\">new</span> Jim();</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        jim.eat(apple);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。</p>\n<p>上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。</p>\n<p>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//人接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Fruit fruit)</span></span>;<span class=\"comment\">//人都有吃的方法，不然都饿死了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//水果接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;<span class=\"comment\">//水果都是有名字的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体Jim人类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jim</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(Fruit fruit)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Jim eat \"</span> + fruit.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体苹果类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体香蕉类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"banana\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People jim = <span class=\"keyword\">new</span> Jim();</span><br><span class=\"line\">        Fruit apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        Fruit Banana = <span class=\"keyword\">new</span> Banana();<span class=\"comment\">//这里符合了里氏替换原则</span></span><br><span class=\"line\">        jim.eat(apple);</span><br><span class=\"line\">        jim.eat(Banana);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>\n<li>Pople和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。</li>\n<li>Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。<br>通过上面的代码段我们可以看到，高级和低级模块都取决于抽象。</li>\n</ul>\n<p>到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。</p>\n<p>依赖倒置常用的三种实现方式：</p>\n<ol>\n<li>依赖接口作为参数使用</li>\n<li>依赖接口通过构造函数传递</li>\n<li>依赖接口通过setter方法传递</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>面向对象设计的这五条基本原则是设计模式和重构的基础。<br>只有充分理解这五条原则才能更好的理解设计模式的思想，更好的进行代码的重构。</p>\n"},{"title":"使用sublime text2 编辑markdown文件并导出带目录的html","date":"2015-07-16T00:00:00.000Z","description":"使用sublime text 2 配置markdown高亮显示，导出带目录的html","_content":"前一篇文章介绍了使用markdown pad2来生成带目录的html文件。但是有很多程序员喜欢使用sublime来进行markdown的编写。这里介绍一下sublime下如何把markdown文件生成带目录的html。\n\n## 环境 ##\n\nwin7、 sublime text2\n\n## 配置过程 ##\n\n**sublime text 安装 markdown preview插件**\n\nsublime text 安装插件基本配置请参看之前的一篇文章：\n\n[sublime text2 安装插件](http://sakyawang.github.io/sublime/sublime-text2-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/)\n\nctrl+shift+P 调出窗口，输入 install package --> 输入 markdown preview 选中安装插件。\n\n**配置markdown高亮显示**\n\n在Preferences ->Package Settings->Markdown Preview->Setting Default中找到\n\n\t\"enable_mathjax\": true,\n\n    /*\n        Enable uml support scripts: flowchart.js and sequence-diagram.js.\n    */\n    \"enable_uml\": false,\n\n    /*\n        Enable highlighting. This enables codehilite extension if not already enabled.\n    */\n    \"enable_highlight\": true,\n\nenable_mathjax 和 enable_highlight设置为true。\n\n## 编写markdown输出带目录的html ##\n\n新建test.md文件，输入测试内容：\n\n\t[TOC]\n\t# 标题 #\n\t## 标题1 ##\n\t\n\t标题1内容\n\t\n\t### 标题11 ###\n\t\n\t标题11内容\n\t\n\t### 标题12 ###\n\t\n\t标题12内容\n\t \n\t## 标题2 ##\n\t\n\t标题2内容\n\t\n\t### 标题21 ###\n\t\n\t标题21内容\n\t\n\t### 标题22 ###\n\t\n\t标题22内容\n\t\n\t## 标题3 ##\n\t\n\t标题3内容\n\t\n\t### 标题31 ###\n\t\n\t标题31内容\n\t\n\t### 标题32 ###\n\t\n\t标题32内容\n\n配置markdown preview编译生成html文件，如下：\n\n![配置markdown编译](http://7xj99v.com1.z0.glb.clouddn.com/sublimeconfig.png)\n\n执行ctrl + B编译markdown为html\n\n![编译markdown](http://7xj99v.com1.z0.glb.clouddn.com/buildmarkdown.png)\n\n打开test.html查看效果\n\n![效果](http://7xj99v.com1.z0.glb.clouddn.com/testhtml.jpg)\n\n***关键点是在要生成目录的位置添加[TOC]***\n\n\n","source":"_posts/sublime-md-heml.md","raw":"---\ntitle: 使用sublime text2 编辑markdown文件并导出带目录的html\ndate: '2015-07-16'\ndescription: 使用sublime text 2 配置markdown高亮显示，导出带目录的html\ncategories:\n- sublime\ntags:\n- markdown\n- sublime\n\n---\n前一篇文章介绍了使用markdown pad2来生成带目录的html文件。但是有很多程序员喜欢使用sublime来进行markdown的编写。这里介绍一下sublime下如何把markdown文件生成带目录的html。\n\n## 环境 ##\n\nwin7、 sublime text2\n\n## 配置过程 ##\n\n**sublime text 安装 markdown preview插件**\n\nsublime text 安装插件基本配置请参看之前的一篇文章：\n\n[sublime text2 安装插件](http://sakyawang.github.io/sublime/sublime-text2-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/)\n\nctrl+shift+P 调出窗口，输入 install package --> 输入 markdown preview 选中安装插件。\n\n**配置markdown高亮显示**\n\n在Preferences ->Package Settings->Markdown Preview->Setting Default中找到\n\n\t\"enable_mathjax\": true,\n\n    /*\n        Enable uml support scripts: flowchart.js and sequence-diagram.js.\n    */\n    \"enable_uml\": false,\n\n    /*\n        Enable highlighting. This enables codehilite extension if not already enabled.\n    */\n    \"enable_highlight\": true,\n\nenable_mathjax 和 enable_highlight设置为true。\n\n## 编写markdown输出带目录的html ##\n\n新建test.md文件，输入测试内容：\n\n\t[TOC]\n\t# 标题 #\n\t## 标题1 ##\n\t\n\t标题1内容\n\t\n\t### 标题11 ###\n\t\n\t标题11内容\n\t\n\t### 标题12 ###\n\t\n\t标题12内容\n\t \n\t## 标题2 ##\n\t\n\t标题2内容\n\t\n\t### 标题21 ###\n\t\n\t标题21内容\n\t\n\t### 标题22 ###\n\t\n\t标题22内容\n\t\n\t## 标题3 ##\n\t\n\t标题3内容\n\t\n\t### 标题31 ###\n\t\n\t标题31内容\n\t\n\t### 标题32 ###\n\t\n\t标题32内容\n\n配置markdown preview编译生成html文件，如下：\n\n![配置markdown编译](http://7xj99v.com1.z0.glb.clouddn.com/sublimeconfig.png)\n\n执行ctrl + B编译markdown为html\n\n![编译markdown](http://7xj99v.com1.z0.glb.clouddn.com/buildmarkdown.png)\n\n打开test.html查看效果\n\n![效果](http://7xj99v.com1.z0.glb.clouddn.com/testhtml.jpg)\n\n***关键点是在要生成目录的位置添加[TOC]***\n\n\n","slug":"sublime-md-heml","published":1,"updated":"2018-06-20T03:09:01.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8im0024vqqjnqiw7mdt","content":"<p>前一篇文章介绍了使用markdown pad2来生成带目录的html文件。但是有很多程序员喜欢使用sublime来进行markdown的编写。这里介绍一下sublime下如何把markdown文件生成带目录的html。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、 sublime text2</p>\n<h2 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h2><p><strong>sublime text 安装 markdown preview插件</strong></p>\n<p>sublime text 安装插件基本配置请参看之前的一篇文章：</p>\n<p><a href=\"http://sakyawang.github.io/sublime/sublime-text2-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">sublime text2 安装插件</a></p>\n<p>ctrl+shift+P 调出窗口，输入 install package –&gt; 输入 markdown preview 选中安装插件。</p>\n<p><strong>配置markdown高亮显示</strong></p>\n<p>在Preferences -&gt;Package Settings-&gt;Markdown Preview-&gt;Setting Default中找到</p>\n<pre><code>&quot;enable_mathjax&quot;: true,\n\n/*\n    Enable uml support scripts: flowchart.js and sequence-diagram.js.\n*/\n&quot;enable_uml&quot;: false,\n\n/*\n    Enable highlighting. This enables codehilite extension if not already enabled.\n*/\n&quot;enable_highlight&quot;: true,\n</code></pre><p>enable_mathjax 和 enable_highlight设置为true。</p>\n<h2 id=\"编写markdown输出带目录的html\"><a href=\"#编写markdown输出带目录的html\" class=\"headerlink\" title=\"编写markdown输出带目录的html\"></a>编写markdown输出带目录的html</h2><p>新建test.md文件，输入测试内容：</p>\n<pre><code>[TOC]\n# 标题 #\n## 标题1 ##\n\n标题1内容\n\n### 标题11 ###\n\n标题11内容\n\n### 标题12 ###\n\n标题12内容\n\n## 标题2 ##\n\n标题2内容\n\n### 标题21 ###\n\n标题21内容\n\n### 标题22 ###\n\n标题22内容\n\n## 标题3 ##\n\n标题3内容\n\n### 标题31 ###\n\n标题31内容\n\n### 标题32 ###\n\n标题32内容\n</code></pre><p>配置markdown preview编译生成html文件，如下：</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/sublimeconfig.png\" alt=\"配置markdown编译\"></p>\n<p>执行ctrl + B编译markdown为html</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/buildmarkdown.png\" alt=\"编译markdown\"></p>\n<p>打开test.html查看效果</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/testhtml.jpg\" alt=\"效果\"></p>\n<p><strong><em>关键点是在要生成目录的位置添加[TOC]</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前一篇文章介绍了使用markdown pad2来生成带目录的html文件。但是有很多程序员喜欢使用sublime来进行markdown的编写。这里介绍一下sublime下如何把markdown文件生成带目录的html。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、 sublime text2</p>\n<h2 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h2><p><strong>sublime text 安装 markdown preview插件</strong></p>\n<p>sublime text 安装插件基本配置请参看之前的一篇文章：</p>\n<p><a href=\"http://sakyawang.github.io/sublime/sublime-text2-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">sublime text2 安装插件</a></p>\n<p>ctrl+shift+P 调出窗口，输入 install package –&gt; 输入 markdown preview 选中安装插件。</p>\n<p><strong>配置markdown高亮显示</strong></p>\n<p>在Preferences -&gt;Package Settings-&gt;Markdown Preview-&gt;Setting Default中找到</p>\n<pre><code>&quot;enable_mathjax&quot;: true,\n\n/*\n    Enable uml support scripts: flowchart.js and sequence-diagram.js.\n*/\n&quot;enable_uml&quot;: false,\n\n/*\n    Enable highlighting. This enables codehilite extension if not already enabled.\n*/\n&quot;enable_highlight&quot;: true,\n</code></pre><p>enable_mathjax 和 enable_highlight设置为true。</p>\n<h2 id=\"编写markdown输出带目录的html\"><a href=\"#编写markdown输出带目录的html\" class=\"headerlink\" title=\"编写markdown输出带目录的html\"></a>编写markdown输出带目录的html</h2><p>新建test.md文件，输入测试内容：</p>\n<pre><code>[TOC]\n# 标题 #\n## 标题1 ##\n\n标题1内容\n\n### 标题11 ###\n\n标题11内容\n\n### 标题12 ###\n\n标题12内容\n\n## 标题2 ##\n\n标题2内容\n\n### 标题21 ###\n\n标题21内容\n\n### 标题22 ###\n\n标题22内容\n\n## 标题3 ##\n\n标题3内容\n\n### 标题31 ###\n\n标题31内容\n\n### 标题32 ###\n\n标题32内容\n</code></pre><p>配置markdown preview编译生成html文件，如下：</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/sublimeconfig.png\" alt=\"配置markdown编译\"></p>\n<p>执行ctrl + B编译markdown为html</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/buildmarkdown.png\" alt=\"编译markdown\"></p>\n<p>打开test.html查看效果</p>\n<p><img src=\"http://7xj99v.com1.z0.glb.clouddn.com/testhtml.jpg\" alt=\"效果\"></p>\n<p><strong><em>关键点是在要生成目录的位置添加[TOC]</em></strong></p>\n"},{"title":"sublime text2 安装插件","date":"2015-07-08T00:00:00.000Z","description":"sublime text2 配置安装插件","_content":"sublime tex t2本身自带了编程语言雷插件，可以通过Preferences-->Browse Packages查看。\n当然还有一些方便开发的插件需要单独安装。这里说一下sublime text2安装插件的操作流程。\n\n## 环境 ##\n\nwin7、sublime text2\n\n## 配置 ##\n\n打开sublime 使用ctrl+` 调出控制台窗口，输入：\n\n\timport urllib2,os; \n\tpf='Package Control.sublime-package'; \n\tipp=sublime.installed_packages_path(); \n\tos.makedirs(ipp) \n\tif not \n\t\tos.path.exists(ipp) \n\telse \n\t\tNone; \n\turllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));\n\topen(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); \n\tprint 'Please restart Sublime Text to finish installation'\n\n执行完毕之后，重启sublime。\n\n## 安装插件 ##\n\nctrl+shift+P调出功能搜索框，输入 install 选择 install package，然后查找自己喜欢的插件 选择安装。\n\n","source":"_posts/sublime-config.md","raw":"---\ntitle: sublime text2 安装插件\ndate: '2015-07-08'\ndescription: sublime text2 配置安装插件\ncategories:\n- sublime\n\ntags:\n- sublime\n- config\n\n---\nsublime tex t2本身自带了编程语言雷插件，可以通过Preferences-->Browse Packages查看。\n当然还有一些方便开发的插件需要单独安装。这里说一下sublime text2安装插件的操作流程。\n\n## 环境 ##\n\nwin7、sublime text2\n\n## 配置 ##\n\n打开sublime 使用ctrl+` 调出控制台窗口，输入：\n\n\timport urllib2,os; \n\tpf='Package Control.sublime-package'; \n\tipp=sublime.installed_packages_path(); \n\tos.makedirs(ipp) \n\tif not \n\t\tos.path.exists(ipp) \n\telse \n\t\tNone; \n\turllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));\n\topen(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); \n\tprint 'Please restart Sublime Text to finish installation'\n\n执行完毕之后，重启sublime。\n\n## 安装插件 ##\n\nctrl+shift+P调出功能搜索框，输入 install 选择 install package，然后查找自己喜欢的插件 选择安装。\n\n","slug":"sublime-config","published":1,"updated":"2018-06-20T03:08:29.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8io0027vqqjc3p1jj1h","content":"<p>sublime tex t2本身自带了编程语言雷插件，可以通过Preferences–&gt;Browse Packages查看。<br>当然还有一些方便开发的插件需要单独安装。这里说一下sublime text2安装插件的操作流程。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、sublime text2</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>打开sublime 使用ctrl+` 调出控制台窗口，输入：</p>\n<pre><code>import urllib2,os; \npf=&apos;Package Control.sublime-package&apos;; \nipp=sublime.installed_packages_path(); \nos.makedirs(ipp) \nif not \n    os.path.exists(ipp) \nelse \n    None; \nurllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));\nopen(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib2.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read()); \nprint &apos;Please restart Sublime Text to finish installation&apos;\n</code></pre><p>执行完毕之后，重启sublime。</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>ctrl+shift+P调出功能搜索框，输入 install 选择 install package，然后查找自己喜欢的插件 选择安装。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sublime tex t2本身自带了编程语言雷插件，可以通过Preferences–&gt;Browse Packages查看。<br>当然还有一些方便开发的插件需要单独安装。这里说一下sublime text2安装插件的操作流程。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、sublime text2</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>打开sublime 使用ctrl+` 调出控制台窗口，输入：</p>\n<pre><code>import urllib2,os; \npf=&apos;Package Control.sublime-package&apos;; \nipp=sublime.installed_packages_path(); \nos.makedirs(ipp) \nif not \n    os.path.exists(ipp) \nelse \n    None; \nurllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));\nopen(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib2.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read()); \nprint &apos;Please restart Sublime Text to finish installation&apos;\n</code></pre><p>执行完毕之后，重启sublime。</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>ctrl+shift+P调出功能搜索框，输入 install 选择 install package，然后查找自己喜欢的插件 选择安装。</p>\n"},{"title":"Taiga环境搭建","date":"2018-04-23T00:00:00.000Z","description":"Taiga环境搭建","_content":"\n# Taiga环境搭建\n\n## 环境配置\n\n    unbuntu 16.4 \n    taiga stable\n\n## 安装\n\n1. 创建taiga用户\n    \n        sudo adduser taiga\n        sudo adduser taiga sudo\n        sudo su taiga\n\n2. 安装依赖软件\n\n        sudo apt-get update\n        sudo apt-get install -y build-essential binutils-doc autoconf flex bison libjpeg-dev\n        sudo apt-get install -y libfreetype6-dev zlib1g-dev libzmq3-dev libgdbm-dev libncurses5-dev\n        sudo apt-get install -y automake libtool libffi-dev curl git tmux gettext\n        sudo apt-get install -y nginx\n        sudo apt-get install -y rabbitmq-server redis-server\n        sudo apt-get install -y circus\n\n        sudo apt-get install -y postgresql-9.5 postgresql-contrib-9.5\n        sudo apt-get install -y postgresql-doc-9.5 postgresql-server-dev-9.5\n\n        sudo apt-get install -y python3 python3-pip python-dev python3-dev python-pip virtualenvwrapper\n        sudo apt-get install -y libxml2-dev libxslt-dev\n        sudo apt-get install -y libssl-dev libffi-dev\n\n3. 初始化postgresql\n\n        sudo -u postgres createuser taiga\n        sudo -u postgres createdb taiga -O taiga --encoding='utf-8' --locale=en_US.utf8 --template=template0\n\n\n4. 初始化RabbitMQ\n\n        sudo rabbitmqctl add_user taiga PASSWORD_FOR_EVENTS\n        sudo rabbitmqctl add_vhost taiga\n        sudo rabbitmqctl set_permissions -p taiga taiga \".*\" \".*\" \".*\"\n\n5. 创建日志目录\n\n        mkdir -p ~/logs\n\n6. Taiga backend安装配置\n    \n        ## 下载代码切换分支\n        cd ~\n        git clone https://github.com/taigaio/taiga-back.git taiga-back\n        cd taiga-back\n        git checkout stable\n\n        ## 创建python虚拟环境 \n        mkvirtualenv -p /usr/bin/python3.5 taiga\n\n        ## 安装依赖\n        pip install -r requirements.txt\n\n        ## 初始化数据库（默认用户 admin/123123）\n        python manage.py migrate --noinput\n        python manage.py loaddata initial_user\n        python manage.py loaddata initial_project_templates\n        python manage.py compilemessages\n        python manage.py collectstatic --noinput\n\n        ## 配置~/taiga-back/settings/local.py\n        DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.postgresql',\n                'NAME': 'taiga',\n                'USER': 'taiga',\n                'PASSWORD': 'Cloudmap123',\n                'HOST': '',\n                'PORT': '',\n            }\n        }\n\n        SITES = {\n            \"api\": {\n               \"scheme\": \"http\",\n               \"domain\": \"10.2.0.6:8000\",\n               \"name\": \"api\"\n            },\n            \"front\": {\n               \"scheme\": \"http\",\n               \"domain\": \"10.2.0.6:9001\",\n               \"name\": \"front\"\n            }\n        }\n\n        ## 配置~/taiga-back/settings/common.py\n        LANGUAGE_CODE = 'zh-hans'  # 修改默认语言为简体中文\n\n        MEDIA_URL = \"http://10.2.0.6/media/\" # 解决wen界面用户头像url异常为：localhost:8000\n        STATIC_URL = \"http://10.2.0.6/static/\" # 解决后台管理系统样式丢失\n        \n        ## 配置事件连接秘钥，值取taiga-event的config.json中的secret\n        SECRET_KEY = \"aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e\"\n\n        ## 验证配置\n        workon taiga\n        python manage.py runserver\n        # 访问 http://localhost:8000/api/v1/ 有数据返回\n\n7. Taiga frontend安装配置\n\n        ## 下载代码切换分支\n        cd ~\n        git clone https://github.com/taigaio/taiga-front-dist.git taiga-front-dist\n        cd taiga-front-dist\n        git checkout stable\n\n        ## 创建配置文件修改配置\n        cp ~/taiga-front-dist/dist/conf.example.json ~/taiga-front-dist/dist/conf.json\n\n        {\n            \"api\": \"http://10.2.0.6/api/v1/\",\n            \"eventsUrl\": \"ws://10.2.0.6/events\",\n            \"eventsMaxMissedHeartbeats\": 5,\n            \"eventsHeartbeatIntervalTime\": 60000,\n            \"eventsReconnectTryInterval\": 10000,\n            \"debug\": true,\n            \"debugInfo\": false,\n            \"defaultLanguage\": \"zh-hans\", /**修改默认语言为中文简体**/\n            \"themes\": [\"taiga\"],\n            \"defaultTheme\": \"taiga\",\n            \"publicRegisterEnabled\": false,\n            \"feedbackEnabled\": true,\n            \"supportUrl\": \"https://tree.taiga.io/support\",\n            \"privacyPolicyUrl\": null,\n            \"termsOfServiceUrl\": null,\n            \"maxUploadFileSize\": null,\n            \"contribPlugins\": [],\n            \"tribeHost\": null,\n            \"importers\": [],\n            \"gravatar\": true\n        }\n\n8. Taiga event安装配置（可选，用来做消息通知）\n\n        ## 下载代码\n        cd ~\n        git clone https://github.com/taigaio/taiga-events.git taiga-events\n        cd taiga-events\n\n        ## 安装nodejs、npm\n        curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n        sudo apt-get install -y nodejs\n        sudo apt-get install -y npm\n\n        ## 修改nodejs服务为node，解决npm install找不到node服务异常\n        sudo ln -s /usr/bin/nodejs /usr/bin/node\n\n        ## 安装项目nodejs模块依赖\n        npm install\n        sudo npm install -g coffee-script\n\n        ## 创建配置文件修改配置\n        cp config.example.json config.json\n\n        {\n            \"url\": \"amqp://taiga:cloudmap@localhost:5672/taiga\", /**用户名密码为第四步初始化rabbitmq时设置的**/\n            \"secret\": \"aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e\",/**配置事件连接秘钥，值和taiga-ebackend的ccommon.py的SECRET_KEY一致**/\n            \"webSocketServer\": {\n                \"port\": 8888\n            }\n        }\n\n        ## 添加配置到circus中/etc/circus/conf.d/taiga-events.ini\n        [watcher:taiga-events]\n        working_dir = /home/taiga/taiga-events\n        cmd = /usr/local/bin/coffee\n        args = index.coffee\n        uid = taiga\n        numprocesses = 1\n        autostart = true\n        send_hup = true\n        stdout_stream.class = FileStream\n        stdout_stream.filename = /home/taiga/logs/taigaevents.stdout.log\n        stdout_stream.max_bytes = 10485760\n        stdout_stream.backup_count = 12\n        stderr_stream.class = FileStream\n        stderr_stream.filename = /home/taiga/logs/taigaevents.stderr.log\n        stderr_stream.max_bytes = 10485760\n        stderr_stream.backup_count = 12\n        \n        ## 重启circusd服务，查看状态 \n        sudo service circusd restart\n        sudo service circusd status                            \n\n9. 配置taiga启动服务\n    \n        ## 初始化Taiga的circus配置/etc/circus/conf.d/taiga.ini\n        [watcher:taiga]\n        working_dir = /home/taiga/taiga-back\n        cmd = gunicorn\n        args = -w 3 -t 60 --pythonpath=. -b 127.0.0.1:8001 taiga.wsgi\n        uid = taiga\n        numprocesses = 1\n        autostart = true\n        send_hup = true\n        stdout_stream.class = FileStream\n        stdout_stream.filename = /home/taiga/logs/gunicorn.stdout.log\n        stdout_stream.max_bytes = 10485760\n        stdout_stream.backup_count = 4\n        stderr_stream.class = FileStream\n        stderr_stream.filename = /home/taiga/logs/gunicorn.stderr.log\n        stderr_stream.max_bytes = 10485760\n        stderr_stream.backup_count = 4\n\n        [env:taiga]\n        PATH = /home/taiga/.virtualenvs/taiga/bin:$PATH\n        TERM=rxvt-256color\n        SHELL=/bin/bash\n        USER=taiga\n        LANG=en_US.UTF-8\n        HOME=/home/taiga\n        PYTHONPATH=/home/taiga/.virtualenvs/taiga/lib/python3.5/site-packages\n\n        ## 重启circusd服务并验证\n        sudo service circusd restart    \n        circusctl status\n\n10. 配置nginx\n\n        ## 移除默认配置避免和taiga冲突\n        sudo rm /etc/nginx/sites-enabled/default\n\n        ## 配置/etc/nginx/conf.d/taiga.conf\n        server {\n            listen 80 default_server;\n            server_name _;\n\n            large_client_header_buffers 4 32k;\n            client_max_body_size 50M;\n            charset utf-8;\n\n            access_log /home/taiga/logs/nginx.access.log;\n            error_log /home/taiga/logs/nginx.error.log;\n\n            # Frontend\n            location / {\n                root /home/taiga/taiga-front-dist/dist/;\n                try_files $uri $uri/ /index.html;\n            }\n\n            # Backend\n            location /api {\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Scheme $scheme;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_pass http://127.0.0.1:8001/api;\n                proxy_redirect off;\n            }\n\n            # Django admin access (/admin/)\n            location /admin {\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Scheme $scheme;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_pass http://127.0.0.1:8001$request_uri;\n                proxy_redirect off;\n            }\n\n            # Static files\n            location /static {\n                alias /home/taiga/taiga-back/static;\n            }\n\n            # Media files\n            location /media {\n                alias /home/taiga/taiga-back/media;\n            }\n\n            # Taiga-events\n            location /events {\n                proxy_pass http://127.0.0.1:8888/events;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"upgrade\";\n                proxy_connect_timeout 7d;\n                proxy_send_timeout 7d;\n                proxy_read_timeout 7d;\n            }\n        }\n\n        ## 验证配置文件\n        sudo nginx -t\n\n        ## 重启nginx\n        sudo service nginx restart\n","source":"_posts/taiga-start.md","raw":"---\ntitle: Taiga环境搭建\ndate: '2018-04-23'\ndescription: Taiga环境搭建\ncategories: \n- soft\n\ntags:\n- scrum\n- 敏捷\n- taiga\n---\n\n# Taiga环境搭建\n\n## 环境配置\n\n    unbuntu 16.4 \n    taiga stable\n\n## 安装\n\n1. 创建taiga用户\n    \n        sudo adduser taiga\n        sudo adduser taiga sudo\n        sudo su taiga\n\n2. 安装依赖软件\n\n        sudo apt-get update\n        sudo apt-get install -y build-essential binutils-doc autoconf flex bison libjpeg-dev\n        sudo apt-get install -y libfreetype6-dev zlib1g-dev libzmq3-dev libgdbm-dev libncurses5-dev\n        sudo apt-get install -y automake libtool libffi-dev curl git tmux gettext\n        sudo apt-get install -y nginx\n        sudo apt-get install -y rabbitmq-server redis-server\n        sudo apt-get install -y circus\n\n        sudo apt-get install -y postgresql-9.5 postgresql-contrib-9.5\n        sudo apt-get install -y postgresql-doc-9.5 postgresql-server-dev-9.5\n\n        sudo apt-get install -y python3 python3-pip python-dev python3-dev python-pip virtualenvwrapper\n        sudo apt-get install -y libxml2-dev libxslt-dev\n        sudo apt-get install -y libssl-dev libffi-dev\n\n3. 初始化postgresql\n\n        sudo -u postgres createuser taiga\n        sudo -u postgres createdb taiga -O taiga --encoding='utf-8' --locale=en_US.utf8 --template=template0\n\n\n4. 初始化RabbitMQ\n\n        sudo rabbitmqctl add_user taiga PASSWORD_FOR_EVENTS\n        sudo rabbitmqctl add_vhost taiga\n        sudo rabbitmqctl set_permissions -p taiga taiga \".*\" \".*\" \".*\"\n\n5. 创建日志目录\n\n        mkdir -p ~/logs\n\n6. Taiga backend安装配置\n    \n        ## 下载代码切换分支\n        cd ~\n        git clone https://github.com/taigaio/taiga-back.git taiga-back\n        cd taiga-back\n        git checkout stable\n\n        ## 创建python虚拟环境 \n        mkvirtualenv -p /usr/bin/python3.5 taiga\n\n        ## 安装依赖\n        pip install -r requirements.txt\n\n        ## 初始化数据库（默认用户 admin/123123）\n        python manage.py migrate --noinput\n        python manage.py loaddata initial_user\n        python manage.py loaddata initial_project_templates\n        python manage.py compilemessages\n        python manage.py collectstatic --noinput\n\n        ## 配置~/taiga-back/settings/local.py\n        DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.postgresql',\n                'NAME': 'taiga',\n                'USER': 'taiga',\n                'PASSWORD': 'Cloudmap123',\n                'HOST': '',\n                'PORT': '',\n            }\n        }\n\n        SITES = {\n            \"api\": {\n               \"scheme\": \"http\",\n               \"domain\": \"10.2.0.6:8000\",\n               \"name\": \"api\"\n            },\n            \"front\": {\n               \"scheme\": \"http\",\n               \"domain\": \"10.2.0.6:9001\",\n               \"name\": \"front\"\n            }\n        }\n\n        ## 配置~/taiga-back/settings/common.py\n        LANGUAGE_CODE = 'zh-hans'  # 修改默认语言为简体中文\n\n        MEDIA_URL = \"http://10.2.0.6/media/\" # 解决wen界面用户头像url异常为：localhost:8000\n        STATIC_URL = \"http://10.2.0.6/static/\" # 解决后台管理系统样式丢失\n        \n        ## 配置事件连接秘钥，值取taiga-event的config.json中的secret\n        SECRET_KEY = \"aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e\"\n\n        ## 验证配置\n        workon taiga\n        python manage.py runserver\n        # 访问 http://localhost:8000/api/v1/ 有数据返回\n\n7. Taiga frontend安装配置\n\n        ## 下载代码切换分支\n        cd ~\n        git clone https://github.com/taigaio/taiga-front-dist.git taiga-front-dist\n        cd taiga-front-dist\n        git checkout stable\n\n        ## 创建配置文件修改配置\n        cp ~/taiga-front-dist/dist/conf.example.json ~/taiga-front-dist/dist/conf.json\n\n        {\n            \"api\": \"http://10.2.0.6/api/v1/\",\n            \"eventsUrl\": \"ws://10.2.0.6/events\",\n            \"eventsMaxMissedHeartbeats\": 5,\n            \"eventsHeartbeatIntervalTime\": 60000,\n            \"eventsReconnectTryInterval\": 10000,\n            \"debug\": true,\n            \"debugInfo\": false,\n            \"defaultLanguage\": \"zh-hans\", /**修改默认语言为中文简体**/\n            \"themes\": [\"taiga\"],\n            \"defaultTheme\": \"taiga\",\n            \"publicRegisterEnabled\": false,\n            \"feedbackEnabled\": true,\n            \"supportUrl\": \"https://tree.taiga.io/support\",\n            \"privacyPolicyUrl\": null,\n            \"termsOfServiceUrl\": null,\n            \"maxUploadFileSize\": null,\n            \"contribPlugins\": [],\n            \"tribeHost\": null,\n            \"importers\": [],\n            \"gravatar\": true\n        }\n\n8. Taiga event安装配置（可选，用来做消息通知）\n\n        ## 下载代码\n        cd ~\n        git clone https://github.com/taigaio/taiga-events.git taiga-events\n        cd taiga-events\n\n        ## 安装nodejs、npm\n        curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n        sudo apt-get install -y nodejs\n        sudo apt-get install -y npm\n\n        ## 修改nodejs服务为node，解决npm install找不到node服务异常\n        sudo ln -s /usr/bin/nodejs /usr/bin/node\n\n        ## 安装项目nodejs模块依赖\n        npm install\n        sudo npm install -g coffee-script\n\n        ## 创建配置文件修改配置\n        cp config.example.json config.json\n\n        {\n            \"url\": \"amqp://taiga:cloudmap@localhost:5672/taiga\", /**用户名密码为第四步初始化rabbitmq时设置的**/\n            \"secret\": \"aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e\",/**配置事件连接秘钥，值和taiga-ebackend的ccommon.py的SECRET_KEY一致**/\n            \"webSocketServer\": {\n                \"port\": 8888\n            }\n        }\n\n        ## 添加配置到circus中/etc/circus/conf.d/taiga-events.ini\n        [watcher:taiga-events]\n        working_dir = /home/taiga/taiga-events\n        cmd = /usr/local/bin/coffee\n        args = index.coffee\n        uid = taiga\n        numprocesses = 1\n        autostart = true\n        send_hup = true\n        stdout_stream.class = FileStream\n        stdout_stream.filename = /home/taiga/logs/taigaevents.stdout.log\n        stdout_stream.max_bytes = 10485760\n        stdout_stream.backup_count = 12\n        stderr_stream.class = FileStream\n        stderr_stream.filename = /home/taiga/logs/taigaevents.stderr.log\n        stderr_stream.max_bytes = 10485760\n        stderr_stream.backup_count = 12\n        \n        ## 重启circusd服务，查看状态 \n        sudo service circusd restart\n        sudo service circusd status                            \n\n9. 配置taiga启动服务\n    \n        ## 初始化Taiga的circus配置/etc/circus/conf.d/taiga.ini\n        [watcher:taiga]\n        working_dir = /home/taiga/taiga-back\n        cmd = gunicorn\n        args = -w 3 -t 60 --pythonpath=. -b 127.0.0.1:8001 taiga.wsgi\n        uid = taiga\n        numprocesses = 1\n        autostart = true\n        send_hup = true\n        stdout_stream.class = FileStream\n        stdout_stream.filename = /home/taiga/logs/gunicorn.stdout.log\n        stdout_stream.max_bytes = 10485760\n        stdout_stream.backup_count = 4\n        stderr_stream.class = FileStream\n        stderr_stream.filename = /home/taiga/logs/gunicorn.stderr.log\n        stderr_stream.max_bytes = 10485760\n        stderr_stream.backup_count = 4\n\n        [env:taiga]\n        PATH = /home/taiga/.virtualenvs/taiga/bin:$PATH\n        TERM=rxvt-256color\n        SHELL=/bin/bash\n        USER=taiga\n        LANG=en_US.UTF-8\n        HOME=/home/taiga\n        PYTHONPATH=/home/taiga/.virtualenvs/taiga/lib/python3.5/site-packages\n\n        ## 重启circusd服务并验证\n        sudo service circusd restart    \n        circusctl status\n\n10. 配置nginx\n\n        ## 移除默认配置避免和taiga冲突\n        sudo rm /etc/nginx/sites-enabled/default\n\n        ## 配置/etc/nginx/conf.d/taiga.conf\n        server {\n            listen 80 default_server;\n            server_name _;\n\n            large_client_header_buffers 4 32k;\n            client_max_body_size 50M;\n            charset utf-8;\n\n            access_log /home/taiga/logs/nginx.access.log;\n            error_log /home/taiga/logs/nginx.error.log;\n\n            # Frontend\n            location / {\n                root /home/taiga/taiga-front-dist/dist/;\n                try_files $uri $uri/ /index.html;\n            }\n\n            # Backend\n            location /api {\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Scheme $scheme;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_pass http://127.0.0.1:8001/api;\n                proxy_redirect off;\n            }\n\n            # Django admin access (/admin/)\n            location /admin {\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Scheme $scheme;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_pass http://127.0.0.1:8001$request_uri;\n                proxy_redirect off;\n            }\n\n            # Static files\n            location /static {\n                alias /home/taiga/taiga-back/static;\n            }\n\n            # Media files\n            location /media {\n                alias /home/taiga/taiga-back/media;\n            }\n\n            # Taiga-events\n            location /events {\n                proxy_pass http://127.0.0.1:8888/events;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"upgrade\";\n                proxy_connect_timeout 7d;\n                proxy_send_timeout 7d;\n                proxy_read_timeout 7d;\n            }\n        }\n\n        ## 验证配置文件\n        sudo nginx -t\n\n        ## 重启nginx\n        sudo service nginx restart\n","slug":"taiga-start","published":1,"updated":"2018-06-20T03:09:16.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8iq002bvqqj1nfdw3p7","content":"<h1 id=\"Taiga环境搭建\"><a href=\"#Taiga环境搭建\" class=\"headerlink\" title=\"Taiga环境搭建\"></a>Taiga环境搭建</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><pre><code>unbuntu 16.4 \ntaiga stable\n</code></pre><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>创建taiga用户</p>\n<pre><code>sudo adduser taiga\nsudo adduser taiga sudo\nsudo su taiga\n</code></pre></li>\n<li><p>安装依赖软件</p>\n<pre><code>sudo apt-get update\nsudo apt-get install -y build-essential binutils-doc autoconf flex bison libjpeg-dev\nsudo apt-get install -y libfreetype6-dev zlib1g-dev libzmq3-dev libgdbm-dev libncurses5-dev\nsudo apt-get install -y automake libtool libffi-dev curl git tmux gettext\nsudo apt-get install -y nginx\nsudo apt-get install -y rabbitmq-server redis-server\nsudo apt-get install -y circus\n\nsudo apt-get install -y postgresql-9.5 postgresql-contrib-9.5\nsudo apt-get install -y postgresql-doc-9.5 postgresql-server-dev-9.5\n\nsudo apt-get install -y python3 python3-pip python-dev python3-dev python-pip virtualenvwrapper\nsudo apt-get install -y libxml2-dev libxslt-dev\nsudo apt-get install -y libssl-dev libffi-dev\n</code></pre></li>\n<li><p>初始化postgresql</p>\n<pre><code>sudo -u postgres createuser taiga\nsudo -u postgres createdb taiga -O taiga --encoding=&apos;utf-8&apos; --locale=en_US.utf8 --template=template0\n</code></pre></li>\n</ol>\n<ol start=\"4\">\n<li><p>初始化RabbitMQ</p>\n<pre><code>sudo rabbitmqctl add_user taiga PASSWORD_FOR_EVENTS\nsudo rabbitmqctl add_vhost taiga\nsudo rabbitmqctl set_permissions -p taiga taiga &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n</code></pre></li>\n<li><p>创建日志目录</p>\n<pre><code>mkdir -p ~/logs\n</code></pre></li>\n<li><p>Taiga backend安装配置</p>\n<pre><code>## 下载代码切换分支\ncd ~\ngit clone https://github.com/taigaio/taiga-back.git taiga-back\ncd taiga-back\ngit checkout stable\n\n## 创建python虚拟环境 \nmkvirtualenv -p /usr/bin/python3.5 taiga\n\n## 安装依赖\npip install -r requirements.txt\n\n## 初始化数据库（默认用户 admin/123123）\npython manage.py migrate --noinput\npython manage.py loaddata initial_user\npython manage.py loaddata initial_project_templates\npython manage.py compilemessages\npython manage.py collectstatic --noinput\n\n## 配置~/taiga-back/settings/local.py\nDATABASES = {\n    &apos;default&apos;: {\n        &apos;ENGINE&apos;: &apos;django.db.backends.postgresql&apos;,\n        &apos;NAME&apos;: &apos;taiga&apos;,\n        &apos;USER&apos;: &apos;taiga&apos;,\n        &apos;PASSWORD&apos;: &apos;Cloudmap123&apos;,\n        &apos;HOST&apos;: &apos;&apos;,\n        &apos;PORT&apos;: &apos;&apos;,\n    }\n}\n\nSITES = {\n    &quot;api&quot;: {\n       &quot;scheme&quot;: &quot;http&quot;,\n       &quot;domain&quot;: &quot;10.2.0.6:8000&quot;,\n       &quot;name&quot;: &quot;api&quot;\n    },\n    &quot;front&quot;: {\n       &quot;scheme&quot;: &quot;http&quot;,\n       &quot;domain&quot;: &quot;10.2.0.6:9001&quot;,\n       &quot;name&quot;: &quot;front&quot;\n    }\n}\n\n## 配置~/taiga-back/settings/common.py\nLANGUAGE_CODE = &apos;zh-hans&apos;  # 修改默认语言为简体中文\n\nMEDIA_URL = &quot;http://10.2.0.6/media/&quot; # 解决wen界面用户头像url异常为：localhost:8000\nSTATIC_URL = &quot;http://10.2.0.6/static/&quot; # 解决后台管理系统样式丢失\n\n## 配置事件连接秘钥，值取taiga-event的config.json中的secret\nSECRET_KEY = &quot;aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e&quot;\n\n## 验证配置\nworkon taiga\npython manage.py runserver\n# 访问 http://localhost:8000/api/v1/ 有数据返回\n</code></pre></li>\n<li><p>Taiga frontend安装配置</p>\n<pre><code>## 下载代码切换分支\ncd ~\ngit clone https://github.com/taigaio/taiga-front-dist.git taiga-front-dist\ncd taiga-front-dist\ngit checkout stable\n\n## 创建配置文件修改配置\ncp ~/taiga-front-dist/dist/conf.example.json ~/taiga-front-dist/dist/conf.json\n\n{\n    &quot;api&quot;: &quot;http://10.2.0.6/api/v1/&quot;,\n    &quot;eventsUrl&quot;: &quot;ws://10.2.0.6/events&quot;,\n    &quot;eventsMaxMissedHeartbeats&quot;: 5,\n    &quot;eventsHeartbeatIntervalTime&quot;: 60000,\n    &quot;eventsReconnectTryInterval&quot;: 10000,\n    &quot;debug&quot;: true,\n    &quot;debugInfo&quot;: false,\n    &quot;defaultLanguage&quot;: &quot;zh-hans&quot;, /**修改默认语言为中文简体**/\n    &quot;themes&quot;: [&quot;taiga&quot;],\n    &quot;defaultTheme&quot;: &quot;taiga&quot;,\n    &quot;publicRegisterEnabled&quot;: false,\n    &quot;feedbackEnabled&quot;: true,\n    &quot;supportUrl&quot;: &quot;https://tree.taiga.io/support&quot;,\n    &quot;privacyPolicyUrl&quot;: null,\n    &quot;termsOfServiceUrl&quot;: null,\n    &quot;maxUploadFileSize&quot;: null,\n    &quot;contribPlugins&quot;: [],\n    &quot;tribeHost&quot;: null,\n    &quot;importers&quot;: [],\n    &quot;gravatar&quot;: true\n}\n</code></pre></li>\n<li><p>Taiga event安装配置（可选，用来做消息通知）</p>\n<pre><code>## 下载代码\ncd ~\ngit clone https://github.com/taigaio/taiga-events.git taiga-events\ncd taiga-events\n\n## 安装nodejs、npm\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo apt-get install -y npm\n\n## 修改nodejs服务为node，解决npm install找不到node服务异常\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n\n## 安装项目nodejs模块依赖\nnpm install\nsudo npm install -g coffee-script\n\n## 创建配置文件修改配置\ncp config.example.json config.json\n\n{\n    &quot;url&quot;: &quot;amqp://taiga:cloudmap@localhost:5672/taiga&quot;, /**用户名密码为第四步初始化rabbitmq时设置的**/\n    &quot;secret&quot;: &quot;aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e&quot;,/**配置事件连接秘钥，值和taiga-ebackend的ccommon.py的SECRET_KEY一致**/\n    &quot;webSocketServer&quot;: {\n        &quot;port&quot;: 8888\n    }\n}\n\n## 添加配置到circus中/etc/circus/conf.d/taiga-events.ini\n[watcher:taiga-events]\nworking_dir = /home/taiga/taiga-events\ncmd = /usr/local/bin/coffee\nargs = index.coffee\nuid = taiga\nnumprocesses = 1\nautostart = true\nsend_hup = true\nstdout_stream.class = FileStream\nstdout_stream.filename = /home/taiga/logs/taigaevents.stdout.log\nstdout_stream.max_bytes = 10485760\nstdout_stream.backup_count = 12\nstderr_stream.class = FileStream\nstderr_stream.filename = /home/taiga/logs/taigaevents.stderr.log\nstderr_stream.max_bytes = 10485760\nstderr_stream.backup_count = 12\n\n## 重启circusd服务，查看状态 \nsudo service circusd restart\nsudo service circusd status                            \n</code></pre></li>\n<li><p>配置taiga启动服务</p>\n<pre><code>## 初始化Taiga的circus配置/etc/circus/conf.d/taiga.ini\n[watcher:taiga]\nworking_dir = /home/taiga/taiga-back\ncmd = gunicorn\nargs = -w 3 -t 60 --pythonpath=. -b 127.0.0.1:8001 taiga.wsgi\nuid = taiga\nnumprocesses = 1\nautostart = true\nsend_hup = true\nstdout_stream.class = FileStream\nstdout_stream.filename = /home/taiga/logs/gunicorn.stdout.log\nstdout_stream.max_bytes = 10485760\nstdout_stream.backup_count = 4\nstderr_stream.class = FileStream\nstderr_stream.filename = /home/taiga/logs/gunicorn.stderr.log\nstderr_stream.max_bytes = 10485760\nstderr_stream.backup_count = 4\n\n[env:taiga]\nPATH = /home/taiga/.virtualenvs/taiga/bin:$PATH\nTERM=rxvt-256color\nSHELL=/bin/bash\nUSER=taiga\nLANG=en_US.UTF-8\nHOME=/home/taiga\nPYTHONPATH=/home/taiga/.virtualenvs/taiga/lib/python3.5/site-packages\n\n## 重启circusd服务并验证\nsudo service circusd restart    \ncircusctl status\n</code></pre></li>\n<li><p>配置nginx</p>\n<pre><code>## 移除默认配置避免和taiga冲突\nsudo rm /etc/nginx/sites-enabled/default\n\n## 配置/etc/nginx/conf.d/taiga.conf\nserver {\n    listen 80 default_server;\n    server_name _;\n\n    large_client_header_buffers 4 32k;\n    client_max_body_size 50M;\n    charset utf-8;\n\n    access_log /home/taiga/logs/nginx.access.log;\n    error_log /home/taiga/logs/nginx.error.log;\n\n    # Frontend\n    location / {\n        root /home/taiga/taiga-front-dist/dist/;\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Backend\n    location /api {\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8001/api;\n        proxy_redirect off;\n    }\n\n    # Django admin access (/admin/)\n    location /admin {\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8001$request_uri;\n        proxy_redirect off;\n    }\n\n    # Static files\n    location /static {\n        alias /home/taiga/taiga-back/static;\n    }\n\n    # Media files\n    location /media {\n        alias /home/taiga/taiga-back/media;\n    }\n\n    # Taiga-events\n    location /events {\n        proxy_pass http://127.0.0.1:8888/events;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_connect_timeout 7d;\n        proxy_send_timeout 7d;\n        proxy_read_timeout 7d;\n    }\n}\n\n## 验证配置文件\nsudo nginx -t\n\n## 重启nginx\nsudo service nginx restart\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Taiga环境搭建\"><a href=\"#Taiga环境搭建\" class=\"headerlink\" title=\"Taiga环境搭建\"></a>Taiga环境搭建</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><pre><code>unbuntu 16.4 \ntaiga stable\n</code></pre><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>创建taiga用户</p>\n<pre><code>sudo adduser taiga\nsudo adduser taiga sudo\nsudo su taiga\n</code></pre></li>\n<li><p>安装依赖软件</p>\n<pre><code>sudo apt-get update\nsudo apt-get install -y build-essential binutils-doc autoconf flex bison libjpeg-dev\nsudo apt-get install -y libfreetype6-dev zlib1g-dev libzmq3-dev libgdbm-dev libncurses5-dev\nsudo apt-get install -y automake libtool libffi-dev curl git tmux gettext\nsudo apt-get install -y nginx\nsudo apt-get install -y rabbitmq-server redis-server\nsudo apt-get install -y circus\n\nsudo apt-get install -y postgresql-9.5 postgresql-contrib-9.5\nsudo apt-get install -y postgresql-doc-9.5 postgresql-server-dev-9.5\n\nsudo apt-get install -y python3 python3-pip python-dev python3-dev python-pip virtualenvwrapper\nsudo apt-get install -y libxml2-dev libxslt-dev\nsudo apt-get install -y libssl-dev libffi-dev\n</code></pre></li>\n<li><p>初始化postgresql</p>\n<pre><code>sudo -u postgres createuser taiga\nsudo -u postgres createdb taiga -O taiga --encoding=&apos;utf-8&apos; --locale=en_US.utf8 --template=template0\n</code></pre></li>\n</ol>\n<ol start=\"4\">\n<li><p>初始化RabbitMQ</p>\n<pre><code>sudo rabbitmqctl add_user taiga PASSWORD_FOR_EVENTS\nsudo rabbitmqctl add_vhost taiga\nsudo rabbitmqctl set_permissions -p taiga taiga &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n</code></pre></li>\n<li><p>创建日志目录</p>\n<pre><code>mkdir -p ~/logs\n</code></pre></li>\n<li><p>Taiga backend安装配置</p>\n<pre><code>## 下载代码切换分支\ncd ~\ngit clone https://github.com/taigaio/taiga-back.git taiga-back\ncd taiga-back\ngit checkout stable\n\n## 创建python虚拟环境 \nmkvirtualenv -p /usr/bin/python3.5 taiga\n\n## 安装依赖\npip install -r requirements.txt\n\n## 初始化数据库（默认用户 admin/123123）\npython manage.py migrate --noinput\npython manage.py loaddata initial_user\npython manage.py loaddata initial_project_templates\npython manage.py compilemessages\npython manage.py collectstatic --noinput\n\n## 配置~/taiga-back/settings/local.py\nDATABASES = {\n    &apos;default&apos;: {\n        &apos;ENGINE&apos;: &apos;django.db.backends.postgresql&apos;,\n        &apos;NAME&apos;: &apos;taiga&apos;,\n        &apos;USER&apos;: &apos;taiga&apos;,\n        &apos;PASSWORD&apos;: &apos;Cloudmap123&apos;,\n        &apos;HOST&apos;: &apos;&apos;,\n        &apos;PORT&apos;: &apos;&apos;,\n    }\n}\n\nSITES = {\n    &quot;api&quot;: {\n       &quot;scheme&quot;: &quot;http&quot;,\n       &quot;domain&quot;: &quot;10.2.0.6:8000&quot;,\n       &quot;name&quot;: &quot;api&quot;\n    },\n    &quot;front&quot;: {\n       &quot;scheme&quot;: &quot;http&quot;,\n       &quot;domain&quot;: &quot;10.2.0.6:9001&quot;,\n       &quot;name&quot;: &quot;front&quot;\n    }\n}\n\n## 配置~/taiga-back/settings/common.py\nLANGUAGE_CODE = &apos;zh-hans&apos;  # 修改默认语言为简体中文\n\nMEDIA_URL = &quot;http://10.2.0.6/media/&quot; # 解决wen界面用户头像url异常为：localhost:8000\nSTATIC_URL = &quot;http://10.2.0.6/static/&quot; # 解决后台管理系统样式丢失\n\n## 配置事件连接秘钥，值取taiga-event的config.json中的secret\nSECRET_KEY = &quot;aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e&quot;\n\n## 验证配置\nworkon taiga\npython manage.py runserver\n# 访问 http://localhost:8000/api/v1/ 有数据返回\n</code></pre></li>\n<li><p>Taiga frontend安装配置</p>\n<pre><code>## 下载代码切换分支\ncd ~\ngit clone https://github.com/taigaio/taiga-front-dist.git taiga-front-dist\ncd taiga-front-dist\ngit checkout stable\n\n## 创建配置文件修改配置\ncp ~/taiga-front-dist/dist/conf.example.json ~/taiga-front-dist/dist/conf.json\n\n{\n    &quot;api&quot;: &quot;http://10.2.0.6/api/v1/&quot;,\n    &quot;eventsUrl&quot;: &quot;ws://10.2.0.6/events&quot;,\n    &quot;eventsMaxMissedHeartbeats&quot;: 5,\n    &quot;eventsHeartbeatIntervalTime&quot;: 60000,\n    &quot;eventsReconnectTryInterval&quot;: 10000,\n    &quot;debug&quot;: true,\n    &quot;debugInfo&quot;: false,\n    &quot;defaultLanguage&quot;: &quot;zh-hans&quot;, /**修改默认语言为中文简体**/\n    &quot;themes&quot;: [&quot;taiga&quot;],\n    &quot;defaultTheme&quot;: &quot;taiga&quot;,\n    &quot;publicRegisterEnabled&quot;: false,\n    &quot;feedbackEnabled&quot;: true,\n    &quot;supportUrl&quot;: &quot;https://tree.taiga.io/support&quot;,\n    &quot;privacyPolicyUrl&quot;: null,\n    &quot;termsOfServiceUrl&quot;: null,\n    &quot;maxUploadFileSize&quot;: null,\n    &quot;contribPlugins&quot;: [],\n    &quot;tribeHost&quot;: null,\n    &quot;importers&quot;: [],\n    &quot;gravatar&quot;: true\n}\n</code></pre></li>\n<li><p>Taiga event安装配置（可选，用来做消息通知）</p>\n<pre><code>## 下载代码\ncd ~\ngit clone https://github.com/taigaio/taiga-events.git taiga-events\ncd taiga-events\n\n## 安装nodejs、npm\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo apt-get install -y npm\n\n## 修改nodejs服务为node，解决npm install找不到node服务异常\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n\n## 安装项目nodejs模块依赖\nnpm install\nsudo npm install -g coffee-script\n\n## 创建配置文件修改配置\ncp config.example.json config.json\n\n{\n    &quot;url&quot;: &quot;amqp://taiga:cloudmap@localhost:5672/taiga&quot;, /**用户名密码为第四步初始化rabbitmq时设置的**/\n    &quot;secret&quot;: &quot;aw3+t2r(8(0kkrhg8)gx6i96v5^kv%6cfep9wxfom0%7dy0m9e&quot;,/**配置事件连接秘钥，值和taiga-ebackend的ccommon.py的SECRET_KEY一致**/\n    &quot;webSocketServer&quot;: {\n        &quot;port&quot;: 8888\n    }\n}\n\n## 添加配置到circus中/etc/circus/conf.d/taiga-events.ini\n[watcher:taiga-events]\nworking_dir = /home/taiga/taiga-events\ncmd = /usr/local/bin/coffee\nargs = index.coffee\nuid = taiga\nnumprocesses = 1\nautostart = true\nsend_hup = true\nstdout_stream.class = FileStream\nstdout_stream.filename = /home/taiga/logs/taigaevents.stdout.log\nstdout_stream.max_bytes = 10485760\nstdout_stream.backup_count = 12\nstderr_stream.class = FileStream\nstderr_stream.filename = /home/taiga/logs/taigaevents.stderr.log\nstderr_stream.max_bytes = 10485760\nstderr_stream.backup_count = 12\n\n## 重启circusd服务，查看状态 \nsudo service circusd restart\nsudo service circusd status                            \n</code></pre></li>\n<li><p>配置taiga启动服务</p>\n<pre><code>## 初始化Taiga的circus配置/etc/circus/conf.d/taiga.ini\n[watcher:taiga]\nworking_dir = /home/taiga/taiga-back\ncmd = gunicorn\nargs = -w 3 -t 60 --pythonpath=. -b 127.0.0.1:8001 taiga.wsgi\nuid = taiga\nnumprocesses = 1\nautostart = true\nsend_hup = true\nstdout_stream.class = FileStream\nstdout_stream.filename = /home/taiga/logs/gunicorn.stdout.log\nstdout_stream.max_bytes = 10485760\nstdout_stream.backup_count = 4\nstderr_stream.class = FileStream\nstderr_stream.filename = /home/taiga/logs/gunicorn.stderr.log\nstderr_stream.max_bytes = 10485760\nstderr_stream.backup_count = 4\n\n[env:taiga]\nPATH = /home/taiga/.virtualenvs/taiga/bin:$PATH\nTERM=rxvt-256color\nSHELL=/bin/bash\nUSER=taiga\nLANG=en_US.UTF-8\nHOME=/home/taiga\nPYTHONPATH=/home/taiga/.virtualenvs/taiga/lib/python3.5/site-packages\n\n## 重启circusd服务并验证\nsudo service circusd restart    \ncircusctl status\n</code></pre></li>\n<li><p>配置nginx</p>\n<pre><code>## 移除默认配置避免和taiga冲突\nsudo rm /etc/nginx/sites-enabled/default\n\n## 配置/etc/nginx/conf.d/taiga.conf\nserver {\n    listen 80 default_server;\n    server_name _;\n\n    large_client_header_buffers 4 32k;\n    client_max_body_size 50M;\n    charset utf-8;\n\n    access_log /home/taiga/logs/nginx.access.log;\n    error_log /home/taiga/logs/nginx.error.log;\n\n    # Frontend\n    location / {\n        root /home/taiga/taiga-front-dist/dist/;\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Backend\n    location /api {\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8001/api;\n        proxy_redirect off;\n    }\n\n    # Django admin access (/admin/)\n    location /admin {\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8001$request_uri;\n        proxy_redirect off;\n    }\n\n    # Static files\n    location /static {\n        alias /home/taiga/taiga-back/static;\n    }\n\n    # Media files\n    location /media {\n        alias /home/taiga/taiga-back/media;\n    }\n\n    # Taiga-events\n    location /events {\n        proxy_pass http://127.0.0.1:8888/events;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_connect_timeout 7d;\n        proxy_send_timeout 7d;\n        proxy_read_timeout 7d;\n    }\n}\n\n## 验证配置文件\nsudo nginx -t\n\n## 重启nginx\nsudo service nginx restart\n</code></pre></li>\n</ol>\n"},{"title":"微信公众平台开发入门","date":"2015-07-08T00:00:00.000Z","description":"微信公众平台开发入门","_content":"因工作需要，要在微信公众平台上进行服务号的开发，现记录下开发流程。\n## 环境 ##\nwin7、IDEA14、Jdk1.7、微信公众平台测试号、外网域名\n\n## 搭建基础开发环境 ##\n\n搭建web项目使用最简单的Servlet做消息入口。\n\n创建WeChatServlet 继承 HttpServlet\n\n在web.xml中配置sevlet的url路径\n\n\t<servlet-name>wechat</servlet-name>\n    <servlet-class>cn.wh.wechat.WeChatServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>wechat</servlet-name>\n        <url-pattern>/wechat</url-pattern>\n    </servlet-mapping>\n\n在微信公众平台申请管理测试号\n\nhttp://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index\n\n登陆之后设置URL和token，URL就是外网域名/项目名/wechat,必须是80端口。\n\n配置消息通道认证\n\nWeChatServlet的doGet方法如下：\n\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException {\n\t\tString signature = request.getParameter(\"signature\");// 微信加密签名\n\t\tString timestamp = request.getParameter(\"timestamp\");// 时间戳\n\t\tString nonce = request.getParameter(\"nonce\");// 随机数\n\t\tString echostr = request.getParameter(\"echostr\");// 随机字符串\n\t\tif (StringUtils.isBlank(signature) || StringUtils.isBlank(timestamp)|| StringUtils.isBlank(nonce)) {\n\t\t\tWriter out = response.getWriter();\n\t\t\tout.write(\"error...\");\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\t// 重写totring方法，得到三个参数的拼接字符串\n\t\tList<String> list = new ArrayList<String>(3) {\n\t\t\tprivate static final long serialVersionUID = 2621444383666420433L;\n\n\t\t\tpublic String toString() {\n\t\t\t\treturn this.get(0) + this.get(1) + this.get(2);\n\t\t\t}\n\t\t};\n\t\tlist.add(TOKEN);\n\t\tlist.add(timestamp);\n\t\tlist.add(nonce);\n\t\tCollections.sort(list);// 排序\n\t\tString tmpStr = new MySecurity().encode(list.toString(),\n\t\t\t\tMySecurity.SHA_1);// SHA-1加密\n\t\tWriter out = response.getWriter();\n\t\tif (signature.equals(tmpStr)) {\n\t\t\tout.write(echostr);// 请求验证成功，返回随机码\n\t\t} else {\n\t\t\tout.write(\"\");\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n在微信公众平台测试页面点击提交请求会到WeChatServlet的doGet方法，如果验证通过返回验证码。\n\n以上是在微信公众平台接入开发模式。\n\n后续会写一些开发中用到的消息处理机制。\n\n","source":"_posts/weixin-start.md","raw":"---\ntitle: 微信公众平台开发入门\ndate: '2015-07-08'\ndescription: 微信公众平台开发入门\ncategories:\n- 微信公众平台\ntags:\n- 微信公众平台\n- java\n\n---\n因工作需要，要在微信公众平台上进行服务号的开发，现记录下开发流程。\n## 环境 ##\nwin7、IDEA14、Jdk1.7、微信公众平台测试号、外网域名\n\n## 搭建基础开发环境 ##\n\n搭建web项目使用最简单的Servlet做消息入口。\n\n创建WeChatServlet 继承 HttpServlet\n\n在web.xml中配置sevlet的url路径\n\n\t<servlet-name>wechat</servlet-name>\n    <servlet-class>cn.wh.wechat.WeChatServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>wechat</servlet-name>\n        <url-pattern>/wechat</url-pattern>\n    </servlet-mapping>\n\n在微信公众平台申请管理测试号\n\nhttp://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index\n\n登陆之后设置URL和token，URL就是外网域名/项目名/wechat,必须是80端口。\n\n配置消息通道认证\n\nWeChatServlet的doGet方法如下：\n\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException {\n\t\tString signature = request.getParameter(\"signature\");// 微信加密签名\n\t\tString timestamp = request.getParameter(\"timestamp\");// 时间戳\n\t\tString nonce = request.getParameter(\"nonce\");// 随机数\n\t\tString echostr = request.getParameter(\"echostr\");// 随机字符串\n\t\tif (StringUtils.isBlank(signature) || StringUtils.isBlank(timestamp)|| StringUtils.isBlank(nonce)) {\n\t\t\tWriter out = response.getWriter();\n\t\t\tout.write(\"error...\");\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\t// 重写totring方法，得到三个参数的拼接字符串\n\t\tList<String> list = new ArrayList<String>(3) {\n\t\t\tprivate static final long serialVersionUID = 2621444383666420433L;\n\n\t\t\tpublic String toString() {\n\t\t\t\treturn this.get(0) + this.get(1) + this.get(2);\n\t\t\t}\n\t\t};\n\t\tlist.add(TOKEN);\n\t\tlist.add(timestamp);\n\t\tlist.add(nonce);\n\t\tCollections.sort(list);// 排序\n\t\tString tmpStr = new MySecurity().encode(list.toString(),\n\t\t\t\tMySecurity.SHA_1);// SHA-1加密\n\t\tWriter out = response.getWriter();\n\t\tif (signature.equals(tmpStr)) {\n\t\t\tout.write(echostr);// 请求验证成功，返回随机码\n\t\t} else {\n\t\t\tout.write(\"\");\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n在微信公众平台测试页面点击提交请求会到WeChatServlet的doGet方法，如果验证通过返回验证码。\n\n以上是在微信公众平台接入开发模式。\n\n后续会写一些开发中用到的消息处理机制。\n\n","slug":"weixin-start","published":1,"updated":"2018-06-20T03:09:48.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8is002evqqj4xmsg75n","content":"<p>因工作需要，要在微信公众平台上进行服务号的开发，现记录下开发流程。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、IDEA14、Jdk1.7、微信公众平台测试号、外网域名</p>\n<h2 id=\"搭建基础开发环境\"><a href=\"#搭建基础开发环境\" class=\"headerlink\" title=\"搭建基础开发环境\"></a>搭建基础开发环境</h2><p>搭建web项目使用最简单的Servlet做消息入口。</p>\n<p>创建WeChatServlet 继承 HttpServlet</p>\n<p>在web.xml中配置sevlet的url路径</p>\n<pre><code>&lt;servlet-name&gt;wechat&lt;/servlet-name&gt;\n&lt;servlet-class&gt;cn.wh.wechat.WeChatServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;wechat&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/wechat&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre><p>在微信公众平台申请管理测试号</p>\n<p><a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p>\n<p>登陆之后设置URL和token，URL就是外网域名/项目名/wechat,必须是80端口。</p>\n<p>配置消息通道认证</p>\n<p>WeChatServlet的doGet方法如下：</p>\n<pre><code>protected void doGet(HttpServletRequest request,\n        HttpServletResponse response) throws ServletException, IOException {\n    String signature = request.getParameter(&quot;signature&quot;);// 微信加密签名\n    String timestamp = request.getParameter(&quot;timestamp&quot;);// 时间戳\n    String nonce = request.getParameter(&quot;nonce&quot;);// 随机数\n    String echostr = request.getParameter(&quot;echostr&quot;);// 随机字符串\n    if (StringUtils.isBlank(signature) || StringUtils.isBlank(timestamp)|| StringUtils.isBlank(nonce)) {\n        Writer out = response.getWriter();\n        out.write(&quot;error...&quot;);\n        out.flush();\n        out.close();\n        return;\n    }\n    // 重写totring方法，得到三个参数的拼接字符串\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;(3) {\n        private static final long serialVersionUID = 2621444383666420433L;\n\n        public String toString() {\n            return this.get(0) + this.get(1) + this.get(2);\n        }\n    };\n    list.add(TOKEN);\n    list.add(timestamp);\n    list.add(nonce);\n    Collections.sort(list);// 排序\n    String tmpStr = new MySecurity().encode(list.toString(),\n            MySecurity.SHA_1);// SHA-1加密\n    Writer out = response.getWriter();\n    if (signature.equals(tmpStr)) {\n        out.write(echostr);// 请求验证成功，返回随机码\n    } else {\n        out.write(&quot;&quot;);\n    }\n    out.flush();\n    out.close();\n}\n</code></pre><p>在微信公众平台测试页面点击提交请求会到WeChatServlet的doGet方法，如果验证通过返回验证码。</p>\n<p>以上是在微信公众平台接入开发模式。</p>\n<p>后续会写一些开发中用到的消息处理机制。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因工作需要，要在微信公众平台上进行服务号的开发，现记录下开发流程。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7、IDEA14、Jdk1.7、微信公众平台测试号、外网域名</p>\n<h2 id=\"搭建基础开发环境\"><a href=\"#搭建基础开发环境\" class=\"headerlink\" title=\"搭建基础开发环境\"></a>搭建基础开发环境</h2><p>搭建web项目使用最简单的Servlet做消息入口。</p>\n<p>创建WeChatServlet 继承 HttpServlet</p>\n<p>在web.xml中配置sevlet的url路径</p>\n<pre><code>&lt;servlet-name&gt;wechat&lt;/servlet-name&gt;\n&lt;servlet-class&gt;cn.wh.wechat.WeChatServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;wechat&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/wechat&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre><p>在微信公众平台申请管理测试号</p>\n<p><a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p>\n<p>登陆之后设置URL和token，URL就是外网域名/项目名/wechat,必须是80端口。</p>\n<p>配置消息通道认证</p>\n<p>WeChatServlet的doGet方法如下：</p>\n<pre><code>protected void doGet(HttpServletRequest request,\n        HttpServletResponse response) throws ServletException, IOException {\n    String signature = request.getParameter(&quot;signature&quot;);// 微信加密签名\n    String timestamp = request.getParameter(&quot;timestamp&quot;);// 时间戳\n    String nonce = request.getParameter(&quot;nonce&quot;);// 随机数\n    String echostr = request.getParameter(&quot;echostr&quot;);// 随机字符串\n    if (StringUtils.isBlank(signature) || StringUtils.isBlank(timestamp)|| StringUtils.isBlank(nonce)) {\n        Writer out = response.getWriter();\n        out.write(&quot;error...&quot;);\n        out.flush();\n        out.close();\n        return;\n    }\n    // 重写totring方法，得到三个参数的拼接字符串\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;(3) {\n        private static final long serialVersionUID = 2621444383666420433L;\n\n        public String toString() {\n            return this.get(0) + this.get(1) + this.get(2);\n        }\n    };\n    list.add(TOKEN);\n    list.add(timestamp);\n    list.add(nonce);\n    Collections.sort(list);// 排序\n    String tmpStr = new MySecurity().encode(list.toString(),\n            MySecurity.SHA_1);// SHA-1加密\n    Writer out = response.getWriter();\n    if (signature.equals(tmpStr)) {\n        out.write(echostr);// 请求验证成功，返回随机码\n    } else {\n        out.write(&quot;&quot;);\n    }\n    out.flush();\n    out.close();\n}\n</code></pre><p>在微信公众平台测试页面点击提交请求会到WeChatServlet的doGet方法，如果验证通过返回验证码。</p>\n<p>以上是在微信公众平台接入开发模式。</p>\n<p>后续会写一些开发中用到的消息处理机制。</p>\n"},{"title":"gor-travis-ci","date":"2017-11-13T00:00:00.000Z","description":"使用travis-ci自动编译github page","_content":"\n# 使用travis-ci自动更新github page\n\n## 配置github pages仓库\n\nmaster分支为github pages发布分支。\n\nblog-source分支为blog源文件分支。\n\n## blog使用gor引擎\n\n[gor使用](http://sakyawang.me/golang/gor%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)\n\nlinux下编译gor生成gor可执行二进制文件。\n\n## 配置travis-ci\n\n参考：\n\n[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://blog.csdn.net/woblog/article/details/51319364) \n\n## .travis.yml文件配置如下：\n\n```yml\nlanguage: bash\n                                                                            ```\nenv:\n\n  global:\n\n    - GH_REF: github.com/sakyawang/sakyawang.github.com.git\n\nbranches:\n\n  only:\n\n    - blog-source\n\nscript:\n\n  - chmod +x gor\n\n  - ./gor compile\n\nafter_script:\n\n  - cp -rf CNAME ./compiled\n\n  - cd compiled\n\n  - git init\n\n  - git config user.name \"user@gmail.com\"\n\n  - git config user.email \"user@gmail.com\"\n\n  - git add .\n\n  - git commit -m \"update blog\"\n\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\"  master:master\n```\n","source":"_posts/travis-ci.md","raw":"---\ntitle: gor-travis-ci\ndate: '2017-11-13'\ndescription: 使用travis-ci自动编译github page\ncategories:\n- ci\n\ntags:\n\n- travis\n- gor\n\n---\n\n# 使用travis-ci自动更新github page\n\n## 配置github pages仓库\n\nmaster分支为github pages发布分支。\n\nblog-source分支为blog源文件分支。\n\n## blog使用gor引擎\n\n[gor使用](http://sakyawang.me/golang/gor%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)\n\nlinux下编译gor生成gor可执行二进制文件。\n\n## 配置travis-ci\n\n参考：\n\n[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://blog.csdn.net/woblog/article/details/51319364) \n\n## .travis.yml文件配置如下：\n\n```yml\nlanguage: bash\n                                                                            ```\nenv:\n\n  global:\n\n    - GH_REF: github.com/sakyawang/sakyawang.github.com.git\n\nbranches:\n\n  only:\n\n    - blog-source\n\nscript:\n\n  - chmod +x gor\n\n  - ./gor compile\n\nafter_script:\n\n  - cp -rf CNAME ./compiled\n\n  - cd compiled\n\n  - git init\n\n  - git config user.name \"user@gmail.com\"\n\n  - git config user.email \"user@gmail.com\"\n\n  - git add .\n\n  - git commit -m \"update blog\"\n\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\"  master:master\n```\n","slug":"travis-ci","published":1,"updated":"2018-06-20T03:09:37.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8iu002jvqqjzdjea30j","content":"<h1 id=\"使用travis-ci自动更新github-page\"><a href=\"#使用travis-ci自动更新github-page\" class=\"headerlink\" title=\"使用travis-ci自动更新github page\"></a>使用travis-ci自动更新github page</h1><h2 id=\"配置github-pages仓库\"><a href=\"#配置github-pages仓库\" class=\"headerlink\" title=\"配置github pages仓库\"></a>配置github pages仓库</h2><p>master分支为github pages发布分支。</p>\n<p>blog-source分支为blog源文件分支。</p>\n<h2 id=\"blog使用gor引擎\"><a href=\"#blog使用gor引擎\" class=\"headerlink\" title=\"blog使用gor引擎\"></a>blog使用gor引擎</h2><p><a href=\"http://sakyawang.me/golang/gor%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">gor使用</a></p>\n<p>linux下编译gor生成gor可执行二进制文件。</p>\n<h2 id=\"配置travis-ci\"><a href=\"#配置travis-ci\" class=\"headerlink\" title=\"配置travis-ci\"></a>配置travis-ci</h2><p>参考：</p>\n<p><a href=\"http://blog.csdn.net/woblog/article/details/51319364\" target=\"_blank\" rel=\"noopener\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a> </p>\n<h2 id=\"travis-yml文件配置如下：\"><a href=\"#travis-yml文件配置如下：\" class=\"headerlink\" title=\".travis.yml文件配置如下：\"></a>.travis.yml文件配置如下：</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">bash</span></span><br></pre></td></tr></table></figure>\n<p>env:</p>\n<p>  global:</p>\n<pre><code>- GH_REF: github.com/sakyawang/sakyawang.github.com.git\n</code></pre><p>branches:</p>\n<p>  only:</p>\n<pre><code>- blog-source\n</code></pre><p>script:</p>\n<ul>\n<li><p>chmod +x gor</p>\n</li>\n<li><p>./gor compile</p>\n</li>\n</ul>\n<p>after_script:</p>\n<ul>\n<li><p>cp -rf CNAME ./compiled</p>\n</li>\n<li><p>cd compiled</p>\n</li>\n<li><p>git init</p>\n</li>\n<li><p>git config user.name “<a href=\"mailto:user@gmail.com\" target=\"_blank\" rel=\"noopener\">user@gmail.com</a>“</p>\n</li>\n<li><p>git config user.email “<a href=\"mailto:user@gmail.com\" target=\"_blank\" rel=\"noopener\">user@gmail.com</a>“</p>\n</li>\n<li><p>git add .</p>\n</li>\n<li><p>git commit -m “update blog”</p>\n</li>\n<li><p>git push –force –quiet “https://${GH_TOKEN}@${GH_REF}”  master:master<br><code>`</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用travis-ci自动更新github-page\"><a href=\"#使用travis-ci自动更新github-page\" class=\"headerlink\" title=\"使用travis-ci自动更新github page\"></a>使用travis-ci自动更新github page</h1><h2 id=\"配置github-pages仓库\"><a href=\"#配置github-pages仓库\" class=\"headerlink\" title=\"配置github pages仓库\"></a>配置github pages仓库</h2><p>master分支为github pages发布分支。</p>\n<p>blog-source分支为blog源文件分支。</p>\n<h2 id=\"blog使用gor引擎\"><a href=\"#blog使用gor引擎\" class=\"headerlink\" title=\"blog使用gor引擎\"></a>blog使用gor引擎</h2><p><a href=\"http://sakyawang.me/golang/gor%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">gor使用</a></p>\n<p>linux下编译gor生成gor可执行二进制文件。</p>\n<h2 id=\"配置travis-ci\"><a href=\"#配置travis-ci\" class=\"headerlink\" title=\"配置travis-ci\"></a>配置travis-ci</h2><p>参考：</p>\n<p><a href=\"http://blog.csdn.net/woblog/article/details/51319364\" target=\"_blank\" rel=\"noopener\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a> </p>\n<h2 id=\"travis-yml文件配置如下：\"><a href=\"#travis-yml文件配置如下：\" class=\"headerlink\" title=\".travis.yml文件配置如下：\"></a>.travis.yml文件配置如下：</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">bash</span></span><br></pre></td></tr></table></figure>\n<p>env:</p>\n<p>  global:</p>\n<pre><code>- GH_REF: github.com/sakyawang/sakyawang.github.com.git\n</code></pre><p>branches:</p>\n<p>  only:</p>\n<pre><code>- blog-source\n</code></pre><p>script:</p>\n<ul>\n<li><p>chmod +x gor</p>\n</li>\n<li><p>./gor compile</p>\n</li>\n</ul>\n<p>after_script:</p>\n<ul>\n<li><p>cp -rf CNAME ./compiled</p>\n</li>\n<li><p>cd compiled</p>\n</li>\n<li><p>git init</p>\n</li>\n<li><p>git config user.name “<a href=\"mailto:user@gmail.com\" target=\"_blank\" rel=\"noopener\">user@gmail.com</a>“</p>\n</li>\n<li><p>git config user.email “<a href=\"mailto:user@gmail.com\" target=\"_blank\" rel=\"noopener\">user@gmail.com</a>“</p>\n</li>\n<li><p>git add .</p>\n</li>\n<li><p>git commit -m “update blog”</p>\n</li>\n<li><p>git push –force –quiet “https://${GH_TOKEN}@${GH_REF}”  master:master<br><code>`</code></p>\n</li>\n</ul>\n"},{"title":"post请求执行window open","date":"2015-07-09T00:00:00.000Z","description":"window open新页面以post请求发送（url上不带参数）","_content":"## 背景 ##\n一般在html中打开新页面都是直接使用window.open(url)，打开新的页面是get请求，如果url有参数的话URL就会很长，在浏览器上会有参数显示。这里使用post请求可以避免该问题。\n\n## 处理方案 ##\n\n创建一个form表单method为post方式：\n\n\t<form action=\"\" method=\"post\" name=\"targetForm\" id=\"targetForm\" target=\"targetForm\" onsubmit=\"openWindow('targetForm');\">\n\t\t<input type=\"hidden\" name=\"name1\" id=\"id1\"/>\n\t\t<input type=\"hidden\" name=\"name2\" id=\"id2\"/>\n\t</form>\n\n添加onsubmit事件，执行openWindow（），具体js函数如下：\n\n\tfunction openWindow(name){    \n\t\twindow.open('about:blank',name);     \n\t}  \n\n关键点是：\n\n\tonsubmit=\"openWindow('targetForm');\"\n\n中参数要是form表单的名字。\n\n然后在操作的时候触发表单的提交事件：\n\n$(\"#targetForm\").submit();\n","source":"_posts/window-open-post.md","raw":"---\ntitle: post请求执行window open\ndate: '2015-07-09'\ndescription: window open新页面以post请求发送（url上不带参数）\ncategories:\n- javascript\n\ntags:\n- javascript\n- html\n\n---\n## 背景 ##\n一般在html中打开新页面都是直接使用window.open(url)，打开新的页面是get请求，如果url有参数的话URL就会很长，在浏览器上会有参数显示。这里使用post请求可以避免该问题。\n\n## 处理方案 ##\n\n创建一个form表单method为post方式：\n\n\t<form action=\"\" method=\"post\" name=\"targetForm\" id=\"targetForm\" target=\"targetForm\" onsubmit=\"openWindow('targetForm');\">\n\t\t<input type=\"hidden\" name=\"name1\" id=\"id1\"/>\n\t\t<input type=\"hidden\" name=\"name2\" id=\"id2\"/>\n\t</form>\n\n添加onsubmit事件，执行openWindow（），具体js函数如下：\n\n\tfunction openWindow(name){    \n\t\twindow.open('about:blank',name);     \n\t}  \n\n关键点是：\n\n\tonsubmit=\"openWindow('targetForm');\"\n\n中参数要是form表单的名字。\n\n然后在操作的时候触发表单的提交事件：\n\n$(\"#targetForm\").submit();\n","slug":"window-open-post","published":1,"updated":"2018-06-20T03:09:59.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8iw002lvqqj4ldc3aic","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一般在html中打开新页面都是直接使用window.open(url)，打开新的页面是get请求，如果url有参数的话URL就会很长，在浏览器上会有参数显示。这里使用post请求可以避免该问题。</p>\n<h2 id=\"处理方案\"><a href=\"#处理方案\" class=\"headerlink\" title=\"处理方案\"></a>处理方案</h2><p>创建一个form表单method为post方式：</p>\n<pre><code>&lt;form action=&quot;&quot; method=&quot;post&quot; name=&quot;targetForm&quot; id=&quot;targetForm&quot; target=&quot;targetForm&quot; onsubmit=&quot;openWindow(&apos;targetForm&apos;);&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;name1&quot; id=&quot;id1&quot;/&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;name2&quot; id=&quot;id2&quot;/&gt;\n&lt;/form&gt;\n</code></pre><p>添加onsubmit事件，执行openWindow（），具体js函数如下：</p>\n<pre><code>function openWindow(name){    \n    window.open(&apos;about:blank&apos;,name);     \n}  \n</code></pre><p>关键点是：</p>\n<pre><code>onsubmit=&quot;openWindow(&apos;targetForm&apos;);&quot;\n</code></pre><p>中参数要是form表单的名字。</p>\n<p>然后在操作的时候触发表单的提交事件：</p>\n<p>$(“#targetForm”).submit();</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一般在html中打开新页面都是直接使用window.open(url)，打开新的页面是get请求，如果url有参数的话URL就会很长，在浏览器上会有参数显示。这里使用post请求可以避免该问题。</p>\n<h2 id=\"处理方案\"><a href=\"#处理方案\" class=\"headerlink\" title=\"处理方案\"></a>处理方案</h2><p>创建一个form表单method为post方式：</p>\n<pre><code>&lt;form action=&quot;&quot; method=&quot;post&quot; name=&quot;targetForm&quot; id=&quot;targetForm&quot; target=&quot;targetForm&quot; onsubmit=&quot;openWindow(&apos;targetForm&apos;);&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;name1&quot; id=&quot;id1&quot;/&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;name2&quot; id=&quot;id2&quot;/&gt;\n&lt;/form&gt;\n</code></pre><p>添加onsubmit事件，执行openWindow（），具体js函数如下：</p>\n<pre><code>function openWindow(name){    \n    window.open(&apos;about:blank&apos;,name);     \n}  \n</code></pre><p>关键点是：</p>\n<pre><code>onsubmit=&quot;openWindow(&apos;targetForm&apos;);&quot;\n</code></pre><p>中参数要是form表单的名字。</p>\n<p>然后在操作的时候触发表单的提交事件：</p>\n<p>$(“#targetForm”).submit();</p>\n"},{"title":"alibaba-java","date":"2017-03-20T00:00:00.000Z","description":"阿里巴巴java开发手册","_content":"\n根据[阿里巴巴java开发手册.pdf](https://yq.aliyun.com/attachment/download/?id=1170)转化。\n\n## 一、编程规约\n\n### (一)  命名规约\n\n1. 【强制】  代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。\n\n\t反例： _name / __name / $Object / name_ / name$ / Object$\n\n2. 【强制】  代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。\n\n\t说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。\n\n\t反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int  某变量  = 3\n\n\t正例： alibaba / taobao / youku / hangzhou  等国际通用的名称，可视同英文。\n\n3. 【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO 等。\n\n\t正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion\n\t\n\t反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion\n\n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。\n\t\n\t正例： localValue / getHttpMessage() / inputUserId\n\n5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n\t\n\t正例： MAX_STOCK_COUNT\n\t\n\t反例： MAX_COUNT\n\n6. 【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。\n\n7. 【强制】中括号是数组类型的一部分，数组定义如下：String[] args;\n\n\t反例：使用 String args[]的方式来定义。 \n\n8. 【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。\n\n\t反例：定义为基本数据类型 Boolean  isSuccess；的属性，它的方法也是 isSuccess()，RPC框架在反向解析的时候， “以为”对应的属性名称是 success，导致属性获取不到，进而抛出异常。\n\n9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。\n\n\t正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）\n\n10.  【强制】杜绝完全不规范的缩写，避免望文不知义。\n\n\t反例：  AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成  condi，此类随意缩写严重降低了代码的可阅读性。\n\n11.  【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。\n\n\t说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n\n\t正例：\t\n\t\n\t\tpublic class OrderFactory;\n\t\tpublic class LoginProxy;\n\t\tpublic class ResourceObserver;\n\n\n12.  【推荐】接口类中的方法和属性不要加任何修饰符号（public  也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n\n\t正例：接口方法签名：void f();\n\t\n\t接口基础常量表示：String COMPANY = \"alibaba\";\n\n\t反例：接口方法定义：public abstract void f();\n\n\t说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。\n\n13.  接口和实现类的命名有两套规则：\n\n\t1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。\n\t\n\t正例：CacheServiceImpl 实现 CacheService 接口。\n\t\n\t2）【推荐】如果是形容能力的接口名称，取对应的形容词做接口名 （通常是–able 的形式） 。\n\t\n\t正例：AbstractTranslator 实现  Translatable。\n\n14.  【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。\n\n\t说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n\n\t正例：枚举名字：DealStatusEnum，成员名称：SUCCESS / UNKOWN_REASON。 \n\n15.  【参考】各层命名规约： \n\n\tA) Service/DAO 层方法命名规约\n\n\t\t1）  获取单个对象的方法用 get 做前缀。\n\t\t2）  获取多个对象的方法用 list 做前缀。\n\t\t3）  获取统计值的方法用 count 做前缀。\n\t\t4）  插入的方法用 save（推荐）或 insert 做前缀。\n\t\t5）  删除的方法用 remove（推荐）或 delete 做前缀。\n\t\t6）  修改的方法用 update 做前缀。\n\n\tB)  领域模型命名规约\n\n\t\t1）  数据对象：xxxDO，xxx 即为数据表名。\n\t\t2）  数据传输对象：xxxDTO，xxx 为业务领域相关的名称。\n\t\t3）  展示对象：xxxVO，xxx 一般为网页名称。\n\t\t4）  POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n\n### (二)  常量定义\n\n1. 【强制】不允许出现任何魔法值（即未经定义的常量）直接出现在代码中。\n\n\t反例： \n\t\n\t\tString key = \"Id#taobao_\"+tradeId；\n\t\tcache.put(key, value);\n\n2. 【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解。\n\n\t说明：Long a = 2l;  写的是数字的 21，还是 Long 型的 2?\n\n3. 【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存相关的常量放在类：CacheConsts 下；系统配置相关的常量放在类：ConfigConsts 下。\n\n\t说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。\n\n4. 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。\n\t\n\t1）  跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。\n\t\n\t2）  应用内共享常量：放置在一方库的 modules 中的 constant 目录下。\n\n\t反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：\n\t\t\n\t\t类 A 中：public static final String YES = \"yes\";\n\t\t类 B 中：public static final String YES = \"y\";\n\t\tA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致产生线上问题。\n\n\t3）  子工程内部共享常量：即在当前子工程的 constant 目录下。\n\t\n\t4）  包内共享常量：即在当前包下单独的 constant 目录下。\n\t\n\t5）  类内共享常量：直接在类内部 private static final 定义。\n\n5. 【推荐】如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。\n\n\t正例：\n\t\t\n\t\tpublic Enum  { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}\n\n### (三)  格式规约\n\n1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：\n\t\n\t\t1）  左大括号前不换行。\n\t\t2）  左大括号后换行。\n\t\t3）  右大括号前换行。\n\t\t4）  右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。\n\n2. 【强制】  左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空\n格。详见第 5 条下方正例提示。\n\n3. 【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。\n\n4. 【强制】任何运算符左右必须加一个空格。\n\n\t说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号、三目运算符等。\n\n5. 【强制】缩进采用 4 个空格，禁止使用 tab 字符。\n\n\t说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。\n\n\t正例： （涉及 1-5 点）\n\n\t\tpublic static void main(String[]  args) { \n\t\t\t//  缩进 4 个空格   \n\t\t\tString say = \"hello\"; \n\t\t\t//  运算符的左右必须有一个空格 \n\t\t\tint flag = 0; \n\t\t\t//  关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格   \n\t\t\tif (flag == 0) { \n\t\t\t\tSystem.out.println(say); \n\t\t\t} \n\t\t\t//  左大括号前加空格且不换行；左大括号后换行 \n\t\t\tif (flag == 1) { \n\t\t\t\tSystem.out.println(\"world\"); \n\t\t\t\t//  右大括号前换行，右大括号后有 else，不用换行   \n\t\t\t} else { \n\t\t\t\tSystem.out.println(\"ok\"); \n\t\t\t\t//  在右大括号后直接结束，则必须换行   \n\t\t\t} \n\t\t} \n\n6. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n\t\t\n\t\t1）  第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n\t\t2）  运算符与下文一起换行。\n\t\t3）  方法调用的点符号与下文一起换行。\n\t\t4）  在多个参数超长，逗号后进行换行。\n\t\t5）  在括号前不要换行，见反例。\n\n\t正例：\n\t\t\n\t\tStringBuffer sb = new StringBuffer(); \n\t\t//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行 \n\t\tsb.append(\"zi\").append(\"xin\")... \n\t\t.append(\"huang\")... \n\t\t.append(\"huang\")... \n\t\t.append(\"huang\"); \n\t反例：\n\n\t\tStringBuffer sb = new StringBuffer(); \n\t\t//超过 120 个字符的情况下，不要在括号前换行 \n\t\tsb.append(\"zi\").append(\"xin\")...append \n\t\t(\"huang\"); \n\t\t//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\n\t\tmethod(args1, args2, args3, ... \n\t\t, argsX); \n\n7. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n\t正例：下例中实参的\"a\",后边必须要有一个空格。\n\n\t\tmethod(\"a\", \"b\", \"c\"); \n\n8. 【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。\n\n9. 【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。\n\n\t正例：\n\t\n\t\tint a = 3; \n\t\tlong b = 4L; \n\t\tfloat c = 5F; \n\t\tStringBuffer sb = new StringBuffer(); \n\n\t说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。 \n\n10.  【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。\n\n\t说明：没有必要插入多行空格进行隔开。\n\n### (四)  OOP 规约\n\n1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。\n\n2. 【强制】所有的覆写方法，必须加@Override 注解。\n\n\t反例： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。\n\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n\n\t说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）\n\n\t正例：public User getUsers(String type, Integer... ids)\n\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n\n5. 【强制】不能使用过时的类或方法。\n\n\t说明：java.net.URLDecoder  中的方法 decode(String  encodeStr)  这个方法已经过时，应该使用双参数 decode(String  source,  String  encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n\n6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。\n\t\n\t正例： \"test\".equals(object);\n\t\n\t反例： object.equals(\"test\");\n\t\t\n\t说明： 推荐使用 java.util.Objects#equals  （JDK7 引入的工具类）\n\n7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。\n\n\t说明：对于 Integer var = ?在-128 至 127 之间的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。\n\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n\n\t\t1）  【强制】所有的 POJO 类属性必须使用包装数据类型。\n\t\t2）  【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n\t\t3）  【推荐】所有的局部变量使用基本数据类型。\n\n\t说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。\n\n\t正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n\n\t反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。\n\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n\t反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n10.  【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。\n\n\t说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。\n\n11.  【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n\n12.  【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source>  generate  toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n\n\t说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n13.  【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。\n\n\t说明：\n\n\t\tString str = \"a,b,c,,\"; \n\t\tString[] ary = str.split(\",\"); \n\t\t//预期大于 3，结果是 3\n\t\tSystem.out.println(ary.length); \n\n14.  【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。\n\n15.  【推荐】  类内方法定义顺序依次是：公有方法或保护方法  >  私有方法  > getter/setter方法。\n\n\t说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n\n16.  【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名  =  参数名。在getter/setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。\n\n\t反例：\n\n\t\tpublic Integer getData()  { \n\t\t\tif (true)  { \n\t\t\t\treturn data + 100; \n\t\t\t}  else  {\n\t\t\t\treturn data  -  100;\n\t\t\t} \n\t\t} \n\n17.  【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。\n\n\t反例：\n\n\t\tString str = \"start\"; \n\t\tfor  (int  I  =  0;  I  <  100; i++)  { \n\t\t\tstr = str + \"hello\"; \n\t\t} \n\n\t说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。\n\n18.  【推荐】下列情况，声明成 final 会更有提示性：\n\n\t\t1）  不需要重新赋值的变量，包括类属性、局部变量。\n\t\t2）  对象参数前加 final，表示不允许修改引用的指向。\n\t\t3）  类方法确定不允许被重写。\n\n19.  【推荐】慎用 Object 的 clone 方法来拷贝对象。\n\n\t说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n\n20.  【推荐】类成员与方法访问控制从严：\n\n\t\t1）  如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。\n\t\t2）  工具类不允许有 public 或 default 构造方法。\n\t\t3）  类非 static 成员变量并且与子类共享，必须是 protected。\n\t\t4）  类非 static 成员变量并且仅在本类使用，必须是 private。\n\t\t5）  类 static 成员变量如果仅在本类使用，必须是 private。\n\t\t6）  若是 static 成员变量，必须考虑是否为 final。\n\t\t7）  类成员方法只供类内部调用，必须是 private。\n\t\t8）  类成员方法只对继承类公开，那么限制为 protected。\n\n\t说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。\n\n### (五)  集合处理\n\n1. 【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n\t\t1） 只要重写 equals，就必须重写 hashCode。\n\t\t2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的\n\t\t对象必须重写这两个方法。\n\t\t3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。\n\n\t说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。\n\n2. 【强制】   ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException\n\n\t异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;\n\n\t说明：subList  返回的是  ArrayList  的内部类  SubList，并不是  ArrayList  ，而是ArrayList  的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。\n\n3. 【强制】  在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException  异常。\n\n4. 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[]  array)，传入的是类型完全一样的数组，大小就是 list.size()。\n\n\t说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[  list.size()  ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。\n\n\t正例：\n\n\t\tList<String> list = new ArrayList<String>(2); \n\t\tlist.add(\"guan\"); \n\t\tlist.add(\"bao\"); \n\t\tString[] array = new String[list.size()]; \n\t\tarray = list.toArray(array); \n\n\t反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。\n\n5. 【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n\n\t说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n\n\t\tString[] str = new String[] { \"a\", \"b\" };\n\t\tList list = Arrays.asList(str); \n\t\t第一种情况：list.add(\"c\");  运行时异常。\n\t\t第二种情况：str[0] = \"gujin\";  那么 list.get(0)也会随之修改。\n\n6. 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法，而<? super T>不能使用 get 方法，做为接口调用赋值时易出错。\n\n\t说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：1）频繁往外读取内容的，适合用上界 Extends。2）经常往里插入的，适合用下界 Super。\n\n7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\n\n\t反例：\n\t\t\n\t\tList<String> a = new ArrayList<String>(); \n\t\ta.add(\"1\"); \n\t\ta.add(\"2\"); \n\t\tfor (String temp : a) { \n\t\t\tif  (\"1\".equals(temp))  { \n\t\t\t\ta.remove(temp); \n\t\t\t} \n\t\t} \n\n\t说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n\t\n\t正例：\n\n\t\tIterator<String> it = a.iterator(); \n\t\twhile  (it.hasNext())  { \n\t\t\tString temp =  it.next(); \n\t\t\tif  (删除元素的条件)  {   \n\t\t\t\tit.remove(); \n\t\t\t} \n\t\t} \n\n8. 【强制】  在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。\n\n\t说明：\n\t\n\t\t1）  x，y 的比较结果和 y，x 的比较结果相反。\n\t\t2）  x>y，y>z，则 x>z。\n\t\t3）  x=y，则 x，z 比较结果和 y，z 比较结果相同。\n\n\t反例：下例中没有处理相等的情况，实际使用中可能会出现异常：\n\n\t\tnew Comparator<Student>() { \n\t\t\t@Override \n\t\t\tpublic int compare(Student o1, Student o2) { \n\t\t\t\treturn o1.getId() > o2.getId() ? 1 :  -1; \n\t\t\t} \n\t\t} \n\n9. 【推荐】集合初始化时，尽量指定集合初始值大小。\n\n\t说明：ArrayList 尽量使用 ArrayList(int initialCapacity)  初始化。\n\n10.  【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\n\n\t<font color=\"#AD8022\" size = \"4px\">说明：</font>\n\tkeySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。\n\n\t正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。\n\n11.  【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n\t|集合类              | Key        | Value        |  Super      |   说明    |\n\t|:-----------------:|:----------:|:------------:|:-----------:|:---------:|\n\t|ConcurrentHashMap  |不允许为 null|不允许为 null  | AbstractMap |  分段锁技术|\n\t|TreeMap            |不允许为 null|允许为 null    | AbstractMap |  线程不安全|\n\t|HashMap            |允许为 null  |允许为 null    | AbstractMap |  线程不安全|\n\n\n\t反例：  由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储null 值时会抛出 NPE 异常。\n\n12.  【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。\n\n\t说明： 有序性是指遍历的结果是按某种比较规则依次排列的。 稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是order/sort。\n\n13.  【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。\n\n### (六)  并发处理\n\n1. 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n\n\t说明：资源驱动类、工具类、单例工厂类都需要注意。\n\n2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n\n\t正例：\n\t\tpublic class TimerTaskThread extends Thread { \n\t\t\tpublic TimerTaskThread()  { \n\t\t\t\tsuper.setName(\"TimerTaskThread\");    ... \n\t\t\t}\n\t\t}   \n\n3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n\n\t说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n\t说明：Executors 返回的线程池对象的弊端如下：\n\t\t\n\t1）FixedThreadPool 和 SingleThreadPool:\n\t\t\t\n\t允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\n\n\t2）CachedThreadPool 和 ScheduledThreadPool:\n\t\t\n\t允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n\n5. 【强制】SimpleDateFormat  是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。\n\n正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\n\n\t\tprivate static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() { \n\t\t\t@Override \n\t\t\tprotected DateFormat initialValue() { \n\t\t\t\treturn new SimpleDateFormat(\"yyyy-MM-dd\"); \n\t\t\t} \n\t\t}; \n\n\t说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 Simpledateformatter，官方给出的解释： simple  beautiful  strong immutable thread-safe。\n\n6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。\n\n7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。\n\n\t说明：线程一需要对表 A、B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。\n\n8. 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n\n\t说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n\n9. 【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。  \n\n10.  【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 await 方法，直到超时才返回结果。\n\n\t说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。\n\n11.  【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed  导致的性能下降。\n\n\t说明：Random 实例包括 java.util.Random  的实例或者  Math.random()实例。\n\n\t正例：在 JDK7 之后，可以直接使用 API  ThreadLocalRandom，在  JDK7 之前，可以做到每个线程一个实例。\n\n12.  【推荐】在并发场景下，通过双重检查锁（double-checked  locking）实现延迟初始化的优化问题隐患(可参考  The \"Double-Checked Locking is Broken\" Declaration)，推荐问题解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为  volatile 型。\n\n\t反例：\n\n\t\tclass Foo { \n\t\t\tprivate Helper helper = null; \n\t\t\tpublic Helper getHelper() { \n\t\t\t\tif (helper == null)  synchronized(this) { \n\t\t\t\t\tif (helper == null) \n\t\t\t\t\t\thelper = new Helper(); \n\t\t\t\t} \n\t\t\t\treturn helper; \n\t\t\t} \n\t\t\t// other functions and members... \n\t\t} \n\n13.  【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。\n\n\t如果是 count++操作，使用如下类实现：\n\n\t\tAtomicInteger  count  =  new  AtomicInteger();  count.addAndGet(1);  \n\n\t如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。\n\n14.  【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。\n\n15.  【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量  ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。\n\n### (七)  控制语句\n\n1. 【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。\n\n2. 【强制】在 if/else/for/while/do 语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) tatements;\n\n3. 【推荐】推荐尽量少用 else，  if-else 的方式可以改写成：\n\n\t\tif  (condition)  { \n\t\t...\n\t\treturn obj; \n\t\t} \n\t\t//  接着写 else 的业务逻辑代码; \n\n\t说明：如果非得使用 if()...else if()...else...方式表达逻辑，【强制】请勿超过 3 层，超过请使用状态设计模式。 \n\n\t正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。\n\n4. 【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n\n\t说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n\n\t正例：\n\n\t\t//伪代码如下\n\t\tboolean existed = (file.open(fileName, \"w\") != null)  &&  (...) || (...);\n\t\tif (existed) {\n\t\t...\n\t\t} \n\t反例：\n\n\t\tif ((file.open(fileName, \"w\") != null)  &&  (...) || (...)) {\n\t\t...\n\t\t}\n\n5. 【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作 （这个 try-catch 是否可以移至循环体外） 。\n\n6. 【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。\n\n7. 【参考】方法中需要进行参数校验的场景：\n\n\t\t1）  调用频次低的方法。\n\t\t2）  执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致\n\t\t中间执行回退，或者错误，那得不偿失。 \n\t\t3）  需要极高稳定性和可用性的方法。\n\t\t4）  对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n\t\t5）  敏感权限入口。\n\n8. 【参考】方法中不需要参数校验的场景：\n\n\t\t1）  极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参数检查要求。\n\t\t2）  底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n\t\t3）  被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n\n### (八)  注释规约\n\n1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用//xxx 方式。\n\n\t说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n2. 【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。\n\n\t说明：对子类的实现要求，或者调用注意事项，请一并说明。\n\n3. 【强制】所有的类都必须添加创建者信息。\n\n4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。\n\n5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n\n6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。\n\n\t反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n\n7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。\n\n\t说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。 \n\n8. 【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。\n\n\t说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。\n\n9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。\n\n10.  【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n\n\t反例：\n\t\t// put elephant into fridge \n\t\tput(elephant, fridge); \n\t\t方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n\n11.  【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。\n\n\t1）  待办事宜（TODO）:（  标记人，标记时间，[预计处理时间]）\n\n\t\t表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （因为它是一个 Javadoc 标签） 。\n\n\t2）  错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）\n\t\t\t\n\t\t在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。\n### (九)  其它\n\n1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。\n\n    说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则);\n\n2. 【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()方法。\n\n\t说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。\n\n3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。\n\n\t说明：如果 var=null 或者不存在，那么${var}会直接显示在页面上。\n\n4. 【强制】注意  Math.random()  这个方法返回是 double 类型，注意取值的范围  0≤x<1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。 \n\n5. 【强制】获取当前毫秒数 System.currentTimeMillis();  而不是 new Date().getTime();\n\n\t说明：如果想获取更加精确的纳秒级时间值，用 System.nanoTime()。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。\n\n6. 【推荐】尽量不要在 velocity 模板中加入变量声明、逻辑运算符，更不要在模板中加入任何复杂的逻辑。\n\n7. 【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。\n\n8. 【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。   \n\n## 二、异常日志\n\n### (一)  异常处理\n\n1. 【强制】Java  类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch  来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。\n\n\t说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。\n\n\t正例：if (obj != null) {...}\n\t\n\t反例：try { obj.method() } catch (NullPointerException e) {...}\n\n2. 【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。\n\n3. 【强制】对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。\n\n4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n\n5. 【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n\n6. 【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。\n\n7. 【强制】不能在 finally 块中使用 return， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n\n8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n9. 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。\n\n\t说明： 本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况。\n\n10.  【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n\n    1) 返回类型为包装数据类型，有可能是 null，返回 int 值时注意判空。\n\t\t\n\t\t反例：public int f() { return Integer 对象};  \n\t\t\t 如果为 null，自动解箱抛 NPE。\n\n  \t2) 数据库的查询结果可能为 null。\n\n  \t3) 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n\n\t4）  远程调用返回对象，一律要求进行 NPE 判断。\n\n \t5）  对于 Session 中获取的数据，建议 NPE 检查，避免空指针。\n\n  \t6）  级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n\t\t正例：可以使用 JDK8 的 Optional 类来防止 NPE 问题。\n\n11.  【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess、“错误码”、“错误简短信息”。\n\n\t说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n\n\t1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n\n\t2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n12.  【推荐】定义时区分 unchecked  /  checked  异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。\n\n13.  【参考】避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。\n\n\t正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n\t\tprivate boolean checkParam(DTO dto)  {...} \n### (二)  日志规约\n\n1. 【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。\n\n\t\timport org.slf4j.Logger; \n\t\timport org.slf4j.LoggerFactory;\n\t\tprivate static final Logger logger = LoggerFactory.getLogger(Abc.class); \n\n2. 【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。\n3. 【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：\n\n\tappName_logType_logName.log。\n\tlogType:日志类型，推荐分类有stats/desc/monitor/visit 等；\n\tlogName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。\n\n\t正例：mppserver 应用中单独监控时区转换异常，如：     \n\n\t\tmppserver_monitor_timeZoneConvert.log\n\n\t说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。\n\n4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。\n\n\t说明：logger.debug(\"Processing  trade  with  id: \" +  id  + \"  symbol: \" +  symbol);\n\t如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。\n\n\t正例：（条件）\n\n\t\tif (logger.isDebugEnabled()) { \n\t\t\tlogger.debug(\"Processing trade with id: \" + id + \" symbol: \" + symbol); \n\t\t} \n\n\t正例：（占位符）\n\n\t\tlogger.debug(\"Processing trade with id: {} symbol : {} \", id, symbol); \n\n5. 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。\n\n\t正例：<logger name=\"com.taobao.dubbo.config\" additivity=\"false\"> \n\n6. 【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。\n\n\t正例：logger.error(各类参数或者对象 toString + \"_\" + e.getMessage(), e);\n\n7. 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。\n\n\t说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？\n\n8. 【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。\n\n## 三、MySQL 规约\n\n### (一)  建表规约\n\n1. 【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned  tinyint（  1 表示是，0 表示否）。\n\n\t说明：任何字段如果为非负数，必须是 unsigned。\n\n2. 【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。\n\n\t正例：getter_admin，task_config，level3_name\n\n\t反例：GetterAdmin，taskConfig，level_3_name\n\n3. 【强制】表名不使用复数名词。\n\n\t说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。\n\n4. 【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。\n\n5. 【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。\n\n\t说明：pk_  即 primary key；uk_  即  unique key；idx_  即 index 的简称。\n\n6. 【强制】小数类型为 decimal，禁止使用 float 和 double。\n\n\t说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。\n\n7. 【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。\n\n8. 【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\n\n9. 【强制】表必备三字段：id, gmt_create, gmt_modified。\n\n\t说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 date_time 类型。\n\n10.  【推荐】表的命名最好是加上“业务名称_表的作用”。\n\n\t正例：tiger_task / tiger_reader / mpp_config\n\n11.  【推荐】库名与应用名称尽量一致。\n\n12.  【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。 \n\n13.  【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：\n\n\t1）不是频繁修改的字段。\n\t\n\t2）不是 varchar 超长字段，更不能是 text 字段。\n\n\t正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。\n\n14.  【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。\n\n\t说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。\n\n15.  【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。\n\n\t正例：无符号值可以避免误存负数，且扩大了表示范围。\n\n\t|对象    |年龄区间   |类型               |表示范围                     |\n\t|:-----:|:---------:|:----------------:|:--------------------------:|\n\t|人      |150 岁之内 | unsigned tinyint | 无符号值：0 到 255           |\n\t|龟      |数百岁     |unsigned smallint |无符号值：0 到 65535          |\n\t|恐龙化石 |  数千万年 |  unsigned int    |无符号值：0 到约 42.9 亿      |\n\t|太阳    |约 50 亿年 |  unsigned bigint |无符号值：0 到约 10 的 19 次方 |\n\n### (二)  索引规约\n\n1. 【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\n\n\t说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。\n\n2. 【强制】  超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。\n\n\t说明：即使双表 join 也要注意表索引、SQL 性能。\n\n3. 【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。\n\n\t说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct  left(列名,  索引长度))/count(*)的区分度来确定。\n\n4. 【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。\n\n\t说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。\n\n5. 【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by  最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。\n\n\t正例：where a=? and b=? order by c;  索引：a_b_c\n\n\t反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a>10 ORDER BY b;  索引a_b 无法排序。\n\n6. 【推荐】利用覆盖索引来进行查询操作，避免回表。\n\n\t说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。\n\n\t正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。\n\n7. 【推荐】利用延迟关联或者子查询优化超多分页场景。\n\n\t说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。\n\n\t正例：先快速定位需要获取的 id 段，然后再关联：\n\n\t\tSELECT a.* FROM  表 1 a, (select id from  表 1 where  条件  LIMIT 100000,20 )  b where a.id=b.id \n\n8. 【推荐】   SQL 性能优化的目标：至少要达到  range  级别， 要求是 ref 级别， 如果可以是 consts最好。\n\n\t说明：\n\n\t\t1） consts  单表中最多只有一个匹配行 （主键或者唯一索引） ，在优化阶段即可读取到数据。\n\t\t2）ref  指的是使用普通的索引（normal index）。\n\t\t3）range  对索引进行范围检索。\n\n\t反例：explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。\n\n9. 【推荐】建组合索引的时候，区分度最高的在最左边。\n\n\t正例：如果 where  a=?  and  b=?  ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。\n\n\t说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where  a>? and b=?  那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。\n\n10.  【参考】创建索引时避免有如下极端误解：\n\n\t\t1）误认为一个查询就需要建一个索引。\n\t\t2）误认为索引会消耗空间、严重拖慢更新和新增速度。\n\t\t3）误认为唯一索引一律需要在应用层通过“先查后插”方式解决。\n\n### (三)  SQL 规约\n\n1. 【强制】不要使用 count(列名)或 count(常量)来替代 count(*)， count(*)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。\n\n\t说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。\n\n2. 【强制】count(distinct  col)  计算该列除 NULL 之外的不重复行数，注意  count(distinctcol1, col2)  如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。\n\n3. 【强制】 当某一列的值全是 NULL 时， count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。\n\n\t正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g))FROM table;\n\n4. 【强制】使用 ISNULL()来判断是否为 NULL 值。注意：NULL 与任何值的直接比较都为 NULL。\n\n\t说明：\n\n\t\t1） NULL<>NULL 的返回结果是 NULL，而不是 false。\n\t\t2） NULL=NULL 的返回结果是 NULL，而不是 true。\n\t\t3） NULL<>1 的返回结果是 NULL，而不是 true。\n\n5. 【强制】   在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。\n\n6. 【强制】不得使用外键与级联，一切外键概念必须在应用层解决。\n\n\t说明： （概念解释） 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。\n\n\t如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。\n\n\t外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。\n\n7. 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。\n\n8. 【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执行更新语句。\n\n9. 【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。\n\n10.  【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，那么字符计数方法\n\n\t注意：\n\n\t说明：\n\n\t\tSELECT LENGTH(\"轻松工作\")；  返回为 12\n\t\tSELECT CHARACTER_LENGTH(\"轻松工作\")；  返回为 4\n\n\t如果要使用表情，那么使用 utfmb4 来进行存储，注意它与 utf-8 编码的区别。 \n\n11.  【参考】   TRUNCATE  TABLE  比  DELETE  速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。\n\n\t说明：TRUNCATE TABLE  在功能上与不带  WHERE  子句的  DELETE  语句相同。\n\n### (四)  ORM 规约\n\n1. 【强制】在表查询中，一律不要使用  *  作为查询的字段列表，需要哪些字段必须明确写明。\n\n\t说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。\n\n2. 【强制】POJO 类的 Boolean 属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。\n\n说明：参见定义 POJO 类以及数据库字段定义规定，在<resultMap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行适当的修改。\n\n3. 【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。\n\n说明：配置映射关系，使字段与 DO 类解耦，方便维护。\n\n4. 【强制】xml 配置中参数注意：#{}，#param#  不要使用${}  此种方式容易出现 SQL 注入。\n\n5. 【强制】iBATIS 自带的 queryForList(String statementName,int start,int  size)不推荐使用。\n\n\t说明： 其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList取 start,size 的子集合，线上因为这个原因曾经出现\t过 OOM。\n\n\t正例：在 sqlmap.xml 中引入  #start#, #size#\n\n\t\tMap<String, Object> map = new HashMap<String, Object>(); \n\t\tmap.put(\"start\", start); \n\t\tmap.put(\"size\", size); \n\n6. 【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。\n\n7. 【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。\n\n8. 【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。\n\n9. 【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。\n\n10.  【参考】 <isEqual>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<isNotEmpty>表示不为空且不为 null 时执行；<isNotNull>表示不为 null 值时执行。     \n\n## 四、工程规约\n\n### (一)  应用分层\n\n1. 【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，\n\n\t如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：\n\t![ali](http://7xj99v.com1.z0.glb.clouddn.com/ali.png)\n\n\t* 开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。\n\t* 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP渲染，移动端展示等。\n\t* Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。\n\t* Service 层：相对具体的业务逻辑服务层。\n\t* Manager 层：通用业务处理层，它有如下特征：\n\t\t1. 对第三方平台封装的层，预处理返回结果及转化异常信息；\n\t\t2. 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；\n\t\t3. 与 DAO 层交互，对多个 DAO 的组合复用。\n\t* DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。\n\t* 外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。\n\n2. 【参考】  （分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO\n层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常,因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。\n\n3. 【参考】分层领域模型规约：\n\n\t* DO（Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。\n\t* DTO（Data Transfer Object）：数据传输对象，Service 和 Manager 向外传输的对象。\n\t* BO（Business Object）：业务对象。可以由 Service 层输出的封装业务逻辑的对象。\n    * QUERY：数据查询对象，各层接收上层的查询请求。注：超过 2 个参数的查询封装，禁止使用 Map 类来传输。\n\t* VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。\n\n### (二)  二方库规约\n\n1. 【强制】定义 GAV 遵从以下规则：\n\n\t1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。\n\n\t\t说明： {公司/BU}  例如： alibaba/taobao/tmall/aliexpress 等 BU 一级； 子业务线可选。\n\t\t正例：com.taobao.jstorm  或 com.alibaba.dubbo.register\n\n\t2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。\n\n\t\t正例：dubbo-client / fastjson-api / jstorm-tool\n\n\t3） Version：详细规定参考下方。\n\n2. 【强制】二方库版本号命名方式：主版本号.次版本号.修订号\n\n\t1. 主版本号：当做了不兼容的 API  修改，或者增加了能改变产品方向的新功能。\n\t2. 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。\n\t3. 修订号：修复 bug，没有修改方法签名的功能加强，保持  API  兼容性。\n\t\n\t\t说明：起始版本号必须为：1.0.0，而不是 0.0.1\n\n3. 【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，版本号不允许覆盖升级。\n\n\t> 说明： 不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。\n\t> 当前版本：1.3.3，那么下一个合理的版本号：1.3.4  或  1.4.0  或  2.0.0 \n\n4. 【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证， 建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。\n\n5. 【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。 \n\n6. 【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。\n\n\t> 说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。\n\n7. 【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。\n\n\t> 说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。\n\n8. 【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencyManagement>语句块中。\n\n\t> 说明：<dependencyManagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。\n\n9. 【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。\n\n10.  【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：\n\n\t1. 精简可控原则。移除一切不必要的 API 和依赖，只包含  Service  API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。\n\t2. 稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。\n\n### (三)  服务器规约\n\n1. 【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。\n\n\t> 说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。\n\n\t正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30\n\n2. 【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。\n\n\t> 说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open  too  many  files”错误，导致新的连接无法建立。   建议将 linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。\n\n3. 【推荐】给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。\n\n\t> 说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。\n\n4. 【参考】服务器内部重定向使用 forward；外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。   \n\n## 五、安全规约\n\n1. 【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。\n\n\t> 说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。\n\n2. 【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。\n\n\t> 说明：查看个人手机号码会显示成:158****9119，隐藏中间 4 位，防止隐私泄露。\n\n3. 【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。\n\n4. 【强制】用户请求传入的任何参数必须做有效性验证。\n\n\t> 说明：忽略参数校验可能导致：\n\n\t* page size 过大导致内存溢出\n\t* 恶意 order by 导致数据库慢查询\n\t* 任意重定向\n\t* SQL 注入\n\t* 反序列化注入\n\t* 正则输入源串拒绝服务 ReDoS\n\n\t> 说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。\n\n5. 【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。\n\n6. 【强制】表单、AJAX 提交必须执行 CSRF 安全过滤。\n\n\t> 说明：CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。\n\n7. 【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。\n\n\t> 说明： 如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。\n\n8. 【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。\n\n附 1：版本历史\n\n|版本号  |更新日期  |备注|\n|:-----:|:-------:|:-----|\n|1.0.0  |2017.2.9  |阿里巴巴正式对外发布|\n|1.0.1  |2017.2.13 | 1）修正 String[]的前后矛盾。2）vm 修正成 velocity。3）修正 countdown 描述错误。|\n|1.0.2  |2017.2.20|1）去除文底水印。2）数据类型中引用太阳系年龄问题。3）修正关于异常和方法签名的部分描述。4）修正 final 描述。5）去除 Comparator 部分描述。 |\n|1.1.0  |2017.2.27|1）增加前言。2）增加<? extends T>描述和说明。3）增加版本历史。4）增加专有名词解释。|\n\n附 2：本规约专有名词\n\n1. **POJO**（Plain Ordinary Java Object）：在本规约中，POJO 专指只有setter/getter/toString 的简单类，包括 DO/DTO/BO/VO 等。\n2. **DO**（Data Object）：本手册指数据库表一一对应的 POJO 类。\n3. **GAV**（GroupId、ArtifactctId、Version）：Maven 坐标，是用来唯一标识 jar 包。\n4. **OOP**（Object Oriented Programming）:  本手册泛指类、对象的编程处理方式。\n5. **ORM**（Object Relation Mapping）:  对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。\n6. **NPE**（java.lang.NullPointerException）:  空指针异常。\n7. **一方库**：本工程内部子项目模块依赖的库（jar 包）。\n8. **二方库**：公司内部发布到中央仓库，可供公司内部依赖的库（jar 包）。\n9. **三方库**：公司之外的开源的依赖库（jar 包）。\n\n附 3：法律声明\n\n本手册为阿里巴巴集团技术部的技术分享，版权归阿里巴巴集团所有，仅供大家交流、学习及研究使用，禁止用于商业用途，违者必究\n","source":"_posts/ali-java-guide.md","raw":"---\ntitle: alibaba-java\ndate: '2017-03-20'\ndescription: 阿里巴巴java开发手册\ncategories:\n- java\n\ntags:\n- java\n- 规范\n\n---\n\n根据[阿里巴巴java开发手册.pdf](https://yq.aliyun.com/attachment/download/?id=1170)转化。\n\n## 一、编程规约\n\n### (一)  命名规约\n\n1. 【强制】  代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。\n\n\t反例： _name / __name / $Object / name_ / name$ / Object$\n\n2. 【强制】  代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。\n\n\t说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。\n\n\t反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int  某变量  = 3\n\n\t正例： alibaba / taobao / youku / hangzhou  等国际通用的名称，可视同英文。\n\n3. 【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO 等。\n\n\t正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion\n\t\n\t反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion\n\n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。\n\t\n\t正例： localValue / getHttpMessage() / inputUserId\n\n5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n\t\n\t正例： MAX_STOCK_COUNT\n\t\n\t反例： MAX_COUNT\n\n6. 【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。\n\n7. 【强制】中括号是数组类型的一部分，数组定义如下：String[] args;\n\n\t反例：使用 String args[]的方式来定义。 \n\n8. 【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。\n\n\t反例：定义为基本数据类型 Boolean  isSuccess；的属性，它的方法也是 isSuccess()，RPC框架在反向解析的时候， “以为”对应的属性名称是 success，导致属性获取不到，进而抛出异常。\n\n9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。\n\n\t正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）\n\n10.  【强制】杜绝完全不规范的缩写，避免望文不知义。\n\n\t反例：  AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成  condi，此类随意缩写严重降低了代码的可阅读性。\n\n11.  【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。\n\n\t说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n\n\t正例：\t\n\t\n\t\tpublic class OrderFactory;\n\t\tpublic class LoginProxy;\n\t\tpublic class ResourceObserver;\n\n\n12.  【推荐】接口类中的方法和属性不要加任何修饰符号（public  也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n\n\t正例：接口方法签名：void f();\n\t\n\t接口基础常量表示：String COMPANY = \"alibaba\";\n\n\t反例：接口方法定义：public abstract void f();\n\n\t说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。\n\n13.  接口和实现类的命名有两套规则：\n\n\t1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。\n\t\n\t正例：CacheServiceImpl 实现 CacheService 接口。\n\t\n\t2）【推荐】如果是形容能力的接口名称，取对应的形容词做接口名 （通常是–able 的形式） 。\n\t\n\t正例：AbstractTranslator 实现  Translatable。\n\n14.  【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。\n\n\t说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n\n\t正例：枚举名字：DealStatusEnum，成员名称：SUCCESS / UNKOWN_REASON。 \n\n15.  【参考】各层命名规约： \n\n\tA) Service/DAO 层方法命名规约\n\n\t\t1）  获取单个对象的方法用 get 做前缀。\n\t\t2）  获取多个对象的方法用 list 做前缀。\n\t\t3）  获取统计值的方法用 count 做前缀。\n\t\t4）  插入的方法用 save（推荐）或 insert 做前缀。\n\t\t5）  删除的方法用 remove（推荐）或 delete 做前缀。\n\t\t6）  修改的方法用 update 做前缀。\n\n\tB)  领域模型命名规约\n\n\t\t1）  数据对象：xxxDO，xxx 即为数据表名。\n\t\t2）  数据传输对象：xxxDTO，xxx 为业务领域相关的名称。\n\t\t3）  展示对象：xxxVO，xxx 一般为网页名称。\n\t\t4）  POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n\n### (二)  常量定义\n\n1. 【强制】不允许出现任何魔法值（即未经定义的常量）直接出现在代码中。\n\n\t反例： \n\t\n\t\tString key = \"Id#taobao_\"+tradeId；\n\t\tcache.put(key, value);\n\n2. 【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解。\n\n\t说明：Long a = 2l;  写的是数字的 21，还是 Long 型的 2?\n\n3. 【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存相关的常量放在类：CacheConsts 下；系统配置相关的常量放在类：ConfigConsts 下。\n\n\t说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。\n\n4. 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。\n\t\n\t1）  跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。\n\t\n\t2）  应用内共享常量：放置在一方库的 modules 中的 constant 目录下。\n\n\t反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：\n\t\t\n\t\t类 A 中：public static final String YES = \"yes\";\n\t\t类 B 中：public static final String YES = \"y\";\n\t\tA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致产生线上问题。\n\n\t3）  子工程内部共享常量：即在当前子工程的 constant 目录下。\n\t\n\t4）  包内共享常量：即在当前包下单独的 constant 目录下。\n\t\n\t5）  类内共享常量：直接在类内部 private static final 定义。\n\n5. 【推荐】如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。\n\n\t正例：\n\t\t\n\t\tpublic Enum  { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}\n\n### (三)  格式规约\n\n1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：\n\t\n\t\t1）  左大括号前不换行。\n\t\t2）  左大括号后换行。\n\t\t3）  右大括号前换行。\n\t\t4）  右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。\n\n2. 【强制】  左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空\n格。详见第 5 条下方正例提示。\n\n3. 【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。\n\n4. 【强制】任何运算符左右必须加一个空格。\n\n\t说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号、三目运算符等。\n\n5. 【强制】缩进采用 4 个空格，禁止使用 tab 字符。\n\n\t说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。\n\n\t正例： （涉及 1-5 点）\n\n\t\tpublic static void main(String[]  args) { \n\t\t\t//  缩进 4 个空格   \n\t\t\tString say = \"hello\"; \n\t\t\t//  运算符的左右必须有一个空格 \n\t\t\tint flag = 0; \n\t\t\t//  关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格   \n\t\t\tif (flag == 0) { \n\t\t\t\tSystem.out.println(say); \n\t\t\t} \n\t\t\t//  左大括号前加空格且不换行；左大括号后换行 \n\t\t\tif (flag == 1) { \n\t\t\t\tSystem.out.println(\"world\"); \n\t\t\t\t//  右大括号前换行，右大括号后有 else，不用换行   \n\t\t\t} else { \n\t\t\t\tSystem.out.println(\"ok\"); \n\t\t\t\t//  在右大括号后直接结束，则必须换行   \n\t\t\t} \n\t\t} \n\n6. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n\t\t\n\t\t1）  第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n\t\t2）  运算符与下文一起换行。\n\t\t3）  方法调用的点符号与下文一起换行。\n\t\t4）  在多个参数超长，逗号后进行换行。\n\t\t5）  在括号前不要换行，见反例。\n\n\t正例：\n\t\t\n\t\tStringBuffer sb = new StringBuffer(); \n\t\t//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行 \n\t\tsb.append(\"zi\").append(\"xin\")... \n\t\t.append(\"huang\")... \n\t\t.append(\"huang\")... \n\t\t.append(\"huang\"); \n\t反例：\n\n\t\tStringBuffer sb = new StringBuffer(); \n\t\t//超过 120 个字符的情况下，不要在括号前换行 \n\t\tsb.append(\"zi\").append(\"xin\")...append \n\t\t(\"huang\"); \n\t\t//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\n\t\tmethod(args1, args2, args3, ... \n\t\t, argsX); \n\n7. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n\t正例：下例中实参的\"a\",后边必须要有一个空格。\n\n\t\tmethod(\"a\", \"b\", \"c\"); \n\n8. 【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。\n\n9. 【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。\n\n\t正例：\n\t\n\t\tint a = 3; \n\t\tlong b = 4L; \n\t\tfloat c = 5F; \n\t\tStringBuffer sb = new StringBuffer(); \n\n\t说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。 \n\n10.  【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。\n\n\t说明：没有必要插入多行空格进行隔开。\n\n### (四)  OOP 规约\n\n1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。\n\n2. 【强制】所有的覆写方法，必须加@Override 注解。\n\n\t反例： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。\n\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n\n\t说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）\n\n\t正例：public User getUsers(String type, Integer... ids)\n\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n\n5. 【强制】不能使用过时的类或方法。\n\n\t说明：java.net.URLDecoder  中的方法 decode(String  encodeStr)  这个方法已经过时，应该使用双参数 decode(String  source,  String  encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n\n6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。\n\t\n\t正例： \"test\".equals(object);\n\t\n\t反例： object.equals(\"test\");\n\t\t\n\t说明： 推荐使用 java.util.Objects#equals  （JDK7 引入的工具类）\n\n7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。\n\n\t说明：对于 Integer var = ?在-128 至 127 之间的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。\n\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n\n\t\t1）  【强制】所有的 POJO 类属性必须使用包装数据类型。\n\t\t2）  【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n\t\t3）  【推荐】所有的局部变量使用基本数据类型。\n\n\t说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。\n\n\t正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n\n\t反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。\n\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n\t反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n10.  【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。\n\n\t说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。\n\n11.  【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n\n12.  【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source>  generate  toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n\n\t说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n13.  【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。\n\n\t说明：\n\n\t\tString str = \"a,b,c,,\"; \n\t\tString[] ary = str.split(\",\"); \n\t\t//预期大于 3，结果是 3\n\t\tSystem.out.println(ary.length); \n\n14.  【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。\n\n15.  【推荐】  类内方法定义顺序依次是：公有方法或保护方法  >  私有方法  > getter/setter方法。\n\n\t说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n\n16.  【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名  =  参数名。在getter/setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。\n\n\t反例：\n\n\t\tpublic Integer getData()  { \n\t\t\tif (true)  { \n\t\t\t\treturn data + 100; \n\t\t\t}  else  {\n\t\t\t\treturn data  -  100;\n\t\t\t} \n\t\t} \n\n17.  【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。\n\n\t反例：\n\n\t\tString str = \"start\"; \n\t\tfor  (int  I  =  0;  I  <  100; i++)  { \n\t\t\tstr = str + \"hello\"; \n\t\t} \n\n\t说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。\n\n18.  【推荐】下列情况，声明成 final 会更有提示性：\n\n\t\t1）  不需要重新赋值的变量，包括类属性、局部变量。\n\t\t2）  对象参数前加 final，表示不允许修改引用的指向。\n\t\t3）  类方法确定不允许被重写。\n\n19.  【推荐】慎用 Object 的 clone 方法来拷贝对象。\n\n\t说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n\n20.  【推荐】类成员与方法访问控制从严：\n\n\t\t1）  如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。\n\t\t2）  工具类不允许有 public 或 default 构造方法。\n\t\t3）  类非 static 成员变量并且与子类共享，必须是 protected。\n\t\t4）  类非 static 成员变量并且仅在本类使用，必须是 private。\n\t\t5）  类 static 成员变量如果仅在本类使用，必须是 private。\n\t\t6）  若是 static 成员变量，必须考虑是否为 final。\n\t\t7）  类成员方法只供类内部调用，必须是 private。\n\t\t8）  类成员方法只对继承类公开，那么限制为 protected。\n\n\t说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。\n\n### (五)  集合处理\n\n1. 【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n\t\t1） 只要重写 equals，就必须重写 hashCode。\n\t\t2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的\n\t\t对象必须重写这两个方法。\n\t\t3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。\n\n\t说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。\n\n2. 【强制】   ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException\n\n\t异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;\n\n\t说明：subList  返回的是  ArrayList  的内部类  SubList，并不是  ArrayList  ，而是ArrayList  的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。\n\n3. 【强制】  在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException  异常。\n\n4. 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[]  array)，传入的是类型完全一样的数组，大小就是 list.size()。\n\n\t说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[  list.size()  ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。\n\n\t正例：\n\n\t\tList<String> list = new ArrayList<String>(2); \n\t\tlist.add(\"guan\"); \n\t\tlist.add(\"bao\"); \n\t\tString[] array = new String[list.size()]; \n\t\tarray = list.toArray(array); \n\n\t反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。\n\n5. 【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n\n\t说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n\n\t\tString[] str = new String[] { \"a\", \"b\" };\n\t\tList list = Arrays.asList(str); \n\t\t第一种情况：list.add(\"c\");  运行时异常。\n\t\t第二种情况：str[0] = \"gujin\";  那么 list.get(0)也会随之修改。\n\n6. 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法，而<? super T>不能使用 get 方法，做为接口调用赋值时易出错。\n\n\t说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：1）频繁往外读取内容的，适合用上界 Extends。2）经常往里插入的，适合用下界 Super。\n\n7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\n\n\t反例：\n\t\t\n\t\tList<String> a = new ArrayList<String>(); \n\t\ta.add(\"1\"); \n\t\ta.add(\"2\"); \n\t\tfor (String temp : a) { \n\t\t\tif  (\"1\".equals(temp))  { \n\t\t\t\ta.remove(temp); \n\t\t\t} \n\t\t} \n\n\t说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n\t\n\t正例：\n\n\t\tIterator<String> it = a.iterator(); \n\t\twhile  (it.hasNext())  { \n\t\t\tString temp =  it.next(); \n\t\t\tif  (删除元素的条件)  {   \n\t\t\t\tit.remove(); \n\t\t\t} \n\t\t} \n\n8. 【强制】  在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。\n\n\t说明：\n\t\n\t\t1）  x，y 的比较结果和 y，x 的比较结果相反。\n\t\t2）  x>y，y>z，则 x>z。\n\t\t3）  x=y，则 x，z 比较结果和 y，z 比较结果相同。\n\n\t反例：下例中没有处理相等的情况，实际使用中可能会出现异常：\n\n\t\tnew Comparator<Student>() { \n\t\t\t@Override \n\t\t\tpublic int compare(Student o1, Student o2) { \n\t\t\t\treturn o1.getId() > o2.getId() ? 1 :  -1; \n\t\t\t} \n\t\t} \n\n9. 【推荐】集合初始化时，尽量指定集合初始值大小。\n\n\t说明：ArrayList 尽量使用 ArrayList(int initialCapacity)  初始化。\n\n10.  【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\n\n\t<font color=\"#AD8022\" size = \"4px\">说明：</font>\n\tkeySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。\n\n\t正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。\n\n11.  【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n\t|集合类              | Key        | Value        |  Super      |   说明    |\n\t|:-----------------:|:----------:|:------------:|:-----------:|:---------:|\n\t|ConcurrentHashMap  |不允许为 null|不允许为 null  | AbstractMap |  分段锁技术|\n\t|TreeMap            |不允许为 null|允许为 null    | AbstractMap |  线程不安全|\n\t|HashMap            |允许为 null  |允许为 null    | AbstractMap |  线程不安全|\n\n\n\t反例：  由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储null 值时会抛出 NPE 异常。\n\n12.  【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。\n\n\t说明： 有序性是指遍历的结果是按某种比较规则依次排列的。 稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是order/sort。\n\n13.  【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。\n\n### (六)  并发处理\n\n1. 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n\n\t说明：资源驱动类、工具类、单例工厂类都需要注意。\n\n2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n\n\t正例：\n\t\tpublic class TimerTaskThread extends Thread { \n\t\t\tpublic TimerTaskThread()  { \n\t\t\t\tsuper.setName(\"TimerTaskThread\");    ... \n\t\t\t}\n\t\t}   \n\n3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n\n\t说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n\t说明：Executors 返回的线程池对象的弊端如下：\n\t\t\n\t1）FixedThreadPool 和 SingleThreadPool:\n\t\t\t\n\t允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\n\n\t2）CachedThreadPool 和 ScheduledThreadPool:\n\t\t\n\t允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n\n5. 【强制】SimpleDateFormat  是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。\n\n正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\n\n\t\tprivate static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() { \n\t\t\t@Override \n\t\t\tprotected DateFormat initialValue() { \n\t\t\t\treturn new SimpleDateFormat(\"yyyy-MM-dd\"); \n\t\t\t} \n\t\t}; \n\n\t说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 Simpledateformatter，官方给出的解释： simple  beautiful  strong immutable thread-safe。\n\n6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。\n\n7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。\n\n\t说明：线程一需要对表 A、B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。\n\n8. 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n\n\t说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n\n9. 【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。  \n\n10.  【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 await 方法，直到超时才返回结果。\n\n\t说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。\n\n11.  【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed  导致的性能下降。\n\n\t说明：Random 实例包括 java.util.Random  的实例或者  Math.random()实例。\n\n\t正例：在 JDK7 之后，可以直接使用 API  ThreadLocalRandom，在  JDK7 之前，可以做到每个线程一个实例。\n\n12.  【推荐】在并发场景下，通过双重检查锁（double-checked  locking）实现延迟初始化的优化问题隐患(可参考  The \"Double-Checked Locking is Broken\" Declaration)，推荐问题解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为  volatile 型。\n\n\t反例：\n\n\t\tclass Foo { \n\t\t\tprivate Helper helper = null; \n\t\t\tpublic Helper getHelper() { \n\t\t\t\tif (helper == null)  synchronized(this) { \n\t\t\t\t\tif (helper == null) \n\t\t\t\t\t\thelper = new Helper(); \n\t\t\t\t} \n\t\t\t\treturn helper; \n\t\t\t} \n\t\t\t// other functions and members... \n\t\t} \n\n13.  【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。\n\n\t如果是 count++操作，使用如下类实现：\n\n\t\tAtomicInteger  count  =  new  AtomicInteger();  count.addAndGet(1);  \n\n\t如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。\n\n14.  【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。\n\n15.  【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量  ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。\n\n### (七)  控制语句\n\n1. 【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。\n\n2. 【强制】在 if/else/for/while/do 语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) tatements;\n\n3. 【推荐】推荐尽量少用 else，  if-else 的方式可以改写成：\n\n\t\tif  (condition)  { \n\t\t...\n\t\treturn obj; \n\t\t} \n\t\t//  接着写 else 的业务逻辑代码; \n\n\t说明：如果非得使用 if()...else if()...else...方式表达逻辑，【强制】请勿超过 3 层，超过请使用状态设计模式。 \n\n\t正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。\n\n4. 【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n\n\t说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n\n\t正例：\n\n\t\t//伪代码如下\n\t\tboolean existed = (file.open(fileName, \"w\") != null)  &&  (...) || (...);\n\t\tif (existed) {\n\t\t...\n\t\t} \n\t反例：\n\n\t\tif ((file.open(fileName, \"w\") != null)  &&  (...) || (...)) {\n\t\t...\n\t\t}\n\n5. 【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作 （这个 try-catch 是否可以移至循环体外） 。\n\n6. 【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。\n\n7. 【参考】方法中需要进行参数校验的场景：\n\n\t\t1）  调用频次低的方法。\n\t\t2）  执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致\n\t\t中间执行回退，或者错误，那得不偿失。 \n\t\t3）  需要极高稳定性和可用性的方法。\n\t\t4）  对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n\t\t5）  敏感权限入口。\n\n8. 【参考】方法中不需要参数校验的场景：\n\n\t\t1）  极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参数检查要求。\n\t\t2）  底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n\t\t3）  被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n\n### (八)  注释规约\n\n1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用//xxx 方式。\n\n\t说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n2. 【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。\n\n\t说明：对子类的实现要求，或者调用注意事项，请一并说明。\n\n3. 【强制】所有的类都必须添加创建者信息。\n\n4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。\n\n5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n\n6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。\n\n\t反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n\n7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。\n\n\t说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。 \n\n8. 【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。\n\n\t说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。\n\n9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。\n\n10.  【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n\n\t反例：\n\t\t// put elephant into fridge \n\t\tput(elephant, fridge); \n\t\t方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n\n11.  【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。\n\n\t1）  待办事宜（TODO）:（  标记人，标记时间，[预计处理时间]）\n\n\t\t表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （因为它是一个 Javadoc 标签） 。\n\n\t2）  错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）\n\t\t\t\n\t\t在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。\n### (九)  其它\n\n1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。\n\n    说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则);\n\n2. 【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()方法。\n\n\t说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。\n\n3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。\n\n\t说明：如果 var=null 或者不存在，那么${var}会直接显示在页面上。\n\n4. 【强制】注意  Math.random()  这个方法返回是 double 类型，注意取值的范围  0≤x<1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。 \n\n5. 【强制】获取当前毫秒数 System.currentTimeMillis();  而不是 new Date().getTime();\n\n\t说明：如果想获取更加精确的纳秒级时间值，用 System.nanoTime()。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。\n\n6. 【推荐】尽量不要在 velocity 模板中加入变量声明、逻辑运算符，更不要在模板中加入任何复杂的逻辑。\n\n7. 【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。\n\n8. 【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。   \n\n## 二、异常日志\n\n### (一)  异常处理\n\n1. 【强制】Java  类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch  来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。\n\n\t说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。\n\n\t正例：if (obj != null) {...}\n\t\n\t反例：try { obj.method() } catch (NullPointerException e) {...}\n\n2. 【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。\n\n3. 【强制】对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。\n\n4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n\n5. 【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n\n6. 【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。\n\n7. 【强制】不能在 finally 块中使用 return， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n\n8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n9. 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。\n\n\t说明： 本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况。\n\n10.  【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n\n    1) 返回类型为包装数据类型，有可能是 null，返回 int 值时注意判空。\n\t\t\n\t\t反例：public int f() { return Integer 对象};  \n\t\t\t 如果为 null，自动解箱抛 NPE。\n\n  \t2) 数据库的查询结果可能为 null。\n\n  \t3) 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n\n\t4）  远程调用返回对象，一律要求进行 NPE 判断。\n\n \t5）  对于 Session 中获取的数据，建议 NPE 检查，避免空指针。\n\n  \t6）  级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n\t\t正例：可以使用 JDK8 的 Optional 类来防止 NPE 问题。\n\n11.  【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess、“错误码”、“错误简短信息”。\n\n\t说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n\n\t1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n\n\t2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n12.  【推荐】定义时区分 unchecked  /  checked  异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。\n\n13.  【参考】避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。\n\n\t正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n\t\tprivate boolean checkParam(DTO dto)  {...} \n### (二)  日志规约\n\n1. 【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。\n\n\t\timport org.slf4j.Logger; \n\t\timport org.slf4j.LoggerFactory;\n\t\tprivate static final Logger logger = LoggerFactory.getLogger(Abc.class); \n\n2. 【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。\n3. 【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：\n\n\tappName_logType_logName.log。\n\tlogType:日志类型，推荐分类有stats/desc/monitor/visit 等；\n\tlogName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。\n\n\t正例：mppserver 应用中单独监控时区转换异常，如：     \n\n\t\tmppserver_monitor_timeZoneConvert.log\n\n\t说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。\n\n4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。\n\n\t说明：logger.debug(\"Processing  trade  with  id: \" +  id  + \"  symbol: \" +  symbol);\n\t如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。\n\n\t正例：（条件）\n\n\t\tif (logger.isDebugEnabled()) { \n\t\t\tlogger.debug(\"Processing trade with id: \" + id + \" symbol: \" + symbol); \n\t\t} \n\n\t正例：（占位符）\n\n\t\tlogger.debug(\"Processing trade with id: {} symbol : {} \", id, symbol); \n\n5. 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。\n\n\t正例：<logger name=\"com.taobao.dubbo.config\" additivity=\"false\"> \n\n6. 【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。\n\n\t正例：logger.error(各类参数或者对象 toString + \"_\" + e.getMessage(), e);\n\n7. 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。\n\n\t说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？\n\n8. 【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。\n\n## 三、MySQL 规约\n\n### (一)  建表规约\n\n1. 【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned  tinyint（  1 表示是，0 表示否）。\n\n\t说明：任何字段如果为非负数，必须是 unsigned。\n\n2. 【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。\n\n\t正例：getter_admin，task_config，level3_name\n\n\t反例：GetterAdmin，taskConfig，level_3_name\n\n3. 【强制】表名不使用复数名词。\n\n\t说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。\n\n4. 【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。\n\n5. 【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。\n\n\t说明：pk_  即 primary key；uk_  即  unique key；idx_  即 index 的简称。\n\n6. 【强制】小数类型为 decimal，禁止使用 float 和 double。\n\n\t说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。\n\n7. 【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。\n\n8. 【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\n\n9. 【强制】表必备三字段：id, gmt_create, gmt_modified。\n\n\t说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 date_time 类型。\n\n10.  【推荐】表的命名最好是加上“业务名称_表的作用”。\n\n\t正例：tiger_task / tiger_reader / mpp_config\n\n11.  【推荐】库名与应用名称尽量一致。\n\n12.  【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。 \n\n13.  【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：\n\n\t1）不是频繁修改的字段。\n\t\n\t2）不是 varchar 超长字段，更不能是 text 字段。\n\n\t正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。\n\n14.  【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。\n\n\t说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。\n\n15.  【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。\n\n\t正例：无符号值可以避免误存负数，且扩大了表示范围。\n\n\t|对象    |年龄区间   |类型               |表示范围                     |\n\t|:-----:|:---------:|:----------------:|:--------------------------:|\n\t|人      |150 岁之内 | unsigned tinyint | 无符号值：0 到 255           |\n\t|龟      |数百岁     |unsigned smallint |无符号值：0 到 65535          |\n\t|恐龙化石 |  数千万年 |  unsigned int    |无符号值：0 到约 42.9 亿      |\n\t|太阳    |约 50 亿年 |  unsigned bigint |无符号值：0 到约 10 的 19 次方 |\n\n### (二)  索引规约\n\n1. 【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。\n\n\t说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。\n\n2. 【强制】  超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。\n\n\t说明：即使双表 join 也要注意表索引、SQL 性能。\n\n3. 【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。\n\n\t说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct  left(列名,  索引长度))/count(*)的区分度来确定。\n\n4. 【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。\n\n\t说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。\n\n5. 【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by  最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。\n\n\t正例：where a=? and b=? order by c;  索引：a_b_c\n\n\t反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a>10 ORDER BY b;  索引a_b 无法排序。\n\n6. 【推荐】利用覆盖索引来进行查询操作，避免回表。\n\n\t说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。\n\n\t正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。\n\n7. 【推荐】利用延迟关联或者子查询优化超多分页场景。\n\n\t说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。\n\n\t正例：先快速定位需要获取的 id 段，然后再关联：\n\n\t\tSELECT a.* FROM  表 1 a, (select id from  表 1 where  条件  LIMIT 100000,20 )  b where a.id=b.id \n\n8. 【推荐】   SQL 性能优化的目标：至少要达到  range  级别， 要求是 ref 级别， 如果可以是 consts最好。\n\n\t说明：\n\n\t\t1） consts  单表中最多只有一个匹配行 （主键或者唯一索引） ，在优化阶段即可读取到数据。\n\t\t2）ref  指的是使用普通的索引（normal index）。\n\t\t3）range  对索引进行范围检索。\n\n\t反例：explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。\n\n9. 【推荐】建组合索引的时候，区分度最高的在最左边。\n\n\t正例：如果 where  a=?  and  b=?  ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。\n\n\t说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where  a>? and b=?  那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。\n\n10.  【参考】创建索引时避免有如下极端误解：\n\n\t\t1）误认为一个查询就需要建一个索引。\n\t\t2）误认为索引会消耗空间、严重拖慢更新和新增速度。\n\t\t3）误认为唯一索引一律需要在应用层通过“先查后插”方式解决。\n\n### (三)  SQL 规约\n\n1. 【强制】不要使用 count(列名)或 count(常量)来替代 count(*)， count(*)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。\n\n\t说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。\n\n2. 【强制】count(distinct  col)  计算该列除 NULL 之外的不重复行数，注意  count(distinctcol1, col2)  如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。\n\n3. 【强制】 当某一列的值全是 NULL 时， count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。\n\n\t正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g))FROM table;\n\n4. 【强制】使用 ISNULL()来判断是否为 NULL 值。注意：NULL 与任何值的直接比较都为 NULL。\n\n\t说明：\n\n\t\t1） NULL<>NULL 的返回结果是 NULL，而不是 false。\n\t\t2） NULL=NULL 的返回结果是 NULL，而不是 true。\n\t\t3） NULL<>1 的返回结果是 NULL，而不是 true。\n\n5. 【强制】   在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。\n\n6. 【强制】不得使用外键与级联，一切外键概念必须在应用层解决。\n\n\t说明： （概念解释） 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。\n\n\t如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。\n\n\t外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。\n\n7. 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。\n\n8. 【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执行更新语句。\n\n9. 【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。\n\n10.  【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，那么字符计数方法\n\n\t注意：\n\n\t说明：\n\n\t\tSELECT LENGTH(\"轻松工作\")；  返回为 12\n\t\tSELECT CHARACTER_LENGTH(\"轻松工作\")；  返回为 4\n\n\t如果要使用表情，那么使用 utfmb4 来进行存储，注意它与 utf-8 编码的区别。 \n\n11.  【参考】   TRUNCATE  TABLE  比  DELETE  速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。\n\n\t说明：TRUNCATE TABLE  在功能上与不带  WHERE  子句的  DELETE  语句相同。\n\n### (四)  ORM 规约\n\n1. 【强制】在表查询中，一律不要使用  *  作为查询的字段列表，需要哪些字段必须明确写明。\n\n\t说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。\n\n2. 【强制】POJO 类的 Boolean 属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。\n\n说明：参见定义 POJO 类以及数据库字段定义规定，在<resultMap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行适当的修改。\n\n3. 【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。\n\n说明：配置映射关系，使字段与 DO 类解耦，方便维护。\n\n4. 【强制】xml 配置中参数注意：#{}，#param#  不要使用${}  此种方式容易出现 SQL 注入。\n\n5. 【强制】iBATIS 自带的 queryForList(String statementName,int start,int  size)不推荐使用。\n\n\t说明： 其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList取 start,size 的子集合，线上因为这个原因曾经出现\t过 OOM。\n\n\t正例：在 sqlmap.xml 中引入  #start#, #size#\n\n\t\tMap<String, Object> map = new HashMap<String, Object>(); \n\t\tmap.put(\"start\", start); \n\t\tmap.put(\"size\", size); \n\n6. 【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。\n\n7. 【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。\n\n8. 【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。\n\n9. 【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。\n\n10.  【参考】 <isEqual>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<isNotEmpty>表示不为空且不为 null 时执行；<isNotNull>表示不为 null 值时执行。     \n\n## 四、工程规约\n\n### (一)  应用分层\n\n1. 【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，\n\n\t如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：\n\t![ali](http://7xj99v.com1.z0.glb.clouddn.com/ali.png)\n\n\t* 开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。\n\t* 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP渲染，移动端展示等。\n\t* Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。\n\t* Service 层：相对具体的业务逻辑服务层。\n\t* Manager 层：通用业务处理层，它有如下特征：\n\t\t1. 对第三方平台封装的层，预处理返回结果及转化异常信息；\n\t\t2. 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；\n\t\t3. 与 DAO 层交互，对多个 DAO 的组合复用。\n\t* DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。\n\t* 外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。\n\n2. 【参考】  （分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO\n层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常,因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。\n\n3. 【参考】分层领域模型规约：\n\n\t* DO（Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。\n\t* DTO（Data Transfer Object）：数据传输对象，Service 和 Manager 向外传输的对象。\n\t* BO（Business Object）：业务对象。可以由 Service 层输出的封装业务逻辑的对象。\n    * QUERY：数据查询对象，各层接收上层的查询请求。注：超过 2 个参数的查询封装，禁止使用 Map 类来传输。\n\t* VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。\n\n### (二)  二方库规约\n\n1. 【强制】定义 GAV 遵从以下规则：\n\n\t1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。\n\n\t\t说明： {公司/BU}  例如： alibaba/taobao/tmall/aliexpress 等 BU 一级； 子业务线可选。\n\t\t正例：com.taobao.jstorm  或 com.alibaba.dubbo.register\n\n\t2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。\n\n\t\t正例：dubbo-client / fastjson-api / jstorm-tool\n\n\t3） Version：详细规定参考下方。\n\n2. 【强制】二方库版本号命名方式：主版本号.次版本号.修订号\n\n\t1. 主版本号：当做了不兼容的 API  修改，或者增加了能改变产品方向的新功能。\n\t2. 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。\n\t3. 修订号：修复 bug，没有修改方法签名的功能加强，保持  API  兼容性。\n\t\n\t\t说明：起始版本号必须为：1.0.0，而不是 0.0.1\n\n3. 【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，版本号不允许覆盖升级。\n\n\t> 说明： 不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。\n\t> 当前版本：1.3.3，那么下一个合理的版本号：1.3.4  或  1.4.0  或  2.0.0 \n\n4. 【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证， 建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。\n\n5. 【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。 \n\n6. 【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。\n\n\t> 说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。\n\n7. 【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。\n\n\t> 说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。\n\n8. 【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencyManagement>语句块中。\n\n\t> 说明：<dependencyManagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。\n\n9. 【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。\n\n10.  【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：\n\n\t1. 精简可控原则。移除一切不必要的 API 和依赖，只包含  Service  API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。\n\t2. 稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。\n\n### (三)  服务器规约\n\n1. 【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。\n\n\t> 说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。\n\n\t正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30\n\n2. 【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。\n\n\t> 说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open  too  many  files”错误，导致新的连接无法建立。   建议将 linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。\n\n3. 【推荐】给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。\n\n\t> 说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。\n\n4. 【参考】服务器内部重定向使用 forward；外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。   \n\n## 五、安全规约\n\n1. 【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。\n\n\t> 说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。\n\n2. 【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。\n\n\t> 说明：查看个人手机号码会显示成:158****9119，隐藏中间 4 位，防止隐私泄露。\n\n3. 【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。\n\n4. 【强制】用户请求传入的任何参数必须做有效性验证。\n\n\t> 说明：忽略参数校验可能导致：\n\n\t* page size 过大导致内存溢出\n\t* 恶意 order by 导致数据库慢查询\n\t* 任意重定向\n\t* SQL 注入\n\t* 反序列化注入\n\t* 正则输入源串拒绝服务 ReDoS\n\n\t> 说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。\n\n5. 【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。\n\n6. 【强制】表单、AJAX 提交必须执行 CSRF 安全过滤。\n\n\t> 说明：CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。\n\n7. 【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。\n\n\t> 说明： 如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。\n\n8. 【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。\n\n附 1：版本历史\n\n|版本号  |更新日期  |备注|\n|:-----:|:-------:|:-----|\n|1.0.0  |2017.2.9  |阿里巴巴正式对外发布|\n|1.0.1  |2017.2.13 | 1）修正 String[]的前后矛盾。2）vm 修正成 velocity。3）修正 countdown 描述错误。|\n|1.0.2  |2017.2.20|1）去除文底水印。2）数据类型中引用太阳系年龄问题。3）修正关于异常和方法签名的部分描述。4）修正 final 描述。5）去除 Comparator 部分描述。 |\n|1.1.0  |2017.2.27|1）增加前言。2）增加<? extends T>描述和说明。3）增加版本历史。4）增加专有名词解释。|\n\n附 2：本规约专有名词\n\n1. **POJO**（Plain Ordinary Java Object）：在本规约中，POJO 专指只有setter/getter/toString 的简单类，包括 DO/DTO/BO/VO 等。\n2. **DO**（Data Object）：本手册指数据库表一一对应的 POJO 类。\n3. **GAV**（GroupId、ArtifactctId、Version）：Maven 坐标，是用来唯一标识 jar 包。\n4. **OOP**（Object Oriented Programming）:  本手册泛指类、对象的编程处理方式。\n5. **ORM**（Object Relation Mapping）:  对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。\n6. **NPE**（java.lang.NullPointerException）:  空指针异常。\n7. **一方库**：本工程内部子项目模块依赖的库（jar 包）。\n8. **二方库**：公司内部发布到中央仓库，可供公司内部依赖的库（jar 包）。\n9. **三方库**：公司之外的开源的依赖库（jar 包）。\n\n附 3：法律声明\n\n本手册为阿里巴巴集团技术部的技术分享，版权归阿里巴巴集团所有，仅供大家交流、学习及研究使用，禁止用于商业用途，违者必究\n","slug":"ali-java-guide","published":1,"updated":"2018-06-20T03:14:01.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimjn8lb0077vqqj60icfog5","content":"<p>根据<a href=\"https://yq.aliyun.com/attachment/download/?id=1170\" target=\"_blank\" rel=\"noopener\">阿里巴巴java开发手册.pdf</a>转化。</p>\n<h2 id=\"一、编程规约\"><a href=\"#一、编程规约\" class=\"headerlink\" title=\"一、编程规约\"></a>一、编程规约</h2><h3 id=\"一-命名规约\"><a href=\"#一-命名规约\" class=\"headerlink\" title=\"(一)  命名规约\"></a>(一)  命名规约</h3><ol>\n<li><p>【强制】  代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p>\n<p> 反例： <em>name / __name / $Object / name</em> / name$ / Object$</p>\n</li>\n<li><p>【强制】  代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p>\n<p> 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>\n<p> 反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int  某变量  = 3</p>\n<p> 正例： alibaba / taobao / youku / hangzhou  等国际通用的名称，可视同英文。</p>\n</li>\n<li><p>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO 等。</p>\n<p> 正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</p>\n<p> 反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p>\n</li>\n<li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</p>\n<p> 正例： localValue / getHttpMessage() / inputUserId</p>\n</li>\n<li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p>\n<p> 正例： MAX_STOCK_COUNT</p>\n<p> 反例： MAX_COUNT</p>\n</li>\n<li><p>【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>\n</li>\n<li><p>【强制】中括号是数组类型的一部分，数组定义如下：String[] args;</p>\n<p> 反例：使用 String args[]的方式来定义。 </p>\n</li>\n<li><p>【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。</p>\n<p> 反例：定义为基本数据类型 Boolean  isSuccess；的属性，它的方法也是 isSuccess()，RPC框架在反向解析的时候， “以为”对应的属性名称是 success，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li><p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p>\n<p> 正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）</p>\n</li>\n<li><p>【强制】杜绝完全不规范的缩写，避免望文不知义。</p>\n<p>反例：  AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成  condi，此类随意缩写严重降低了代码的可阅读性。</p>\n</li>\n<li><p>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。</p>\n<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p>\n<p>正例：    </p>\n<p>   public class OrderFactory;<br>   public class LoginProxy;<br>   public class ResourceObserver;</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>【推荐】接口类中的方法和属性不要加任何修饰符号（public  也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n<p>正例：接口方法签名：void f();</p>\n<p>接口基础常量表示：String COMPANY = “alibaba”;</p>\n<p>反例：接口方法定义：public abstract void f();</p>\n<p>说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>\n</li>\n<li><p>接口和实现类的命名有两套规则：</p>\n<p>1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</p>\n<p>正例：CacheServiceImpl 实现 CacheService 接口。</p>\n<p>2）【推荐】如果是形容能力的接口名称，取对应的形容词做接口名 （通常是–able 的形式） 。</p>\n<p>正例：AbstractTranslator 实现  Translatable。</p>\n</li>\n<li><p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p>\n<p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p>\n<p>正例：枚举名字：DealStatusEnum，成员名称：SUCCESS / UNKOWN_REASON。 </p>\n</li>\n<li><p>【参考】各层命名规约： </p>\n<p>A) Service/DAO 层方法命名规约</p>\n<p>   1）  获取单个对象的方法用 get 做前缀。<br>   2）  获取多个对象的方法用 list 做前缀。<br>   3）  获取统计值的方法用 count 做前缀。<br>   4）  插入的方法用 save（推荐）或 insert 做前缀。<br>   5）  删除的方法用 remove（推荐）或 delete 做前缀。<br>   6）  修改的方法用 update 做前缀。</p>\n<p>B)  领域模型命名规约</p>\n<p>   1）  数据对象：xxxDO，xxx 即为数据表名。<br>   2）  数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>   3）  展示对象：xxxVO，xxx 一般为网页名称。<br>   4）  POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n</li>\n</ol>\n<h3 id=\"二-常量定义\"><a href=\"#二-常量定义\" class=\"headerlink\" title=\"(二)  常量定义\"></a>(二)  常量定义</h3><ol>\n<li><p>【强制】不允许出现任何魔法值（即未经定义的常量）直接出现在代码中。</p>\n<p> 反例： </p>\n<pre><code>String key = &quot;Id#taobao_&quot;+tradeId；\ncache.put(key, value);\n</code></pre></li>\n<li><p>【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解。</p>\n<p> 说明：Long a = 2l;  写的是数字的 21，还是 Long 型的 2?</p>\n</li>\n<li><p>【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存相关的常量放在类：CacheConsts 下；系统配置相关的常量放在类：ConfigConsts 下。</p>\n<p> 说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</p>\n</li>\n<li><p>【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</p>\n<p> 1）  跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p>\n<p> 2）  应用内共享常量：放置在一方库的 modules 中的 constant 目录下。</p>\n<p> 反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：</p>\n<pre><code>类 A 中：public static final String YES = &quot;yes&quot;;\n类 B 中：public static final String YES = &quot;y&quot;;\nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致产生线上问题。\n</code></pre><p> 3）  子工程内部共享常量：即在当前子工程的 constant 目录下。</p>\n<p> 4）  包内共享常量：即在当前包下单独的 constant 目录下。</p>\n<p> 5）  类内共享常量：直接在类内部 private static final 定义。</p>\n</li>\n<li><p>【推荐】如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。</p>\n<p> 正例：</p>\n<pre><code>public Enum  { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}\n</code></pre></li>\n</ol>\n<h3 id=\"三-格式规约\"><a href=\"#三-格式规约\" class=\"headerlink\" title=\"(三)  格式规约\"></a>(三)  格式规约</h3><ol>\n<li><p>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：</p>\n<pre><code>1）  左大括号前不换行。\n2）  左大括号后换行。\n3）  右大括号前换行。\n4）  右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。\n</code></pre></li>\n<li><p>【强制】  左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空<br>格。详见第 5 条下方正例提示。</p>\n</li>\n<li><p>【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。</p>\n</li>\n<li><p>【强制】任何运算符左右必须加一个空格。</p>\n<p> 说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号、三目运算符等。</p>\n</li>\n<li><p>【强制】缩进采用 4 个空格，禁止使用 tab 字符。</p>\n<p> 说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>\n<p> 正例： （涉及 1-5 点）</p>\n<pre><code>public static void main(String[]  args) { \n    //  缩进 4 个空格   \n    String say = &quot;hello&quot;; \n    //  运算符的左右必须有一个空格 \n    int flag = 0; \n    //  关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格   \n    if (flag == 0) { \n        System.out.println(say); \n    } \n    //  左大括号前加空格且不换行；左大括号后换行 \n    if (flag == 1) { \n        System.out.println(&quot;world&quot;); \n        //  右大括号前换行，右大括号后有 else，不用换行   \n    } else { \n        System.out.println(&quot;ok&quot;); \n        //  在右大括号后直接结束，则必须换行   \n    } \n} \n</code></pre></li>\n<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<pre><code>1）  第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n2）  运算符与下文一起换行。\n3）  方法调用的点符号与下文一起换行。\n4）  在多个参数超长，逗号后进行换行。\n5）  在括号前不要换行，见反例。\n</code></pre><p> 正例：</p>\n<pre><code>StringBuffer sb = new StringBuffer(); \n//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行 \nsb.append(&quot;zi&quot;).append(&quot;xin&quot;)... \n.append(&quot;huang&quot;)... \n.append(&quot;huang&quot;)... \n.append(&quot;huang&quot;); \n</code></pre><p> 反例：</p>\n<pre><code>StringBuffer sb = new StringBuffer(); \n//超过 120 个字符的情况下，不要在括号前换行 \nsb.append(&quot;zi&quot;).append(&quot;xin&quot;)...append \n(&quot;huang&quot;); \n//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\nmethod(args1, args2, args3, ... \n, argsX); \n</code></pre></li>\n<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<p> 正例：下例中实参的”a”,后边必须要有一个空格。</p>\n<pre><code>method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); \n</code></pre></li>\n<li><p>【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。</p>\n</li>\n<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。</p>\n<p> 正例：</p>\n<pre><code>int a = 3; \nlong b = 4L; \nfloat c = 5F; \nStringBuffer sb = new StringBuffer(); \n</code></pre><p> 说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。 </p>\n</li>\n<li><p>【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</p>\n<p>说明：没有必要插入多行空格进行隔开。</p>\n</li>\n</ol>\n<h3 id=\"四-OOP-规约\"><a href=\"#四-OOP-规约\" class=\"headerlink\" title=\"(四)  OOP 规约\"></a>(四)  OOP 规约</h3><ol>\n<li><p>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</p>\n</li>\n<li><p>【强制】所有的覆写方法，必须加@Override 注解。</p>\n<p> 反例： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p>\n</li>\n<li><p>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</p>\n<p> 说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>\n<p> 正例：public User getUsers(String type, Integer… ids)</p>\n</li>\n<li><p>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n</li>\n<li><p>【强制】不能使用过时的类或方法。</p>\n<p> 说明：java.net.URLDecoder  中的方法 decode(String  encodeStr)  这个方法已经过时，应该使用双参数 decode(String  source,  String  encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n</li>\n<li><p>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</p>\n<p> 正例： “test”.equals(object);</p>\n<p> 反例： object.equals(“test”);</p>\n<p> 说明： 推荐使用 java.util.Objects#equals  （JDK7 引入的工具类）</p>\n</li>\n<li><p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</p>\n<p> 说明：对于 Integer var = ?在-128 至 127 之间的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p>\n</li>\n<li><p>关于基本数据类型与包装数据类型的使用标准如下：</p>\n<pre><code>1）  【强制】所有的 POJO 类属性必须使用包装数据类型。\n2）  【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n3）  【推荐】所有的局部变量使用基本数据类型。\n</code></pre><p> 说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</p>\n<p> 正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>\n<p> 反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p>\n</li>\n<li><p>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</p>\n<p> 反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n</li>\n<li><p>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p>\n<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>\n</li>\n<li><p>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p>\n</li>\n<li><p>【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source&gt;  generate  toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>\n<p>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>\n</li>\n<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>\n<p>说明：</p>\n<p>   String str = “a,b,c,,”;<br>   String[] ary = str.split(“,”);<br>   //预期大于 3，结果是 3<br>   System.out.println(ary.length); </p>\n</li>\n<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。</p>\n</li>\n<li><p>【推荐】  类内方法定义顺序依次是：公有方法或保护方法  &gt;  私有方法  &gt; getter/setter方法。</p>\n<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</p>\n</li>\n<li><p>【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名  =  参数名。在getter/setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。</p>\n<p>反例：</p>\n<p>   public Integer getData()  { </p>\n<pre><code>if (true)  { \n    return data + 100; \n}  else  {\n    return data  -  100;\n} \n</code></pre><p>   } </p>\n</li>\n<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>\n<p>反例：</p>\n<p>   String str = “start”;<br>   for  (int  I  =  0;  I  &lt;  100; i++)  { </p>\n<pre><code>str = str + &quot;hello&quot;; \n</code></pre><p>   } </p>\n<p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p>\n</li>\n<li><p>【推荐】下列情况，声明成 final 会更有提示性：</p>\n<p>   1）  不需要重新赋值的变量，包括类属性、局部变量。<br>   2）  对象参数前加 final，表示不允许修改引用的指向。<br>   3）  类方法确定不允许被重写。</p>\n</li>\n<li><p>【推荐】慎用 Object 的 clone 方法来拷贝对象。</p>\n<p>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p>\n</li>\n<li><p>【推荐】类成员与方法访问控制从严：</p>\n<p>   1）  如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。<br>   2）  工具类不允许有 public 或 default 构造方法。<br>   3）  类非 static 成员变量并且与子类共享，必须是 protected。<br>   4）  类非 static 成员变量并且仅在本类使用，必须是 private。<br>   5）  类 static 成员变量如果仅在本类使用，必须是 private。<br>   6）  若是 static 成员变量，必须考虑是否为 final。<br>   7）  类成员方法只供类内部调用，必须是 private。<br>   8）  类成员方法只对继承类公开，那么限制为 protected。</p>\n<p>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p>\n</li>\n</ol>\n<h3 id=\"五-集合处理\"><a href=\"#五-集合处理\" class=\"headerlink\" title=\"(五)  集合处理\"></a>(五)  集合处理</h3><ol>\n<li><p>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>\n<pre><code>1） 只要重写 equals，就必须重写 hashCode。\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的\n对象必须重写这两个方法。\n3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。\n</code></pre><p> 说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</p>\n</li>\n<li><p>【强制】   ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException</p>\n<p> 异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;</p>\n<p> 说明：subList  返回的是  ArrayList  的内部类  SubList，并不是  ArrayList  ，而是ArrayList  的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p>\n</li>\n<li><p>【强制】  在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException  异常。</p>\n</li>\n<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[]  array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>\n<p> 说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[  list.size()  ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</p>\n<p> 正例：</p>\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;(2); \nlist.add(&quot;guan&quot;); \nlist.add(&quot;bao&quot;); \nString[] array = new String[list.size()]; \narray = list.toArray(array); \n</code></pre><p> 反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>\n</li>\n<li><p>【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<p> 说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>\n<pre><code>String[] str = new String[] { &quot;a&quot;, &quot;b&quot; };\nList list = Arrays.asList(str); \n第一种情况：list.add(&quot;c&quot;);  运行时异常。\n第二种情况：str[0] = &quot;gujin&quot;;  那么 list.get(0)也会随之修改。\n</code></pre></li>\n<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。</p>\n<p> 说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：1）频繁往外读取内容的，适合用上界 Extends。2）经常往里插入的，适合用下界 Super。</p>\n</li>\n<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</p>\n<p> 反例：</p>\n<pre><code>List&lt;String&gt; a = new ArrayList&lt;String&gt;(); \na.add(&quot;1&quot;); \na.add(&quot;2&quot;); \nfor (String temp : a) { \n    if  (&quot;1&quot;.equals(temp))  { \n        a.remove(temp); \n    } \n} \n</code></pre><p> 说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n<p> 正例：</p>\n<pre><code>Iterator&lt;String&gt; it = a.iterator(); \nwhile  (it.hasNext())  { \n    String temp =  it.next(); \n    if  (删除元素的条件)  {   \n        it.remove(); \n    } \n} \n</code></pre></li>\n<li><p>【强制】  在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。</p>\n<p> 说明：</p>\n<pre><code>1）  x，y 的比较结果和 y，x 的比较结果相反。\n2）  x&gt;y，y&gt;z，则 x&gt;z。\n3）  x=y，则 x，z 比较结果和 y，z 比较结果相同。\n</code></pre><p> 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p>\n<pre><code>new Comparator&lt;Student&gt;() { \n    @Override \n    public int compare(Student o1, Student o2) { \n        return o1.getId() &gt; o2.getId() ? 1 :  -1; \n    } \n} \n</code></pre></li>\n<li><p>【推荐】集合初始化时，尽量指定集合初始值大小。</p>\n<p> 说明：ArrayList 尽量使用 ArrayList(int initialCapacity)  初始化。</p>\n</li>\n<li><p>【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</p>\n<p><font color=\"#AD8022\" size=\"4px\">说明：</font><br>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。</p>\n<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p>\n</li>\n<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>\n<p>|集合类              | Key        | Value        |  Super      |   说明    |<br>|:—————–:|:———-:|:————:|:———–:|:———:|<br>|ConcurrentHashMap  |不允许为 null|不允许为 null  | AbstractMap |  分段锁技术|<br>|TreeMap            |不允许为 null|允许为 null    | AbstractMap |  线程不安全|<br>|HashMap            |允许为 null  |允许为 null    | AbstractMap |  线程不安全|</p>\n</li>\n</ol>\n<pre><code>反例：  由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储null 值时会抛出 NPE 异常。\n</code></pre><ol start=\"12\">\n<li><p>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。</p>\n<p>说明： 有序性是指遍历的结果是按某种比较规则依次排列的。 稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是order/sort。</p>\n</li>\n<li><p>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。</p>\n</li>\n</ol>\n<h3 id=\"六-并发处理\"><a href=\"#六-并发处理\" class=\"headerlink\" title=\"(六)  并发处理\"></a>(六)  并发处理</h3><ol>\n<li><p>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p>\n<p> 说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n</li>\n<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<p> 正例：</p>\n<pre><code>public class TimerTaskThread extends Thread { \n    public TimerTaskThread()  { \n        super.setName(&quot;TimerTaskThread&quot;);    ... \n    }\n}   \n</code></pre></li>\n<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p> 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n</li>\n<li><p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p> 说明：Executors 返回的线程池对象的弊端如下：</p>\n<p> 1）FixedThreadPool 和 SingleThreadPool:</p>\n<p> 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>\n<p> 2）CachedThreadPool 和 ScheduledThreadPool:</p>\n<p> 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>\n</li>\n<li><p>【强制】SimpleDateFormat  是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>\n</li>\n</ol>\n<p>正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</p>\n<pre><code>    private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() { \n        @Override \n        protected DateFormat initialValue() { \n            return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); \n        } \n    }; \n\n说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 Simpledateformatter，官方给出的解释： simple  beautiful  strong immutable thread-safe。\n</code></pre><ol start=\"6\">\n<li><p>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>\n</li>\n<li><p>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</p>\n<p> 说明：线程一需要对表 A、B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>\n</li>\n<li><p>【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p>\n<p> 说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>\n</li>\n<li><p>【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。  </p>\n</li>\n<li><p>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 await 方法，直到超时才返回结果。</p>\n<p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p>\n</li>\n<li><p>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed  导致的性能下降。</p>\n<p>说明：Random 实例包括 java.util.Random  的实例或者  Math.random()实例。</p>\n<p>正例：在 JDK7 之后，可以直接使用 API  ThreadLocalRandom，在  JDK7 之前，可以做到每个线程一个实例。</p>\n</li>\n<li><p>【推荐】在并发场景下，通过双重检查锁（double-checked  locking）实现延迟初始化的优化问题隐患(可参考  The “Double-Checked Locking is Broken” Declaration)，推荐问题解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为  volatile 型。</p>\n<p>反例：</p>\n<p>   class Foo { </p>\n<pre><code>private Helper helper = null; \npublic Helper getHelper() { \n    if (helper == null)  synchronized(this) { \n        if (helper == null) \n            helper = new Helper(); \n    } \n    return helper; \n} \n// other functions and members... \n</code></pre><p>   } </p>\n</li>\n<li><p>【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</p>\n<p>如果是 count++操作，使用如下类实现：</p>\n<p>   AtomicInteger  count  =  new  AtomicInteger();  count.addAndGet(1);  </p>\n<p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>\n</li>\n<li><p>【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</p>\n</li>\n<li><p>【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量  ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p>\n</li>\n</ol>\n<h3 id=\"七-控制语句\"><a href=\"#七-控制语句\" class=\"headerlink\" title=\"(七)  控制语句\"></a>(七)  控制语句</h3><ol>\n<li><p>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</p>\n</li>\n<li><p>【强制】在 if/else/for/while/do 语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) tatements;</p>\n</li>\n<li><p>【推荐】推荐尽量少用 else，  if-else 的方式可以改写成：</p>\n<pre><code>if  (condition)  { \n...\nreturn obj; \n} \n//  接着写 else 的业务逻辑代码; \n</code></pre><p> 说明：如果非得使用 if()…else if()…else…方式表达逻辑，【强制】请勿超过 3 层，超过请使用状态设计模式。 </p>\n<p> 正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。</p>\n</li>\n<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<p> 说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>\n<p> 正例：</p>\n<pre><code>//伪代码如下\nboolean existed = (file.open(fileName, &quot;w&quot;) != null)  &amp;&amp;  (...) || (...);\nif (existed) {\n...\n} \n</code></pre><p> 反例：</p>\n<pre><code>if ((file.open(fileName, &quot;w&quot;) != null)  &amp;&amp;  (...) || (...)) {\n...\n}\n</code></pre></li>\n<li><p>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作 （这个 try-catch 是否可以移至循环体外） 。</p>\n</li>\n<li><p>【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。</p>\n</li>\n<li><p>【参考】方法中需要进行参数校验的场景：</p>\n<pre><code>1）  调用频次低的方法。\n2）  执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致\n中间执行回退，或者错误，那得不偿失。 \n3）  需要极高稳定性和可用性的方法。\n4）  对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n5）  敏感权限入口。\n</code></pre></li>\n<li><p>【参考】方法中不需要参数校验的场景：</p>\n<pre><code>1）  极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参数检查要求。\n2）  底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n3）  被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n</code></pre></li>\n</ol>\n<h3 id=\"八-注释规约\"><a href=\"#八-注释规约\" class=\"headerlink\" title=\"(八)  注释规约\"></a>(八)  注释规约</h3><ol>\n<li><p>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用//xxx 方式。</p>\n<p> 说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n</li>\n<li><p>【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>\n<p> 说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>\n</li>\n<li><p>【强制】所有的类都必须添加创建者信息。</p>\n</li>\n<li><p>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</p>\n</li>\n<li><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n</li>\n<li><p>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p>\n<p> 反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>\n</li>\n<li><p>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p>\n<p> 说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。 </p>\n</li>\n<li><p>【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。</p>\n<p> 说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p>\n</li>\n<li><p>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p>\n</li>\n<li><p>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</p>\n<p>反例：<br>   // put elephant into fridge<br>   put(elephant, fridge);<br>   方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>\n</li>\n<li><p>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p>\n<p>1）  待办事宜（TODO）:（  标记人，标记时间，[预计处理时间]）</p>\n<p>   表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （因为它是一个 Javadoc 标签） 。</p>\n<p>2）  错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）</p>\n<p>   在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>\n<h3 id=\"九-其它\"><a href=\"#九-其它\" class=\"headerlink\" title=\"(九)  其它\"></a>(九)  其它</h3></li>\n<li><p>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</p>\n<p> 说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则);</p>\n</li>\n<li><p>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()方法。</p>\n<p> 说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p>\n</li>\n<li><p>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。</p>\n<p> 说明：如果 var=null 或者不存在，那么${var}会直接显示在页面上。</p>\n</li>\n<li><p>【强制】注意  Math.random()  这个方法返回是 double 类型，注意取值的范围  0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。 </p>\n</li>\n<li><p>【强制】获取当前毫秒数 System.currentTimeMillis();  而不是 new Date().getTime();</p>\n<p> 说明：如果想获取更加精确的纳秒级时间值，用 System.nanoTime()。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p>\n</li>\n<li><p>【推荐】尽量不要在 velocity 模板中加入变量声明、逻辑运算符，更不要在模板中加入任何复杂的逻辑。</p>\n</li>\n<li><p>【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p>\n</li>\n<li><p>【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。   </p>\n</li>\n</ol>\n<h2 id=\"二、异常日志\"><a href=\"#二、异常日志\" class=\"headerlink\" title=\"二、异常日志\"></a>二、异常日志</h2><h3 id=\"一-异常处理\"><a href=\"#一-异常处理\" class=\"headerlink\" title=\"(一)  异常处理\"></a>(一)  异常处理</h3><ol>\n<li><p>【强制】Java  类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch  来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。</p>\n<p> 说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。</p>\n<p> 正例：if (obj != null) {…}</p>\n<p> 反例：try { obj.method() } catch (NullPointerException e) {…}</p>\n</li>\n<li><p>【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</p>\n</li>\n<li><p>【强制】对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p>\n</li>\n<li><p>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p>\n</li>\n<li><p>【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p>\n</li>\n<li><p>【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。</p>\n</li>\n<li><p>【强制】不能在 finally 块中使用 return， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p>\n</li>\n<li><p>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>\n</li>\n<li><p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。</p>\n<p> 说明： 本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况。</p>\n</li>\n<li><p>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>\n<p>1) 返回类型为包装数据类型，有可能是 null，返回 int 值时注意判空。</p>\n<p>   反例：public int f() { return Integer 对象};  </p>\n<pre><code>如果为 null，自动解箱抛 NPE。\n</code></pre><p> 2) 数据库的查询结果可能为 null。</p>\n<p> 3) 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p>\n<p>4）  远程调用返回对象，一律要求进行 NPE 判断。</p>\n<p>5）  对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</p>\n<p> 6）  级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>\n<p>   正例：可以使用 JDK8 的 Optional 类来防止 NPE 问题。</p>\n</li>\n<li><p>【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess、“错误码”、“错误简短信息”。</p>\n<p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>\n<p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>\n</li>\n<li><p>【推荐】定义时区分 unchecked  /  checked  异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</p>\n</li>\n<li><p>【参考】避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。</p>\n<p>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br>   private boolean checkParam(DTO dto)  {…} </p>\n<h3 id=\"二-日志规约\"><a href=\"#二-日志规约\" class=\"headerlink\" title=\"(二)  日志规约\"></a>(二)  日志规约</h3></li>\n<li><p>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>\n<pre><code>import org.slf4j.Logger; \nimport org.slf4j.LoggerFactory;\nprivate static final Logger logger = LoggerFactory.getLogger(Abc.class); \n</code></pre></li>\n<li><p>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p>\n</li>\n<li><p>【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：</p>\n<p> appName_logType_logName.log。<br> logType:日志类型，推荐分类有stats/desc/monitor/visit 等；<br> logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p>\n<p> 正例：mppserver 应用中单独监控时区转换异常，如：     </p>\n<pre><code>mppserver_monitor_timeZoneConvert.log\n</code></pre><p> 说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p>\n</li>\n<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>\n<p> 说明：logger.debug(“Processing  trade  with  id: “ +  id  + “  symbol: “ +  symbol);<br> 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</p>\n<p> 正例：（条件）</p>\n<pre><code>if (logger.isDebugEnabled()) { \n    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol); \n} \n</code></pre><p> 正例：（占位符）</p>\n<pre><code>logger.debug(&quot;Processing trade with id: {} symbol : {} &quot;, id, symbol); \n</code></pre></li>\n<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>\n<p> 正例：<logger name=\"com.taobao.dubbo.config\" additivity=\"false\"> </logger></p>\n</li>\n<li><p>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</p>\n<p> 正例：logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</p>\n</li>\n<li><p>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</p>\n<p> 说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p>\n</li>\n<li><p>【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</p>\n</li>\n</ol>\n<h2 id=\"三、MySQL-规约\"><a href=\"#三、MySQL-规约\" class=\"headerlink\" title=\"三、MySQL 规约\"></a>三、MySQL 规约</h2><h3 id=\"一-建表规约\"><a href=\"#一-建表规约\" class=\"headerlink\" title=\"(一)  建表规约\"></a>(一)  建表规约</h3><ol>\n<li><p>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned  tinyint（  1 表示是，0 表示否）。</p>\n<p> 说明：任何字段如果为非负数，必须是 unsigned。</p>\n</li>\n<li><p>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>\n<p> 正例：getter_admin，task_config，level3_name</p>\n<p> 反例：GetterAdmin，taskConfig，level_3_name</p>\n</li>\n<li><p>【强制】表名不使用复数名词。</p>\n<p> 说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>\n</li>\n<li><p>【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p>\n</li>\n<li><p>【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p>\n<p> 说明：pk_  即 primary key；uk_  即  unique key；idx_  即 index 的简称。</p>\n</li>\n<li><p>【强制】小数类型为 decimal，禁止使用 float 和 double。</p>\n<p> 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>\n</li>\n<li><p>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>\n</li>\n<li><p>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p>\n</li>\n<li><p>【强制】表必备三字段：id, gmt_create, gmt_modified。</p>\n<p> 说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 date_time 类型。</p>\n</li>\n<li><p>【推荐】表的命名最好是加上“业务名称_表的作用”。</p>\n<p>正例：tiger_task / tiger_reader / mpp_config</p>\n</li>\n<li><p>【推荐】库名与应用名称尽量一致。</p>\n</li>\n<li><p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。 </p>\n</li>\n<li><p>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：</p>\n<p>1）不是频繁修改的字段。</p>\n<p>2）不是 varchar 超长字段，更不能是 text 字段。</p>\n<p>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p>\n</li>\n<li><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p>\n<p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>\n</li>\n<li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p>\n<p>正例：无符号值可以避免误存负数，且扩大了表示范围。</p>\n<p>|对象    |年龄区间   |类型               |表示范围                     |<br>|:—–:|:———:|:—————-:|:————————–:|<br>|人      |150 岁之内 | unsigned tinyint | 无符号值：0 到 255           |<br>|龟      |数百岁     |unsigned smallint |无符号值：0 到 65535          |<br>|恐龙化石 |  数千万年 |  unsigned int    |无符号值：0 到约 42.9 亿      |<br>|太阳    |约 50 亿年 |  unsigned bigint |无符号值：0 到约 10 的 19 次方 |</p>\n</li>\n</ol>\n<h3 id=\"二-索引规约\"><a href=\"#二-索引规约\" class=\"headerlink\" title=\"(二)  索引规约\"></a>(二)  索引规约</h3><ol>\n<li><p>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</p>\n<p> 说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p>\n</li>\n<li><p>【强制】  超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p>\n<p> 说明：即使双表 join 也要注意表索引、SQL 性能。</p>\n</li>\n<li><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。</p>\n<p> 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct  left(列名,  索引长度))/count(*)的区分度来确定。</p>\n</li>\n<li><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p>\n<p> 说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>\n</li>\n<li><p>【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by  最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</p>\n<p> 正例：where a=? and b=? order by c;  索引：a_b_c</p>\n<p> 反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b;  索引a_b 无法排序。</p>\n</li>\n<li><p>【推荐】利用覆盖索引来进行查询操作，避免回表。</p>\n<p> 说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p>\n<p> 正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</p>\n</li>\n<li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。</p>\n<p> 说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p>\n<p> 正例：先快速定位需要获取的 id 段，然后再关联：</p>\n<pre><code>SELECT a.* FROM  表 1 a, (select id from  表 1 where  条件  LIMIT 100000,20 )  b where a.id=b.id \n</code></pre></li>\n<li><p>【推荐】   SQL 性能优化的目标：至少要达到  range  级别， 要求是 ref 级别， 如果可以是 consts最好。</p>\n<p> 说明：</p>\n<pre><code>1） consts  单表中最多只有一个匹配行 （主键或者唯一索引） ，在优化阶段即可读取到数据。\n2）ref  指的是使用普通的索引（normal index）。\n3）range  对索引进行范围检索。\n</code></pre><p> 反例：explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p>\n</li>\n<li><p>【推荐】建组合索引的时候，区分度最高的在最左边。</p>\n<p> 正例：如果 where  a=?  and  b=?  ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p>\n<p> 说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where  a&gt;? and b=?  那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p>\n</li>\n<li><p>【参考】创建索引时避免有如下极端误解：</p>\n<p>   1）误认为一个查询就需要建一个索引。<br>   2）误认为索引会消耗空间、严重拖慢更新和新增速度。<br>   3）误认为唯一索引一律需要在应用层通过“先查后插”方式解决。</p>\n</li>\n</ol>\n<h3 id=\"三-SQL-规约\"><a href=\"#三-SQL-规约\" class=\"headerlink\" title=\"(三)  SQL 规约\"></a>(三)  SQL 规约</h3><ol>\n<li><p>【强制】不要使用 count(列名)或 count(常量)来替代 count(<em>)， count(</em>)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p>\n<p> 说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p>\n</li>\n<li><p>【强制】count(distinct  col)  计算该列除 NULL 之外的不重复行数，注意  count(distinctcol1, col2)  如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p>\n</li>\n<li><p>【强制】 当某一列的值全是 NULL 时， count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。</p>\n<p> 正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g))FROM table;</p>\n</li>\n<li><p>【强制】使用 ISNULL()来判断是否为 NULL 值。注意：NULL 与任何值的直接比较都为 NULL。</p>\n<p> 说明：</p>\n<pre><code>1） NULL&lt;&gt;NULL 的返回结果是 NULL，而不是 false。\n2） NULL=NULL 的返回结果是 NULL，而不是 true。\n3） NULL&lt;&gt;1 的返回结果是 NULL，而不是 true。\n</code></pre></li>\n<li><p>【强制】   在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p>\n</li>\n<li><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p>\n<p> 说明： （概念解释） 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。</p>\n<p> 如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。</p>\n<p> 外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>\n</li>\n<li><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>\n</li>\n<li><p>【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执行更新语句。</p>\n</li>\n<li><p>【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p>\n</li>\n<li><p>【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，那么字符计数方法</p>\n<p>注意：</p>\n<p>说明：</p>\n<p>   SELECT LENGTH(“轻松工作”)；  返回为 12<br>   SELECT CHARACTER_LENGTH(“轻松工作”)；  返回为 4</p>\n<p>如果要使用表情，那么使用 utfmb4 来进行存储，注意它与 utf-8 编码的区别。 </p>\n</li>\n<li><p>【参考】   TRUNCATE  TABLE  比  DELETE  速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p>\n<p>说明：TRUNCATE TABLE  在功能上与不带  WHERE  子句的  DELETE  语句相同。</p>\n</li>\n</ol>\n<h3 id=\"四-ORM-规约\"><a href=\"#四-ORM-规约\" class=\"headerlink\" title=\"(四)  ORM 规约\"></a>(四)  ORM 规约</h3><ol>\n<li><p>【强制】在表查询中，一律不要使用  *  作为查询的字段列表，需要哪些字段必须明确写明。</p>\n<p> 说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。</p>\n</li>\n<li><p>【强制】POJO 类的 Boolean 属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</p>\n</li>\n</ol>\n<p>说明：参见定义 POJO 类以及数据库字段定义规定，在<resultmap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行适当的修改。</resultmap></p>\n<ol start=\"3\">\n<li>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。</li>\n</ol>\n<p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p>\n<ol start=\"4\">\n<li><p>【强制】xml 配置中参数注意：#{}，#param#  不要使用${}  此种方式容易出现 SQL 注入。</p>\n</li>\n<li><p>【强制】iBATIS 自带的 queryForList(String statementName,int start,int  size)不推荐使用。</p>\n<p> 说明： 其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList取 start,size 的子集合，线上因为这个原因曾经出现    过 OOM。</p>\n<p> 正例：在 sqlmap.xml 中引入  #start#, #size#</p>\n<pre><code>Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); \nmap.put(&quot;start&quot;, start); \nmap.put(&quot;size&quot;, size); \n</code></pre></li>\n<li><p>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p>\n</li>\n<li><p>【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</p>\n</li>\n<li><p>【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p>\n</li>\n<li><p>【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p>\n</li>\n<li><p>【参考】 <isequal>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<isnotempty>表示不为空且不为 null 时执行；<isnotnull>表示不为 null 值时执行。     </isnotnull></isnotempty></isequal></p>\n</li>\n</ol>\n<h2 id=\"四、工程规约\"><a href=\"#四、工程规约\" class=\"headerlink\" title=\"四、工程规约\"></a>四、工程规约</h2><h3 id=\"一-应用分层\"><a href=\"#一-应用分层\" class=\"headerlink\" title=\"(一)  应用分层\"></a>(一)  应用分层</h3><ol>\n<li><p>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，</p>\n<p> 如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：<br> <img src=\"http://7xj99v.com1.z0.glb.clouddn.com/ali.png\" alt=\"ali\"></p>\n<ul>\n<li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li>\n<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP渲染，移动端展示等。</li>\n<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>\n<li>Service 层：相对具体的业务逻辑服务层。</li>\n<li>Manager 层：通用业务处理层，它有如下特征：<ol>\n<li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li>\n<li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li>\n<li>与 DAO 层交互，对多个 DAO 的组合复用。</li>\n</ol>\n</li>\n<li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。</li>\n<li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>\n</ul>\n</li>\n<li><p>【参考】  （分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO<br>层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常,因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p>\n</li>\n<li><p>【参考】分层领域模型规约：</p>\n<ul>\n<li>DO（Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>\n<li>DTO（Data Transfer Object）：数据传输对象，Service 和 Manager 向外传输的对象。</li>\n<li>BO（Business Object）：业务对象。可以由 Service 层输出的封装业务逻辑的对象。</li>\n<li>QUERY：数据查询对象，各层接收上层的查询请求。注：超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li>\n<li>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二-二方库规约\"><a href=\"#二-二方库规约\" class=\"headerlink\" title=\"(二)  二方库规约\"></a>(二)  二方库规约</h3><ol>\n<li><p>【强制】定义 GAV 遵从以下规则：</p>\n<p> 1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。</p>\n<pre><code>说明： {公司/BU}  例如： alibaba/taobao/tmall/aliexpress 等 BU 一级； 子业务线可选。\n正例：com.taobao.jstorm  或 com.alibaba.dubbo.register\n</code></pre><p> 2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。</p>\n<pre><code>正例：dubbo-client / fastjson-api / jstorm-tool\n</code></pre><p> 3） Version：详细规定参考下方。</p>\n</li>\n<li><p>【强制】二方库版本号命名方式：主版本号.次版本号.修订号</p>\n<ol>\n<li>主版本号：当做了不兼容的 API  修改，或者增加了能改变产品方向的新功能。</li>\n<li>次版本号：当做了向下兼容的功能性新增（新增类、接口等）。</li>\n<li><p>修订号：修复 bug，没有修改方法签名的功能加强，保持  API  兼容性。</p>\n<p> 说明：起始版本号必须为：1.0.0，而不是 0.0.1</p>\n</li>\n</ol>\n</li>\n<li><p>【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，版本号不允许覆盖升级。</p>\n<blockquote>\n<p>说明： 不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。<br>当前版本：1.3.3，那么下一个合理的版本号：1.3.4  或  1.4.0  或  2.0.0 </p>\n</blockquote>\n</li>\n<li><p>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证， 建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。</excludes></p>\n</li>\n<li><p>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。 </p>\n</li>\n<li><p>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p>\n<blockquote>\n<p>说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p>\n</blockquote>\n</li>\n<li><p>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。</p>\n<blockquote>\n<p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。</p>\n</blockquote>\n</li>\n<li><p>【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencymanagement>语句块中。</dependencymanagement></dependencies></p>\n<blockquote>\n<p>说明：<dependencymanagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。</dependencies></dependencies></dependencymanagement></p>\n</blockquote>\n</li>\n<li><p>【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。</p>\n</li>\n<li><p>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p>\n<ol>\n<li>精简可控原则。移除一切不必要的 API 和依赖，只包含  Service  API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。</li>\n<li>稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三-服务器规约\"><a href=\"#三-服务器规约\" class=\"headerlink\" title=\"(三)  服务器规约\"></a>(三)  服务器规约</h3><ol>\n<li><p>【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。</p>\n<blockquote>\n<p>说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p>\n</blockquote>\n<p> 正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30</p>\n</li>\n<li><p>【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。</p>\n<blockquote>\n<p>说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open  too  many  files”错误，导致新的连接无法建立。   建议将 linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。</p>\n</blockquote>\n</li>\n<li><p>【推荐】给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。</p>\n<blockquote>\n<p>说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。</p>\n</blockquote>\n</li>\n<li><p>【参考】服务器内部重定向使用 forward；外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。   </p>\n</li>\n</ol>\n<h2 id=\"五、安全规约\"><a href=\"#五、安全规约\" class=\"headerlink\" title=\"五、安全规约\"></a>五、安全规约</h2><ol>\n<li><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</p>\n<blockquote>\n<p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p>\n</blockquote>\n</li>\n<li><p>【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。</p>\n<blockquote>\n<p>说明：查看个人手机号码会显示成:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。</p>\n</blockquote>\n</li>\n<li><p>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</p>\n</li>\n<li><p>【强制】用户请求传入的任何参数必须做有效性验证。</p>\n<blockquote>\n<p>说明：忽略参数校验可能导致：</p>\n</blockquote>\n<ul>\n<li>page size 过大导致内存溢出</li>\n<li>恶意 order by 导致数据库慢查询</li>\n<li>任意重定向</li>\n<li>SQL 注入</li>\n<li>反序列化注入</li>\n<li><p>正则输入源串拒绝服务 ReDoS</p>\n<blockquote>\n<p>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p>\n</li>\n<li><p>【强制】表单、AJAX 提交必须执行 CSRF 安全过滤。</p>\n<blockquote>\n<p>说明：CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。</p>\n</blockquote>\n</li>\n<li><p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。</p>\n<blockquote>\n<p>说明： 如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p>\n</blockquote>\n</li>\n<li><p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p>\n</li>\n</ol>\n<p>附 1：版本历史</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本号</th>\n<th style=\"text-align:center\">更新日期</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1.0.0</td>\n<td style=\"text-align:center\">2017.2.9</td>\n<td style=\"text-align:left\">阿里巴巴正式对外发布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.0.1</td>\n<td style=\"text-align:center\">2017.2.13</td>\n<td style=\"text-align:left\">1）修正 String[]的前后矛盾。2）vm 修正成 velocity。3）修正 countdown 描述错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.0.2</td>\n<td style=\"text-align:center\">2017.2.20</td>\n<td style=\"text-align:left\">1）去除文底水印。2）数据类型中引用太阳系年龄问题。3）修正关于异常和方法签名的部分描述。4）修正 final 描述。5）去除 Comparator 部分描述。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.1.0</td>\n<td style=\"text-align:center\">2017.2.27</td>\n<td style=\"text-align:left\">1）增加前言。2）增加&lt;? extends T&gt;描述和说明。3）增加版本历史。4）增加专有名词解释。</td>\n</tr>\n</tbody>\n</table>\n<p>附 2：本规约专有名词</p>\n<ol>\n<li><strong>POJO</strong>（Plain Ordinary Java Object）：在本规约中，POJO 专指只有setter/getter/toString 的简单类，包括 DO/DTO/BO/VO 等。</li>\n<li><strong>DO</strong>（Data Object）：本手册指数据库表一一对应的 POJO 类。</li>\n<li><strong>GAV</strong>（GroupId、ArtifactctId、Version）：Maven 坐标，是用来唯一标识 jar 包。</li>\n<li><strong>OOP</strong>（Object Oriented Programming）:  本手册泛指类、对象的编程处理方式。</li>\n<li><strong>ORM</strong>（Object Relation Mapping）:  对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。</li>\n<li><strong>NPE</strong>（java.lang.NullPointerException）:  空指针异常。</li>\n<li><strong>一方库</strong>：本工程内部子项目模块依赖的库（jar 包）。</li>\n<li><strong>二方库</strong>：公司内部发布到中央仓库，可供公司内部依赖的库（jar 包）。</li>\n<li><strong>三方库</strong>：公司之外的开源的依赖库（jar 包）。</li>\n</ol>\n<p>附 3：法律声明</p>\n<p>本手册为阿里巴巴集团技术部的技术分享，版权归阿里巴巴集团所有，仅供大家交流、学习及研究使用，禁止用于商业用途，违者必究</p>\n","site":{"data":{}},"excerpt":"","more":"<p>根据<a href=\"https://yq.aliyun.com/attachment/download/?id=1170\" target=\"_blank\" rel=\"noopener\">阿里巴巴java开发手册.pdf</a>转化。</p>\n<h2 id=\"一、编程规约\"><a href=\"#一、编程规约\" class=\"headerlink\" title=\"一、编程规约\"></a>一、编程规约</h2><h3 id=\"一-命名规约\"><a href=\"#一-命名规约\" class=\"headerlink\" title=\"(一)  命名规约\"></a>(一)  命名规约</h3><ol>\n<li><p>【强制】  代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p>\n<p> 反例： <em>name / __name / $Object / name</em> / name$ / Object$</p>\n</li>\n<li><p>【强制】  代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p>\n<p> 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>\n<p> 反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int  某变量  = 3</p>\n<p> 正例： alibaba / taobao / youku / hangzhou  等国际通用的名称，可视同英文。</p>\n</li>\n<li><p>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO 等。</p>\n<p> 正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</p>\n<p> 反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p>\n</li>\n<li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</p>\n<p> 正例： localValue / getHttpMessage() / inputUserId</p>\n</li>\n<li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p>\n<p> 正例： MAX_STOCK_COUNT</p>\n<p> 反例： MAX_COUNT</p>\n</li>\n<li><p>【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>\n</li>\n<li><p>【强制】中括号是数组类型的一部分，数组定义如下：String[] args;</p>\n<p> 反例：使用 String args[]的方式来定义。 </p>\n</li>\n<li><p>【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。</p>\n<p> 反例：定义为基本数据类型 Boolean  isSuccess；的属性，它的方法也是 isSuccess()，RPC框架在反向解析的时候， “以为”对应的属性名称是 success，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li><p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p>\n<p> 正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）</p>\n</li>\n<li><p>【强制】杜绝完全不规范的缩写，避免望文不知义。</p>\n<p>反例：  AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成  condi，此类随意缩写严重降低了代码的可阅读性。</p>\n</li>\n<li><p>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。</p>\n<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p>\n<p>正例：    </p>\n<p>   public class OrderFactory;<br>   public class LoginProxy;<br>   public class ResourceObserver;</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>【推荐】接口类中的方法和属性不要加任何修饰符号（public  也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n<p>正例：接口方法签名：void f();</p>\n<p>接口基础常量表示：String COMPANY = “alibaba”;</p>\n<p>反例：接口方法定义：public abstract void f();</p>\n<p>说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>\n</li>\n<li><p>接口和实现类的命名有两套规则：</p>\n<p>1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</p>\n<p>正例：CacheServiceImpl 实现 CacheService 接口。</p>\n<p>2）【推荐】如果是形容能力的接口名称，取对应的形容词做接口名 （通常是–able 的形式） 。</p>\n<p>正例：AbstractTranslator 实现  Translatable。</p>\n</li>\n<li><p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p>\n<p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p>\n<p>正例：枚举名字：DealStatusEnum，成员名称：SUCCESS / UNKOWN_REASON。 </p>\n</li>\n<li><p>【参考】各层命名规约： </p>\n<p>A) Service/DAO 层方法命名规约</p>\n<p>   1）  获取单个对象的方法用 get 做前缀。<br>   2）  获取多个对象的方法用 list 做前缀。<br>   3）  获取统计值的方法用 count 做前缀。<br>   4）  插入的方法用 save（推荐）或 insert 做前缀。<br>   5）  删除的方法用 remove（推荐）或 delete 做前缀。<br>   6）  修改的方法用 update 做前缀。</p>\n<p>B)  领域模型命名规约</p>\n<p>   1）  数据对象：xxxDO，xxx 即为数据表名。<br>   2）  数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>   3）  展示对象：xxxVO，xxx 一般为网页名称。<br>   4）  POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n</li>\n</ol>\n<h3 id=\"二-常量定义\"><a href=\"#二-常量定义\" class=\"headerlink\" title=\"(二)  常量定义\"></a>(二)  常量定义</h3><ol>\n<li><p>【强制】不允许出现任何魔法值（即未经定义的常量）直接出现在代码中。</p>\n<p> 反例： </p>\n<pre><code>String key = &quot;Id#taobao_&quot;+tradeId；\ncache.put(key, value);\n</code></pre></li>\n<li><p>【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解。</p>\n<p> 说明：Long a = 2l;  写的是数字的 21，还是 Long 型的 2?</p>\n</li>\n<li><p>【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存相关的常量放在类：CacheConsts 下；系统配置相关的常量放在类：ConfigConsts 下。</p>\n<p> 说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</p>\n</li>\n<li><p>【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</p>\n<p> 1）  跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p>\n<p> 2）  应用内共享常量：放置在一方库的 modules 中的 constant 目录下。</p>\n<p> 反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：</p>\n<pre><code>类 A 中：public static final String YES = &quot;yes&quot;;\n类 B 中：public static final String YES = &quot;y&quot;;\nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致产生线上问题。\n</code></pre><p> 3）  子工程内部共享常量：即在当前子工程的 constant 目录下。</p>\n<p> 4）  包内共享常量：即在当前包下单独的 constant 目录下。</p>\n<p> 5）  类内共享常量：直接在类内部 private static final 定义。</p>\n</li>\n<li><p>【推荐】如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。</p>\n<p> 正例：</p>\n<pre><code>public Enum  { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}\n</code></pre></li>\n</ol>\n<h3 id=\"三-格式规约\"><a href=\"#三-格式规约\" class=\"headerlink\" title=\"(三)  格式规约\"></a>(三)  格式规约</h3><ol>\n<li><p>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：</p>\n<pre><code>1）  左大括号前不换行。\n2）  左大括号后换行。\n3）  右大括号前换行。\n4）  右大括号后还有 else 等代码则不换行；表示终止右大括号后必须换行。\n</code></pre></li>\n<li><p>【强制】  左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空<br>格。详见第 5 条下方正例提示。</p>\n</li>\n<li><p>【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。</p>\n</li>\n<li><p>【强制】任何运算符左右必须加一个空格。</p>\n<p> 说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号、三目运算符等。</p>\n</li>\n<li><p>【强制】缩进采用 4 个空格，禁止使用 tab 字符。</p>\n<p> 说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>\n<p> 正例： （涉及 1-5 点）</p>\n<pre><code>public static void main(String[]  args) { \n    //  缩进 4 个空格   \n    String say = &quot;hello&quot;; \n    //  运算符的左右必须有一个空格 \n    int flag = 0; \n    //  关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格   \n    if (flag == 0) { \n        System.out.println(say); \n    } \n    //  左大括号前加空格且不换行；左大括号后换行 \n    if (flag == 1) { \n        System.out.println(&quot;world&quot;); \n        //  右大括号前换行，右大括号后有 else，不用换行   \n    } else { \n        System.out.println(&quot;ok&quot;); \n        //  在右大括号后直接结束，则必须换行   \n    } \n} \n</code></pre></li>\n<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<pre><code>1）  第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n2）  运算符与下文一起换行。\n3）  方法调用的点符号与下文一起换行。\n4）  在多个参数超长，逗号后进行换行。\n5）  在括号前不要换行，见反例。\n</code></pre><p> 正例：</p>\n<pre><code>StringBuffer sb = new StringBuffer(); \n//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行 \nsb.append(&quot;zi&quot;).append(&quot;xin&quot;)... \n.append(&quot;huang&quot;)... \n.append(&quot;huang&quot;)... \n.append(&quot;huang&quot;); \n</code></pre><p> 反例：</p>\n<pre><code>StringBuffer sb = new StringBuffer(); \n//超过 120 个字符的情况下，不要在括号前换行 \nsb.append(&quot;zi&quot;).append(&quot;xin&quot;)...append \n(&quot;huang&quot;); \n//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\nmethod(args1, args2, args3, ... \n, argsX); \n</code></pre></li>\n<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<p> 正例：下例中实参的”a”,后边必须要有一个空格。</p>\n<pre><code>method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); \n</code></pre></li>\n<li><p>【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。</p>\n</li>\n<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。</p>\n<p> 正例：</p>\n<pre><code>int a = 3; \nlong b = 4L; \nfloat c = 5F; \nStringBuffer sb = new StringBuffer(); \n</code></pre><p> 说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。 </p>\n</li>\n<li><p>【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</p>\n<p>说明：没有必要插入多行空格进行隔开。</p>\n</li>\n</ol>\n<h3 id=\"四-OOP-规约\"><a href=\"#四-OOP-规约\" class=\"headerlink\" title=\"(四)  OOP 规约\"></a>(四)  OOP 规约</h3><ol>\n<li><p>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</p>\n</li>\n<li><p>【强制】所有的覆写方法，必须加@Override 注解。</p>\n<p> 反例： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p>\n</li>\n<li><p>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</p>\n<p> 说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>\n<p> 正例：public User getUsers(String type, Integer… ids)</p>\n</li>\n<li><p>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n</li>\n<li><p>【强制】不能使用过时的类或方法。</p>\n<p> 说明：java.net.URLDecoder  中的方法 decode(String  encodeStr)  这个方法已经过时，应该使用双参数 decode(String  source,  String  encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n</li>\n<li><p>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</p>\n<p> 正例： “test”.equals(object);</p>\n<p> 反例： object.equals(“test”);</p>\n<p> 说明： 推荐使用 java.util.Objects#equals  （JDK7 引入的工具类）</p>\n</li>\n<li><p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</p>\n<p> 说明：对于 Integer var = ?在-128 至 127 之间的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p>\n</li>\n<li><p>关于基本数据类型与包装数据类型的使用标准如下：</p>\n<pre><code>1）  【强制】所有的 POJO 类属性必须使用包装数据类型。\n2）  【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n3）  【推荐】所有的局部变量使用基本数据类型。\n</code></pre><p> 说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</p>\n<p> 正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>\n<p> 反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p>\n</li>\n<li><p>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</p>\n<p> 反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n</li>\n<li><p>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p>\n<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>\n</li>\n<li><p>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p>\n</li>\n<li><p>【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source&gt;  generate  toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>\n<p>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>\n</li>\n<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>\n<p>说明：</p>\n<p>   String str = “a,b,c,,”;<br>   String[] ary = str.split(“,”);<br>   //预期大于 3，结果是 3<br>   System.out.println(ary.length); </p>\n</li>\n<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。</p>\n</li>\n<li><p>【推荐】  类内方法定义顺序依次是：公有方法或保护方法  &gt;  私有方法  &gt; getter/setter方法。</p>\n<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</p>\n</li>\n<li><p>【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名  =  参数名。在getter/setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。</p>\n<p>反例：</p>\n<p>   public Integer getData()  { </p>\n<pre><code>if (true)  { \n    return data + 100; \n}  else  {\n    return data  -  100;\n} \n</code></pre><p>   } </p>\n</li>\n<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>\n<p>反例：</p>\n<p>   String str = “start”;<br>   for  (int  I  =  0;  I  &lt;  100; i++)  { </p>\n<pre><code>str = str + &quot;hello&quot;; \n</code></pre><p>   } </p>\n<p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p>\n</li>\n<li><p>【推荐】下列情况，声明成 final 会更有提示性：</p>\n<p>   1）  不需要重新赋值的变量，包括类属性、局部变量。<br>   2）  对象参数前加 final，表示不允许修改引用的指向。<br>   3）  类方法确定不允许被重写。</p>\n</li>\n<li><p>【推荐】慎用 Object 的 clone 方法来拷贝对象。</p>\n<p>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p>\n</li>\n<li><p>【推荐】类成员与方法访问控制从严：</p>\n<p>   1）  如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。<br>   2）  工具类不允许有 public 或 default 构造方法。<br>   3）  类非 static 成员变量并且与子类共享，必须是 protected。<br>   4）  类非 static 成员变量并且仅在本类使用，必须是 private。<br>   5）  类 static 成员变量如果仅在本类使用，必须是 private。<br>   6）  若是 static 成员变量，必须考虑是否为 final。<br>   7）  类成员方法只供类内部调用，必须是 private。<br>   8）  类成员方法只对继承类公开，那么限制为 protected。</p>\n<p>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p>\n</li>\n</ol>\n<h3 id=\"五-集合处理\"><a href=\"#五-集合处理\" class=\"headerlink\" title=\"(五)  集合处理\"></a>(五)  集合处理</h3><ol>\n<li><p>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>\n<pre><code>1） 只要重写 equals，就必须重写 hashCode。\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的\n对象必须重写这两个方法。\n3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。\n</code></pre><p> 说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</p>\n</li>\n<li><p>【强制】   ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException</p>\n<p> 异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;</p>\n<p> 说明：subList  返回的是  ArrayList  的内部类  SubList，并不是  ArrayList  ，而是ArrayList  的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p>\n</li>\n<li><p>【强制】  在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException  异常。</p>\n</li>\n<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[]  array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>\n<p> 说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[  list.size()  ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</p>\n<p> 正例：</p>\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;(2); \nlist.add(&quot;guan&quot;); \nlist.add(&quot;bao&quot;); \nString[] array = new String[list.size()]; \narray = list.toArray(array); \n</code></pre><p> 反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>\n</li>\n<li><p>【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<p> 说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>\n<pre><code>String[] str = new String[] { &quot;a&quot;, &quot;b&quot; };\nList list = Arrays.asList(str); \n第一种情况：list.add(&quot;c&quot;);  运行时异常。\n第二种情况：str[0] = &quot;gujin&quot;;  那么 list.get(0)也会随之修改。\n</code></pre></li>\n<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。</p>\n<p> 说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：1）频繁往外读取内容的，适合用上界 Extends。2）经常往里插入的，适合用下界 Super。</p>\n</li>\n<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</p>\n<p> 反例：</p>\n<pre><code>List&lt;String&gt; a = new ArrayList&lt;String&gt;(); \na.add(&quot;1&quot;); \na.add(&quot;2&quot;); \nfor (String temp : a) { \n    if  (&quot;1&quot;.equals(temp))  { \n        a.remove(temp); \n    } \n} \n</code></pre><p> 说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n<p> 正例：</p>\n<pre><code>Iterator&lt;String&gt; it = a.iterator(); \nwhile  (it.hasNext())  { \n    String temp =  it.next(); \n    if  (删除元素的条件)  {   \n        it.remove(); \n    } \n} \n</code></pre></li>\n<li><p>【强制】  在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。</p>\n<p> 说明：</p>\n<pre><code>1）  x，y 的比较结果和 y，x 的比较结果相反。\n2）  x&gt;y，y&gt;z，则 x&gt;z。\n3）  x=y，则 x，z 比较结果和 y，z 比较结果相同。\n</code></pre><p> 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p>\n<pre><code>new Comparator&lt;Student&gt;() { \n    @Override \n    public int compare(Student o1, Student o2) { \n        return o1.getId() &gt; o2.getId() ? 1 :  -1; \n    } \n} \n</code></pre></li>\n<li><p>【推荐】集合初始化时，尽量指定集合初始值大小。</p>\n<p> 说明：ArrayList 尽量使用 ArrayList(int initialCapacity)  初始化。</p>\n</li>\n<li><p>【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</p>\n<p><font color=\"#AD8022\" size=\"4px\">说明：</font><br>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。</p>\n<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p>\n</li>\n<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>\n<p>|集合类              | Key        | Value        |  Super      |   说明    |<br>|:—————–:|:———-:|:————:|:———–:|:———:|<br>|ConcurrentHashMap  |不允许为 null|不允许为 null  | AbstractMap |  分段锁技术|<br>|TreeMap            |不允许为 null|允许为 null    | AbstractMap |  线程不安全|<br>|HashMap            |允许为 null  |允许为 null    | AbstractMap |  线程不安全|</p>\n</li>\n</ol>\n<pre><code>反例：  由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储null 值时会抛出 NPE 异常。\n</code></pre><ol start=\"12\">\n<li><p>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。</p>\n<p>说明： 有序性是指遍历的结果是按某种比较规则依次排列的。 稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是order/sort。</p>\n</li>\n<li><p>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。</p>\n</li>\n</ol>\n<h3 id=\"六-并发处理\"><a href=\"#六-并发处理\" class=\"headerlink\" title=\"(六)  并发处理\"></a>(六)  并发处理</h3><ol>\n<li><p>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p>\n<p> 说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n</li>\n<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<p> 正例：</p>\n<pre><code>public class TimerTaskThread extends Thread { \n    public TimerTaskThread()  { \n        super.setName(&quot;TimerTaskThread&quot;);    ... \n    }\n}   \n</code></pre></li>\n<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p> 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n</li>\n<li><p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p> 说明：Executors 返回的线程池对象的弊端如下：</p>\n<p> 1）FixedThreadPool 和 SingleThreadPool:</p>\n<p> 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>\n<p> 2）CachedThreadPool 和 ScheduledThreadPool:</p>\n<p> 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>\n</li>\n<li><p>【强制】SimpleDateFormat  是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>\n</li>\n</ol>\n<p>正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</p>\n<pre><code>    private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() { \n        @Override \n        protected DateFormat initialValue() { \n            return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); \n        } \n    }; \n\n说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 Simpledateformatter，官方给出的解释： simple  beautiful  strong immutable thread-safe。\n</code></pre><ol start=\"6\">\n<li><p>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>\n</li>\n<li><p>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</p>\n<p> 说明：线程一需要对表 A、B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>\n</li>\n<li><p>【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p>\n<p> 说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>\n</li>\n<li><p>【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。  </p>\n</li>\n<li><p>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 await 方法，直到超时才返回结果。</p>\n<p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p>\n</li>\n<li><p>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed  导致的性能下降。</p>\n<p>说明：Random 实例包括 java.util.Random  的实例或者  Math.random()实例。</p>\n<p>正例：在 JDK7 之后，可以直接使用 API  ThreadLocalRandom，在  JDK7 之前，可以做到每个线程一个实例。</p>\n</li>\n<li><p>【推荐】在并发场景下，通过双重检查锁（double-checked  locking）实现延迟初始化的优化问题隐患(可参考  The “Double-Checked Locking is Broken” Declaration)，推荐问题解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为  volatile 型。</p>\n<p>反例：</p>\n<p>   class Foo { </p>\n<pre><code>private Helper helper = null; \npublic Helper getHelper() { \n    if (helper == null)  synchronized(this) { \n        if (helper == null) \n            helper = new Helper(); \n    } \n    return helper; \n} \n// other functions and members... \n</code></pre><p>   } </p>\n</li>\n<li><p>【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</p>\n<p>如果是 count++操作，使用如下类实现：</p>\n<p>   AtomicInteger  count  =  new  AtomicInteger();  count.addAndGet(1);  </p>\n<p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>\n</li>\n<li><p>【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</p>\n</li>\n<li><p>【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量  ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p>\n</li>\n</ol>\n<h3 id=\"七-控制语句\"><a href=\"#七-控制语句\" class=\"headerlink\" title=\"(七)  控制语句\"></a>(七)  控制语句</h3><ol>\n<li><p>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</p>\n</li>\n<li><p>【强制】在 if/else/for/while/do 语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) tatements;</p>\n</li>\n<li><p>【推荐】推荐尽量少用 else，  if-else 的方式可以改写成：</p>\n<pre><code>if  (condition)  { \n...\nreturn obj; \n} \n//  接着写 else 的业务逻辑代码; \n</code></pre><p> 说明：如果非得使用 if()…else if()…else…方式表达逻辑，【强制】请勿超过 3 层，超过请使用状态设计模式。 </p>\n<p> 正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。</p>\n</li>\n<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<p> 说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>\n<p> 正例：</p>\n<pre><code>//伪代码如下\nboolean existed = (file.open(fileName, &quot;w&quot;) != null)  &amp;&amp;  (...) || (...);\nif (existed) {\n...\n} \n</code></pre><p> 反例：</p>\n<pre><code>if ((file.open(fileName, &quot;w&quot;) != null)  &amp;&amp;  (...) || (...)) {\n...\n}\n</code></pre></li>\n<li><p>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作 （这个 try-catch 是否可以移至循环体外） 。</p>\n</li>\n<li><p>【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。</p>\n</li>\n<li><p>【参考】方法中需要进行参数校验的场景：</p>\n<pre><code>1）  调用频次低的方法。\n2）  执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致\n中间执行回退，或者错误，那得不偿失。 \n3）  需要极高稳定性和可用性的方法。\n4）  对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n5）  敏感权限入口。\n</code></pre></li>\n<li><p>【参考】方法中不需要参数校验的场景：</p>\n<pre><code>1）  极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参数检查要求。\n2）  底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n3）  被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n</code></pre></li>\n</ol>\n<h3 id=\"八-注释规约\"><a href=\"#八-注释规约\" class=\"headerlink\" title=\"(八)  注释规约\"></a>(八)  注释规约</h3><ol>\n<li><p>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用//xxx 方式。</p>\n<p> 说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n</li>\n<li><p>【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>\n<p> 说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>\n</li>\n<li><p>【强制】所有的类都必须添加创建者信息。</p>\n</li>\n<li><p>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</p>\n</li>\n<li><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n</li>\n<li><p>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p>\n<p> 反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>\n</li>\n<li><p>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p>\n<p> 说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。 </p>\n</li>\n<li><p>【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。</p>\n<p> 说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p>\n</li>\n<li><p>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p>\n</li>\n<li><p>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</p>\n<p>反例：<br>   // put elephant into fridge<br>   put(elephant, fridge);<br>   方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>\n</li>\n<li><p>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p>\n<p>1）  待办事宜（TODO）:（  标记人，标记时间，[预计处理时间]）</p>\n<p>   表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （因为它是一个 Javadoc 标签） 。</p>\n<p>2）  错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）</p>\n<p>   在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>\n<h3 id=\"九-其它\"><a href=\"#九-其它\" class=\"headerlink\" title=\"(九)  其它\"></a>(九)  其它</h3></li>\n<li><p>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</p>\n<p> 说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则);</p>\n</li>\n<li><p>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()方法。</p>\n<p> 说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p>\n</li>\n<li><p>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。</p>\n<p> 说明：如果 var=null 或者不存在，那么${var}会直接显示在页面上。</p>\n</li>\n<li><p>【强制】注意  Math.random()  这个方法返回是 double 类型，注意取值的范围  0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。 </p>\n</li>\n<li><p>【强制】获取当前毫秒数 System.currentTimeMillis();  而不是 new Date().getTime();</p>\n<p> 说明：如果想获取更加精确的纳秒级时间值，用 System.nanoTime()。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p>\n</li>\n<li><p>【推荐】尽量不要在 velocity 模板中加入变量声明、逻辑运算符，更不要在模板中加入任何复杂的逻辑。</p>\n</li>\n<li><p>【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p>\n</li>\n<li><p>【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。   </p>\n</li>\n</ol>\n<h2 id=\"二、异常日志\"><a href=\"#二、异常日志\" class=\"headerlink\" title=\"二、异常日志\"></a>二、异常日志</h2><h3 id=\"一-异常处理\"><a href=\"#一-异常处理\" class=\"headerlink\" title=\"(一)  异常处理\"></a>(一)  异常处理</h3><ol>\n<li><p>【强制】Java  类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch  来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。</p>\n<p> 说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。</p>\n<p> 正例：if (obj != null) {…}</p>\n<p> 反例：try { obj.method() } catch (NullPointerException e) {…}</p>\n</li>\n<li><p>【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</p>\n</li>\n<li><p>【强制】对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p>\n</li>\n<li><p>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p>\n</li>\n<li><p>【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p>\n</li>\n<li><p>【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。</p>\n</li>\n<li><p>【强制】不能在 finally 块中使用 return， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p>\n</li>\n<li><p>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>\n</li>\n<li><p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。</p>\n<p> 说明： 本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况。</p>\n</li>\n<li><p>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>\n<p>1) 返回类型为包装数据类型，有可能是 null，返回 int 值时注意判空。</p>\n<p>   反例：public int f() { return Integer 对象};  </p>\n<pre><code>如果为 null，自动解箱抛 NPE。\n</code></pre><p> 2) 数据库的查询结果可能为 null。</p>\n<p> 3) 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p>\n<p>4）  远程调用返回对象，一律要求进行 NPE 判断。</p>\n<p>5）  对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</p>\n<p> 6）  级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>\n<p>   正例：可以使用 JDK8 的 Optional 类来防止 NPE 问题。</p>\n</li>\n<li><p>【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess、“错误码”、“错误简短信息”。</p>\n<p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>\n<p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>\n</li>\n<li><p>【推荐】定义时区分 unchecked  /  checked  异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</p>\n</li>\n<li><p>【参考】避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。</p>\n<p>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br>   private boolean checkParam(DTO dto)  {…} </p>\n<h3 id=\"二-日志规约\"><a href=\"#二-日志规约\" class=\"headerlink\" title=\"(二)  日志规约\"></a>(二)  日志规约</h3></li>\n<li><p>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>\n<pre><code>import org.slf4j.Logger; \nimport org.slf4j.LoggerFactory;\nprivate static final Logger logger = LoggerFactory.getLogger(Abc.class); \n</code></pre></li>\n<li><p>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p>\n</li>\n<li><p>【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：</p>\n<p> appName_logType_logName.log。<br> logType:日志类型，推荐分类有stats/desc/monitor/visit 等；<br> logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p>\n<p> 正例：mppserver 应用中单独监控时区转换异常，如：     </p>\n<pre><code>mppserver_monitor_timeZoneConvert.log\n</code></pre><p> 说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p>\n</li>\n<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>\n<p> 说明：logger.debug(“Processing  trade  with  id: “ +  id  + “  symbol: “ +  symbol);<br> 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</p>\n<p> 正例：（条件）</p>\n<pre><code>if (logger.isDebugEnabled()) { \n    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol); \n} \n</code></pre><p> 正例：（占位符）</p>\n<pre><code>logger.debug(&quot;Processing trade with id: {} symbol : {} &quot;, id, symbol); \n</code></pre></li>\n<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>\n<p> 正例：<logger name=\"com.taobao.dubbo.config\" additivity=\"false\"> </logger></p>\n</li>\n<li><p>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</p>\n<p> 正例：logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</p>\n</li>\n<li><p>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</p>\n<p> 说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p>\n</li>\n<li><p>【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</p>\n</li>\n</ol>\n<h2 id=\"三、MySQL-规约\"><a href=\"#三、MySQL-规约\" class=\"headerlink\" title=\"三、MySQL 规约\"></a>三、MySQL 规约</h2><h3 id=\"一-建表规约\"><a href=\"#一-建表规约\" class=\"headerlink\" title=\"(一)  建表规约\"></a>(一)  建表规约</h3><ol>\n<li><p>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned  tinyint（  1 表示是，0 表示否）。</p>\n<p> 说明：任何字段如果为非负数，必须是 unsigned。</p>\n</li>\n<li><p>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>\n<p> 正例：getter_admin，task_config，level3_name</p>\n<p> 反例：GetterAdmin，taskConfig，level_3_name</p>\n</li>\n<li><p>【强制】表名不使用复数名词。</p>\n<p> 说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>\n</li>\n<li><p>【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p>\n</li>\n<li><p>【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p>\n<p> 说明：pk_  即 primary key；uk_  即  unique key；idx_  即 index 的简称。</p>\n</li>\n<li><p>【强制】小数类型为 decimal，禁止使用 float 和 double。</p>\n<p> 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>\n</li>\n<li><p>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>\n</li>\n<li><p>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p>\n</li>\n<li><p>【强制】表必备三字段：id, gmt_create, gmt_modified。</p>\n<p> 说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 date_time 类型。</p>\n</li>\n<li><p>【推荐】表的命名最好是加上“业务名称_表的作用”。</p>\n<p>正例：tiger_task / tiger_reader / mpp_config</p>\n</li>\n<li><p>【推荐】库名与应用名称尽量一致。</p>\n</li>\n<li><p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。 </p>\n</li>\n<li><p>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：</p>\n<p>1）不是频繁修改的字段。</p>\n<p>2）不是 varchar 超长字段，更不能是 text 字段。</p>\n<p>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p>\n</li>\n<li><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p>\n<p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>\n</li>\n<li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p>\n<p>正例：无符号值可以避免误存负数，且扩大了表示范围。</p>\n<p>|对象    |年龄区间   |类型               |表示范围                     |<br>|:—–:|:———:|:—————-:|:————————–:|<br>|人      |150 岁之内 | unsigned tinyint | 无符号值：0 到 255           |<br>|龟      |数百岁     |unsigned smallint |无符号值：0 到 65535          |<br>|恐龙化石 |  数千万年 |  unsigned int    |无符号值：0 到约 42.9 亿      |<br>|太阳    |约 50 亿年 |  unsigned bigint |无符号值：0 到约 10 的 19 次方 |</p>\n</li>\n</ol>\n<h3 id=\"二-索引规约\"><a href=\"#二-索引规约\" class=\"headerlink\" title=\"(二)  索引规约\"></a>(二)  索引规约</h3><ol>\n<li><p>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</p>\n<p> 说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p>\n</li>\n<li><p>【强制】  超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p>\n<p> 说明：即使双表 join 也要注意表索引、SQL 性能。</p>\n</li>\n<li><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。</p>\n<p> 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct  left(列名,  索引长度))/count(*)的区分度来确定。</p>\n</li>\n<li><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p>\n<p> 说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>\n</li>\n<li><p>【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by  最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</p>\n<p> 正例：where a=? and b=? order by c;  索引：a_b_c</p>\n<p> 反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b;  索引a_b 无法排序。</p>\n</li>\n<li><p>【推荐】利用覆盖索引来进行查询操作，避免回表。</p>\n<p> 说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p>\n<p> 正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</p>\n</li>\n<li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。</p>\n<p> 说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p>\n<p> 正例：先快速定位需要获取的 id 段，然后再关联：</p>\n<pre><code>SELECT a.* FROM  表 1 a, (select id from  表 1 where  条件  LIMIT 100000,20 )  b where a.id=b.id \n</code></pre></li>\n<li><p>【推荐】   SQL 性能优化的目标：至少要达到  range  级别， 要求是 ref 级别， 如果可以是 consts最好。</p>\n<p> 说明：</p>\n<pre><code>1） consts  单表中最多只有一个匹配行 （主键或者唯一索引） ，在优化阶段即可读取到数据。\n2）ref  指的是使用普通的索引（normal index）。\n3）range  对索引进行范围检索。\n</code></pre><p> 反例：explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p>\n</li>\n<li><p>【推荐】建组合索引的时候，区分度最高的在最左边。</p>\n<p> 正例：如果 where  a=?  and  b=?  ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p>\n<p> 说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where  a&gt;? and b=?  那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p>\n</li>\n<li><p>【参考】创建索引时避免有如下极端误解：</p>\n<p>   1）误认为一个查询就需要建一个索引。<br>   2）误认为索引会消耗空间、严重拖慢更新和新增速度。<br>   3）误认为唯一索引一律需要在应用层通过“先查后插”方式解决。</p>\n</li>\n</ol>\n<h3 id=\"三-SQL-规约\"><a href=\"#三-SQL-规约\" class=\"headerlink\" title=\"(三)  SQL 规约\"></a>(三)  SQL 规约</h3><ol>\n<li><p>【强制】不要使用 count(列名)或 count(常量)来替代 count(<em>)， count(</em>)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p>\n<p> 说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p>\n</li>\n<li><p>【强制】count(distinct  col)  计算该列除 NULL 之外的不重复行数，注意  count(distinctcol1, col2)  如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p>\n</li>\n<li><p>【强制】 当某一列的值全是 NULL 时， count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。</p>\n<p> 正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g))FROM table;</p>\n</li>\n<li><p>【强制】使用 ISNULL()来判断是否为 NULL 值。注意：NULL 与任何值的直接比较都为 NULL。</p>\n<p> 说明：</p>\n<pre><code>1） NULL&lt;&gt;NULL 的返回结果是 NULL，而不是 false。\n2） NULL=NULL 的返回结果是 NULL，而不是 true。\n3） NULL&lt;&gt;1 的返回结果是 NULL，而不是 true。\n</code></pre></li>\n<li><p>【强制】   在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p>\n</li>\n<li><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p>\n<p> 说明： （概念解释） 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。</p>\n<p> 如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。</p>\n<p> 外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>\n</li>\n<li><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>\n</li>\n<li><p>【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执行更新语句。</p>\n</li>\n<li><p>【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p>\n</li>\n<li><p>【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，那么字符计数方法</p>\n<p>注意：</p>\n<p>说明：</p>\n<p>   SELECT LENGTH(“轻松工作”)；  返回为 12<br>   SELECT CHARACTER_LENGTH(“轻松工作”)；  返回为 4</p>\n<p>如果要使用表情，那么使用 utfmb4 来进行存储，注意它与 utf-8 编码的区别。 </p>\n</li>\n<li><p>【参考】   TRUNCATE  TABLE  比  DELETE  速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p>\n<p>说明：TRUNCATE TABLE  在功能上与不带  WHERE  子句的  DELETE  语句相同。</p>\n</li>\n</ol>\n<h3 id=\"四-ORM-规约\"><a href=\"#四-ORM-规约\" class=\"headerlink\" title=\"(四)  ORM 规约\"></a>(四)  ORM 规约</h3><ol>\n<li><p>【强制】在表查询中，一律不要使用  *  作为查询的字段列表，需要哪些字段必须明确写明。</p>\n<p> 说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。</p>\n</li>\n<li><p>【强制】POJO 类的 Boolean 属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</p>\n</li>\n</ol>\n<p>说明：参见定义 POJO 类以及数据库字段定义规定，在<resultmap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行适当的修改。</resultmap></p>\n<ol start=\"3\">\n<li>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。</li>\n</ol>\n<p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p>\n<ol start=\"4\">\n<li><p>【强制】xml 配置中参数注意：#{}，#param#  不要使用${}  此种方式容易出现 SQL 注入。</p>\n</li>\n<li><p>【强制】iBATIS 自带的 queryForList(String statementName,int start,int  size)不推荐使用。</p>\n<p> 说明： 其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList取 start,size 的子集合，线上因为这个原因曾经出现    过 OOM。</p>\n<p> 正例：在 sqlmap.xml 中引入  #start#, #size#</p>\n<pre><code>Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); \nmap.put(&quot;start&quot;, start); \nmap.put(&quot;size&quot;, size); \n</code></pre></li>\n<li><p>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p>\n</li>\n<li><p>【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</p>\n</li>\n<li><p>【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p>\n</li>\n<li><p>【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p>\n</li>\n<li><p>【参考】 <isequal>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<isnotempty>表示不为空且不为 null 时执行；<isnotnull>表示不为 null 值时执行。     </isnotnull></isnotempty></isequal></p>\n</li>\n</ol>\n<h2 id=\"四、工程规约\"><a href=\"#四、工程规约\" class=\"headerlink\" title=\"四、工程规约\"></a>四、工程规约</h2><h3 id=\"一-应用分层\"><a href=\"#一-应用分层\" class=\"headerlink\" title=\"(一)  应用分层\"></a>(一)  应用分层</h3><ol>\n<li><p>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，</p>\n<p> 如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：<br> <img src=\"http://7xj99v.com1.z0.glb.clouddn.com/ali.png\" alt=\"ali\"></p>\n<ul>\n<li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li>\n<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP渲染，移动端展示等。</li>\n<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>\n<li>Service 层：相对具体的业务逻辑服务层。</li>\n<li>Manager 层：通用业务处理层，它有如下特征：<ol>\n<li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li>\n<li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li>\n<li>与 DAO 层交互，对多个 DAO 的组合复用。</li>\n</ol>\n</li>\n<li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。</li>\n<li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>\n</ul>\n</li>\n<li><p>【参考】  （分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO<br>层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常,因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p>\n</li>\n<li><p>【参考】分层领域模型规约：</p>\n<ul>\n<li>DO（Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>\n<li>DTO（Data Transfer Object）：数据传输对象，Service 和 Manager 向外传输的对象。</li>\n<li>BO（Business Object）：业务对象。可以由 Service 层输出的封装业务逻辑的对象。</li>\n<li>QUERY：数据查询对象，各层接收上层的查询请求。注：超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li>\n<li>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二-二方库规约\"><a href=\"#二-二方库规约\" class=\"headerlink\" title=\"(二)  二方库规约\"></a>(二)  二方库规约</h3><ol>\n<li><p>【强制】定义 GAV 遵从以下规则：</p>\n<p> 1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。</p>\n<pre><code>说明： {公司/BU}  例如： alibaba/taobao/tmall/aliexpress 等 BU 一级； 子业务线可选。\n正例：com.taobao.jstorm  或 com.alibaba.dubbo.register\n</code></pre><p> 2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。</p>\n<pre><code>正例：dubbo-client / fastjson-api / jstorm-tool\n</code></pre><p> 3） Version：详细规定参考下方。</p>\n</li>\n<li><p>【强制】二方库版本号命名方式：主版本号.次版本号.修订号</p>\n<ol>\n<li>主版本号：当做了不兼容的 API  修改，或者增加了能改变产品方向的新功能。</li>\n<li>次版本号：当做了向下兼容的功能性新增（新增类、接口等）。</li>\n<li><p>修订号：修复 bug，没有修改方法签名的功能加强，保持  API  兼容性。</p>\n<p> 说明：起始版本号必须为：1.0.0，而不是 0.0.1</p>\n</li>\n</ol>\n</li>\n<li><p>【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，版本号不允许覆盖升级。</p>\n<blockquote>\n<p>说明： 不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。<br>当前版本：1.3.3，那么下一个合理的版本号：1.3.4  或  1.4.0  或  2.0.0 </p>\n</blockquote>\n</li>\n<li><p>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证， 建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。</excludes></p>\n</li>\n<li><p>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。 </p>\n</li>\n<li><p>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p>\n<blockquote>\n<p>说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p>\n</blockquote>\n</li>\n<li><p>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。</p>\n<blockquote>\n<p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。</p>\n</blockquote>\n</li>\n<li><p>【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencymanagement>语句块中。</dependencymanagement></dependencies></p>\n<blockquote>\n<p>说明：<dependencymanagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。</dependencies></dependencies></dependencymanagement></p>\n</blockquote>\n</li>\n<li><p>【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。</p>\n</li>\n<li><p>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p>\n<ol>\n<li>精简可控原则。移除一切不必要的 API 和依赖，只包含  Service  API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。</li>\n<li>稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三-服务器规约\"><a href=\"#三-服务器规约\" class=\"headerlink\" title=\"(三)  服务器规约\"></a>(三)  服务器规约</h3><ol>\n<li><p>【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。</p>\n<blockquote>\n<p>说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p>\n</blockquote>\n<p> 正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30</p>\n</li>\n<li><p>【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。</p>\n<blockquote>\n<p>说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open  too  many  files”错误，导致新的连接无法建立。   建议将 linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。</p>\n</blockquote>\n</li>\n<li><p>【推荐】给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。</p>\n<blockquote>\n<p>说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。</p>\n</blockquote>\n</li>\n<li><p>【参考】服务器内部重定向使用 forward；外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。   </p>\n</li>\n</ol>\n<h2 id=\"五、安全规约\"><a href=\"#五、安全规约\" class=\"headerlink\" title=\"五、安全规约\"></a>五、安全规约</h2><ol>\n<li><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</p>\n<blockquote>\n<p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p>\n</blockquote>\n</li>\n<li><p>【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。</p>\n<blockquote>\n<p>说明：查看个人手机号码会显示成:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。</p>\n</blockquote>\n</li>\n<li><p>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</p>\n</li>\n<li><p>【强制】用户请求传入的任何参数必须做有效性验证。</p>\n<blockquote>\n<p>说明：忽略参数校验可能导致：</p>\n</blockquote>\n<ul>\n<li>page size 过大导致内存溢出</li>\n<li>恶意 order by 导致数据库慢查询</li>\n<li>任意重定向</li>\n<li>SQL 注入</li>\n<li>反序列化注入</li>\n<li><p>正则输入源串拒绝服务 ReDoS</p>\n<blockquote>\n<p>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p>\n</li>\n<li><p>【强制】表单、AJAX 提交必须执行 CSRF 安全过滤。</p>\n<blockquote>\n<p>说明：CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。</p>\n</blockquote>\n</li>\n<li><p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。</p>\n<blockquote>\n<p>说明： 如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p>\n</blockquote>\n</li>\n<li><p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p>\n</li>\n</ol>\n<p>附 1：版本历史</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本号</th>\n<th style=\"text-align:center\">更新日期</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1.0.0</td>\n<td style=\"text-align:center\">2017.2.9</td>\n<td style=\"text-align:left\">阿里巴巴正式对外发布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.0.1</td>\n<td style=\"text-align:center\">2017.2.13</td>\n<td style=\"text-align:left\">1）修正 String[]的前后矛盾。2）vm 修正成 velocity。3）修正 countdown 描述错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.0.2</td>\n<td style=\"text-align:center\">2017.2.20</td>\n<td style=\"text-align:left\">1）去除文底水印。2）数据类型中引用太阳系年龄问题。3）修正关于异常和方法签名的部分描述。4）修正 final 描述。5）去除 Comparator 部分描述。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.1.0</td>\n<td style=\"text-align:center\">2017.2.27</td>\n<td style=\"text-align:left\">1）增加前言。2）增加&lt;? extends T&gt;描述和说明。3）增加版本历史。4）增加专有名词解释。</td>\n</tr>\n</tbody>\n</table>\n<p>附 2：本规约专有名词</p>\n<ol>\n<li><strong>POJO</strong>（Plain Ordinary Java Object）：在本规约中，POJO 专指只有setter/getter/toString 的简单类，包括 DO/DTO/BO/VO 等。</li>\n<li><strong>DO</strong>（Data Object）：本手册指数据库表一一对应的 POJO 类。</li>\n<li><strong>GAV</strong>（GroupId、ArtifactctId、Version）：Maven 坐标，是用来唯一标识 jar 包。</li>\n<li><strong>OOP</strong>（Object Oriented Programming）:  本手册泛指类、对象的编程处理方式。</li>\n<li><strong>ORM</strong>（Object Relation Mapping）:  对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。</li>\n<li><strong>NPE</strong>（java.lang.NullPointerException）:  空指针异常。</li>\n<li><strong>一方库</strong>：本工程内部子项目模块依赖的库（jar 包）。</li>\n<li><strong>二方库</strong>：公司内部发布到中央仓库，可供公司内部依赖的库（jar 包）。</li>\n<li><strong>三方库</strong>：公司之外的开源的依赖库（jar 包）。</li>\n</ol>\n<p>附 3：法律声明</p>\n<p>本手册为阿里巴巴集团技术部的技术分享，版权归阿里巴巴集团所有，仅供大家交流、学习及研究使用，禁止用于商业用途，违者必究</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjimjn8gs0001vqqj9krjoxab","category_id":"cjimjn8h10004vqqjup24fu9e","_id":"cjimjn8hf000evqqjo3wrlqb4"},{"post_id":"cjimjn8gy0003vqqjj2v5fbep","category_id":"cjimjn8hb000avqqjy01jlte3","_id":"cjimjn8hj000jvqqjvqr7xzb6"},{"post_id":"cjimjn8h50007vqqj5recliu8","category_id":"cjimjn8hf000fvqqjjj5mta0k","_id":"cjimjn8ho000qvqqj5m9u74jr"},{"post_id":"cjimjn8h80008vqqjthxljeb6","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8hv000xvqqjudwa3d22"},{"post_id":"cjimjn8ha0009vqqj0jp9bg0h","category_id":"cjimjn8hf000fvqqjjj5mta0k","_id":"cjimjn8hy0012vqqjxbiyjupu"},{"post_id":"cjimjn8hc000cvqqjl06nsjwt","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8i30017vqqjru9ramdi"},{"post_id":"cjimjn8he000dvqqjgxfiysga","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8i8001cvqqjqodhiwqu"},{"post_id":"cjimjn8i6001avqqjqme5yzzn","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8ic001kvqqjsp4bp43p"},{"post_id":"cjimjn8hg000hvqqj1le1cxsf","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8ie001ovqqjrciewbrq"},{"post_id":"cjimjn8i8001dvqqjgjh1vtkj","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8ig001rvqqjzujylb9i"},{"post_id":"cjimjn8ia001hvqqjbcyzprnx","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8ih001uvqqjvx5wrp94"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","category_id":"cjimjn8i9001evqqjx1de7l0n","_id":"cjimjn8ij001xvqqj7n96e38z"},{"post_id":"cjimjn8ib001jvqqj4v67lbi6","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8il0021vqqj2x4jb64x"},{"post_id":"cjimjn8id001nvqqj10m1dcrr","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8in0025vqqjqrleycg9"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","category_id":"cjimjn8id001lvqqjka7tczg2","_id":"cjimjn8ip0028vqqjkz8x9sph"},{"post_id":"cjimjn8if001qvqqjwnejc82w","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8ir002cvqqjskr6med3"},{"post_id":"cjimjn8ih001tvqqjlrydtrus","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8it002fvqqjkaydsrdn"},{"post_id":"cjimjn8hm000ovqqjs2iw3bc5","category_id":"cjimjn8ig001svqqj9ir6beg7","_id":"cjimjn8iv002kvqqj8nna71pe"},{"post_id":"cjimjn8ik0020vqqjopbwm9yk","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8iw002mvqqjxv4f1hwp"},{"post_id":"cjimjn8ho000tvqqjlj0t0w54","category_id":"cjimjn8ik001zvqqjnk68bmbs","_id":"cjimjn8ix002ovqqj933g637f"},{"post_id":"cjimjn8ht000vvqqj0bs11xuh","category_id":"cjimjn8ip0029vqqjy95er9ca","_id":"cjimjn8iz002rvqqjhymw1e7r"},{"post_id":"cjimjn8hv000yvqqj0xxcqhsr","category_id":"cjimjn8it002gvqqj36yrg04o","_id":"cjimjn8iz002uvqqjp6wlxss4"},{"post_id":"cjimjn8hx0010vqqj0op6gkls","category_id":"cjimjn8ix002nvqqj0qw5kmox","_id":"cjimjn8j0002wvqqj7m4b2hga"},{"post_id":"cjimjn8hz0013vqqj4y4lbhvn","category_id":"cjimjn8iz002svqqj8mquy8kd","_id":"cjimjn8j30031vqqjuti57jnd"},{"post_id":"cjimjn8i00015vqqj731d6xbo","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8j50035vqqjv08efw32"},{"post_id":"cjimjn8i30018vqqjlp55nfye","category_id":"cjimjn8i20016vqqjl3ihtqms","_id":"cjimjn8j60037vqqjfr53dhfz"},{"post_id":"cjimjn8ii001wvqqja7ujjdyc","category_id":"cjimjn8j50034vqqj2hmyeazq","_id":"cjimjn8j7003avqqj9tervtq7"},{"post_id":"cjimjn8im0024vqqjnqiw7mdt","category_id":"cjimjn8j60038vqqjrgby7sao","_id":"cjimjn8j8003fvqqj4wnv0t00"},{"post_id":"cjimjn8io0027vqqjc3p1jj1h","category_id":"cjimjn8j60038vqqjrgby7sao","_id":"cjimjn8j9003jvqqj9v3k08ew"},{"post_id":"cjimjn8iq002bvqqj1nfdw3p7","category_id":"cjimjn8j8003evqqjb66lcdfr","_id":"cjimjn8jb003ovqqj7iomd8xu"},{"post_id":"cjimjn8is002evqqj4xmsg75n","category_id":"cjimjn8j9003kvqqj8to56m3l","_id":"cjimjn8jc003svqqjrh49j09g"},{"post_id":"cjimjn8iu002jvqqjzdjea30j","category_id":"cjimjn8jb003pvqqjrv4sctkd","_id":"cjimjn8jd003vvqqjqza636g0"},{"post_id":"cjimjn8iw002lvqqj4ldc3aic","category_id":"cjimjn8jc003tvqqjdcmbacmj","_id":"cjimjn8je003xvqqjqtxcvmsi"},{"post_id":"cjimjn8lb0077vqqj60icfog5","category_id":"cjimjn8hj000kvqqjb8qgs128","_id":"cjimjn8le0079vqqjzlopflem"}],"PostTag":[{"post_id":"cjimjn8gs0001vqqj9krjoxab","tag_id":"cjimjn8h30005vqqj0mscrf4n","_id":"cjimjn8hl000nvqqjkpvj3gj3"},{"post_id":"cjimjn8gs0001vqqj9krjoxab","tag_id":"cjimjn8hb000bvqqjyv56mdbk","_id":"cjimjn8hn000pvqqj2qjjo4bw"},{"post_id":"cjimjn8gs0001vqqj9krjoxab","tag_id":"cjimjn8hf000gvqqj4ouc2ifv","_id":"cjimjn8hs000uvqqjg6m1aufy"},{"post_id":"cjimjn8gy0003vqqjj2v5fbep","tag_id":"cjimjn8hk000lvqqjz8lv8qzz","_id":"cjimjn8i7001bvqqjvfh9248p"},{"post_id":"cjimjn8gy0003vqqjj2v5fbep","tag_id":"cjimjn8ho000svqqjogorgqw4","_id":"cjimjn8i9001fvqqjpajkn6t6"},{"post_id":"cjimjn8gy0003vqqjj2v5fbep","tag_id":"cjimjn8hw000zvqqj2a5eryoz","_id":"cjimjn8ib001ivqqjn9yjju6x"},{"post_id":"cjimjn8gy0003vqqjj2v5fbep","tag_id":"cjimjn8i00014vqqjqkizhxc8","_id":"cjimjn8id001mvqqj4i5bb9oh"},{"post_id":"cjimjn8h50007vqqj5recliu8","tag_id":"cjimjn8i50019vqqjm5jpbuix","_id":"cjimjn8ij001yvqqjv1q5wuac"},{"post_id":"cjimjn8h50007vqqj5recliu8","tag_id":"cjimjn8i9001gvqqj0ls1m5dn","_id":"cjimjn8il0022vqqjggum6tli"},{"post_id":"cjimjn8h50007vqqj5recliu8","tag_id":"cjimjn8ie001pvqqjhw48ampc","_id":"cjimjn8in0026vqqj622mfbej"},{"post_id":"cjimjn8h80008vqqjthxljeb6","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8ir002dvqqjw4qbhnnn"},{"post_id":"cjimjn8h80008vqqjthxljeb6","tag_id":"cjimjn8im0023vqqjtln7rwre","_id":"cjimjn8iu002hvqqjw0rnyvjm"},{"post_id":"cjimjn8ha0009vqqj0jp9bg0h","tag_id":"cjimjn8i9001gvqqj0ls1m5dn","_id":"cjimjn8iz002qvqqju7nn1sr7"},{"post_id":"cjimjn8ha0009vqqj0jp9bg0h","tag_id":"cjimjn8iu002ivqqj6qc5ncbu","_id":"cjimjn8iz002tvqqjgqpqz9z1"},{"post_id":"cjimjn8hc000cvqqjl06nsjwt","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8j2002zvqqjcm3g25iw"},{"post_id":"cjimjn8hc000cvqqjl06nsjwt","tag_id":"cjimjn8iz002vvqqj9y31n2xy","_id":"cjimjn8j30032vqqjpqwa6dtu"},{"post_id":"cjimjn8he000dvqqjgxfiysga","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8j8003dvqqjwreph4pi"},{"post_id":"cjimjn8he000dvqqjgxfiysga","tag_id":"cjimjn8j40033vqqjtigin83e","_id":"cjimjn8j9003gvqqj0lkyd021"},{"post_id":"cjimjn8he000dvqqjgxfiysga","tag_id":"cjimjn8j50036vqqj4ue66w83","_id":"cjimjn8j9003ivqqjv1vr5m48"},{"post_id":"cjimjn8he000dvqqjgxfiysga","tag_id":"cjimjn8j60039vqqjnadnio13","_id":"cjimjn8j9003lvqqjeudf1i6g"},{"post_id":"cjimjn8hg000hvqqj1le1cxsf","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8ja003nvqqj2v716rog"},{"post_id":"cjimjn8hg000hvqqj1le1cxsf","tag_id":"cjimjn8j9003hvqqj8dugg0py","_id":"cjimjn8jb003qvqqj0t6o07tq"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","tag_id":"cjimjn8ja003mvqqjxnmlgghb","_id":"cjimjn8jf0040vqqj88ywdu6q"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","tag_id":"cjimjn8jb003rvqqj1kt4sl05","_id":"cjimjn8jg0041vqqjdwd64flx"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","tag_id":"cjimjn8jc003uvqqjh5k89dxn","_id":"cjimjn8jg0043vqqjzdfn0ubn"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","tag_id":"cjimjn8jd003wvqqjsb7tf7sr","_id":"cjimjn8jh0044vqqj0dezfbt9"},{"post_id":"cjimjn8hi000ivqqjsz7ggrih","tag_id":"cjimjn8je003yvqqjkfjvlrd3","_id":"cjimjn8jh0046vqqj1cv2f3zd"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","tag_id":"cjimjn8jf003zvqqjsrrmf8h5","_id":"cjimjn8jq004avqqj8p7p6dbi"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","tag_id":"cjimjn8jg0042vqqj3s524pdb","_id":"cjimjn8jq004bvqqjijch72du"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","tag_id":"cjimjn8jh0045vqqjt5mhjan0","_id":"cjimjn8jr004dvqqj97c91m12"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","tag_id":"cjimjn8jn0047vqqjc02c45g9","_id":"cjimjn8jr004evqqjmh1qp8vx"},{"post_id":"cjimjn8hk000mvqqjoouxbcqi","tag_id":"cjimjn8jp0048vqqjdidve11w","_id":"cjimjn8jr004gvqqjh7h5vqxl"},{"post_id":"cjimjn8hm000ovqqjs2iw3bc5","tag_id":"cjimjn8jq0049vqqjqt9wuj0x","_id":"cjimjn8js004hvqqjxfkzv2cc"},{"post_id":"cjimjn8ho000tvqqjlj0t0w54","tag_id":"cjimjn8jr004cvqqjlj3t3h31","_id":"cjimjn8jt004jvqqj9nzgqw5y"},{"post_id":"cjimjn8ho000tvqqjlj0t0w54","tag_id":"cjimjn8jr004fvqqjkhyxe8dc","_id":"cjimjn8jt004kvqqj32uc1law"},{"post_id":"cjimjn8ht000vvqqj0bs11xuh","tag_id":"cjimjn8js004ivqqjh57tri6f","_id":"cjimjn8ju004nvqqjgjqfsyyn"},{"post_id":"cjimjn8ht000vvqqj0bs11xuh","tag_id":"cjimjn8jt004lvqqj9gfl11j0","_id":"cjimjn8jv004ovqqjrnsdpx9r"},{"post_id":"cjimjn8hv000yvqqj0xxcqhsr","tag_id":"cjimjn8jf003zvqqjsrrmf8h5","_id":"cjimjn8jx004svqqjjzmt7nhw"},{"post_id":"cjimjn8hv000yvqqj0xxcqhsr","tag_id":"cjimjn8jv004pvqqjcwrvgx0j","_id":"cjimjn8jy004tvqqjukkkcjqe"},{"post_id":"cjimjn8hv000yvqqj0xxcqhsr","tag_id":"cjimjn8jw004qvqqjtqs2rk8l","_id":"cjimjn8jy004vvqqjaql7s54b"},{"post_id":"cjimjn8hx0010vqqj0op6gkls","tag_id":"cjimjn8jx004rvqqjjoyerz9u","_id":"cjimjn8k1004xvqqjsmjqajtx"},{"post_id":"cjimjn8hx0010vqqj0op6gkls","tag_id":"cjimjn8jy004uvqqjvfqp3pmf","_id":"cjimjn8k1004yvqqjsukte5vg"},{"post_id":"cjimjn8hz0013vqqj4y4lbhvn","tag_id":"cjimjn8k0004wvqqjb0a435j6","_id":"cjimjn8k40051vqqjgdgakmjd"},{"post_id":"cjimjn8hz0013vqqj4y4lbhvn","tag_id":"cjimjn8k1004zvqqju1abcs15","_id":"cjimjn8k40052vqqjvpa4zcb8"},{"post_id":"cjimjn8i00015vqqj731d6xbo","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8k70056vqqjjrmd0tru"},{"post_id":"cjimjn8i00015vqqj731d6xbo","tag_id":"cjimjn8k40053vqqjant9vvu2","_id":"cjimjn8k70057vqqjg307y22s"},{"post_id":"cjimjn8i00015vqqj731d6xbo","tag_id":"cjimjn8k50054vqqj5hh337lo","_id":"cjimjn8k70059vqqj7nf7243w"},{"post_id":"cjimjn8i30018vqqjlp55nfye","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8k8005cvqqjsoy81iol"},{"post_id":"cjimjn8i30018vqqjlp55nfye","tag_id":"cjimjn8k70058vqqj6qs2iq75","_id":"cjimjn8k8005dvqqj1h3sl5mn"},{"post_id":"cjimjn8i30018vqqjlp55nfye","tag_id":"cjimjn8k8005avqqjj1g32nx2","_id":"cjimjn8k9005fvqqjgrlqoyxx"},{"post_id":"cjimjn8i6001avqqjqme5yzzn","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8k9005hvqqjpxfwaaft"},{"post_id":"cjimjn8i6001avqqjqme5yzzn","tag_id":"cjimjn8k8005evqqjxslzkpei","_id":"cjimjn8k9005ivqqjw3jp3g6s"},{"post_id":"cjimjn8i8001dvqqjgjh1vtkj","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8kb005mvqqjadt8wfc3"},{"post_id":"cjimjn8i8001dvqqjgjh1vtkj","tag_id":"cjimjn8k9005jvqqj8d6uot6l","_id":"cjimjn8kb005nvqqjgcvrsw69"},{"post_id":"cjimjn8i8001dvqqjgjh1vtkj","tag_id":"cjimjn8ka005kvqqjbvpu3rvx","_id":"cjimjn8kb005pvqqjkg7g4v5h"},{"post_id":"cjimjn8ia001hvqqjbcyzprnx","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8kc005rvqqjshvz5atk"},{"post_id":"cjimjn8ia001hvqqjbcyzprnx","tag_id":"cjimjn8kb005ovqqjep5vwr9g","_id":"cjimjn8kd005svqqjbgpc1r59"},{"post_id":"cjimjn8ib001jvqqj4v67lbi6","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8ke005vvqqjqpswx3uj"},{"post_id":"cjimjn8ib001jvqqj4v67lbi6","tag_id":"cjimjn8kd005tvqqjchwnyi9f","_id":"cjimjn8ke005wvqqjac74x4c6"},{"post_id":"cjimjn8id001nvqqj10m1dcrr","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8kg005zvqqjer9dscl8"},{"post_id":"cjimjn8id001nvqqj10m1dcrr","tag_id":"cjimjn8ke005xvqqjp27xvmip","_id":"cjimjn8kg0060vqqj6bhwizll"},{"post_id":"cjimjn8if001qvqqjwnejc82w","tag_id":"cjimjn8j7003cvqqj89a5y179","_id":"cjimjn8ki0064vqqj9zj5igkx"},{"post_id":"cjimjn8if001qvqqjwnejc82w","tag_id":"cjimjn8kg0061vqqjvkh36gpt","_id":"cjimjn8ki0065vqqj0is56qtf"},{"post_id":"cjimjn8if001qvqqjwnejc82w","tag_id":"cjimjn8kb005ovqqjep5vwr9g","_id":"cjimjn8kj0067vqqjphjo6nie"},{"post_id":"cjimjn8ih001tvqqjlrydtrus","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8kj006avqqjeuqtyxrg"},{"post_id":"cjimjn8ih001tvqqjlrydtrus","tag_id":"cjimjn8ki0066vqqjxaj9nyqz","_id":"cjimjn8kk006bvqqj1qgqoo5e"},{"post_id":"cjimjn8ih001tvqqjlrydtrus","tag_id":"cjimjn8kj0068vqqj79xs2f0w","_id":"cjimjn8kk006dvqqjwk5ro04n"},{"post_id":"cjimjn8ii001wvqqja7ujjdyc","tag_id":"cjimjn8kj0069vqqjd5zu8i51","_id":"cjimjn8kk006fvqqjwofbpwxd"},{"post_id":"cjimjn8ii001wvqqja7ujjdyc","tag_id":"cjimjn8kk006cvqqj70eqhppy","_id":"cjimjn8kk006gvqqjut9klyc6"},{"post_id":"cjimjn8ik0020vqqjopbwm9yk","tag_id":"cjimjn8kk006evqqjuqf6p23k","_id":"cjimjn8kl006ivqqj9lel2au2"},{"post_id":"cjimjn8ik0020vqqjopbwm9yk","tag_id":"cjimjn8h30005vqqj0mscrf4n","_id":"cjimjn8kl006jvqqjo3dm675c"},{"post_id":"cjimjn8im0024vqqjnqiw7mdt","tag_id":"cjimjn8jr004cvqqjlj3t3h31","_id":"cjimjn8km006mvqqjsvougmd4"},{"post_id":"cjimjn8im0024vqqjnqiw7mdt","tag_id":"cjimjn8kl006kvqqj0ter191v","_id":"cjimjn8km006nvqqj0fojk9yq"},{"post_id":"cjimjn8io0027vqqjc3p1jj1h","tag_id":"cjimjn8kl006kvqqj0ter191v","_id":"cjimjn8kn006qvqqjougqv3ok"},{"post_id":"cjimjn8io0027vqqjc3p1jj1h","tag_id":"cjimjn8jr004fvqqjkhyxe8dc","_id":"cjimjn8kn006rvqqj7r7mntmj"},{"post_id":"cjimjn8iq002bvqqj1nfdw3p7","tag_id":"cjimjn8kn006pvqqjzo1abtsk","_id":"cjimjn8ko006vvqqj2z8tro1o"},{"post_id":"cjimjn8iq002bvqqj1nfdw3p7","tag_id":"cjimjn8kn006svqqjoittyc9d","_id":"cjimjn8ko006wvqqjjg63rwdq"},{"post_id":"cjimjn8iq002bvqqj1nfdw3p7","tag_id":"cjimjn8kn006tvqqjlxi7707b","_id":"cjimjn8ko006yvqqj2g8j8zf9"},{"post_id":"cjimjn8is002evqqj4xmsg75n","tag_id":"cjimjn8ko006uvqqjo3o1jypm","_id":"cjimjn8ko006zvqqj2rw5cnf8"},{"post_id":"cjimjn8is002evqqj4xmsg75n","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8kp0071vqqjokuwwt6u"},{"post_id":"cjimjn8iu002jvqqjzdjea30j","tag_id":"cjimjn8ko006xvqqj1ngerlhc","_id":"cjimjn8kp0072vqqjq8nbzvg3"},{"post_id":"cjimjn8iu002jvqqjzdjea30j","tag_id":"cjimjn8ie001pvqqjhw48ampc","_id":"cjimjn8kp0074vqqjnibx93x5"},{"post_id":"cjimjn8iw002lvqqj4ldc3aic","tag_id":"cjimjn8kp0070vqqjolgubcd0","_id":"cjimjn8kp0075vqqj4y0idi80"},{"post_id":"cjimjn8iw002lvqqj4ldc3aic","tag_id":"cjimjn8kp0073vqqj9dujf7by","_id":"cjimjn8kp0076vqqj2brg5wmc"},{"post_id":"cjimjn8lb0077vqqj60icfog5","tag_id":"cjimjn8ii001vvqqjnxvtxq9l","_id":"cjimjn8le007avqqj1d2ozcsg"},{"post_id":"cjimjn8lb0077vqqj60icfog5","tag_id":"cjimjn8ld0078vqqjqrn1affz","_id":"cjimjn8le007bvqqjx7bfkpxf"}],"Tag":[{"name":"设计模式","_id":"cjimjn8h30005vqqj0mscrf4n"},{"name":"组合","_id":"cjimjn8hb000bvqqjyv56mdbk"},{"name":"继承","_id":"cjimjn8hf000gvqqj4ouc2ifv"},{"name":"nodejs","_id":"cjimjn8hk000lvqqjz8lv8qzz"},{"name":"yum","_id":"cjimjn8ho000svqqjogorgqw4"},{"name":"centos","_id":"cjimjn8hw000zvqqj2a5eryoz"},{"name":"elasticsearch","_id":"cjimjn8i00014vqqjqkizhxc8"},{"name":"blog","_id":"cjimjn8i50019vqqjm5jpbuix"},{"name":"golang","_id":"cjimjn8i9001gvqqj0ls1m5dn"},{"name":"gor","_id":"cjimjn8ie001pvqqjhw48ampc"},{"name":"java","_id":"cjimjn8ii001vvqqjnxvtxq9l"},{"name":"des","_id":"cjimjn8im0023vqqjtln7rwre"},{"name":"tour","_id":"cjimjn8iu002ivqqj6qc5ncbu"},{"name":"proxy","_id":"cjimjn8iz002vvqqj9y31n2xy"},{"name":"spring mvc","_id":"cjimjn8j40033vqqjtigin83e"},{"name":"http","_id":"cjimjn8j50036vqqj4ue66w83"},{"name":"json","_id":"cjimjn8j60039vqqjnadnio13"},{"name":"react","_id":"cjimjn8j7003cvqqj89a5y179"},{"name":"jsx","_id":"cjimjn8j9003hvqqj8dugg0py"},{"name":"学习","_id":"cjimjn8ja003mvqqjxnmlgghb"},{"name":"计划","_id":"cjimjn8jb003rvqqj1kt4sl05"},{"name":"复习","_id":"cjimjn8jc003uvqqjh5k89dxn"},{"name":"learn","_id":"cjimjn8jd003wvqqjsb7tf7sr"},{"name":"总结","_id":"cjimjn8je003yvqqjkfjvlrd3"},{"name":"linux","_id":"cjimjn8jf003zvqqjsrrmf8h5"},{"name":"centos7","_id":"cjimjn8jg0042vqqj3s524pdb"},{"name":"lvs","_id":"cjimjn8jh0045vqqjt5mhjan0"},{"name":"lvm","_id":"cjimjn8jn0047vqqjc02c45g9"},{"name":"fdisk","_id":"cjimjn8jp0048vqqjdidve11w"},{"name":"mongodb","_id":"cjimjn8jq0049vqqjqt9wuj0x"},{"name":"markdown","_id":"cjimjn8jr004cvqqjlj3t3h31"},{"name":"config","_id":"cjimjn8jr004fvqqjkhyxe8dc"},{"name":"nexus","_id":"cjimjn8js004ivqqjh57tri6f"},{"name":"maven","_id":"cjimjn8jt004lvqqj9gfl11j0"},{"name":"nginx","_id":"cjimjn8jv004pvqqjcwrvgx0j"},{"name":"chkconfig","_id":"cjimjn8jw004qvqqjtqs2rk8l"},{"name":"falcon","_id":"cjimjn8jx004rvqqjjoyerz9u"},{"name":"gralcon","_id":"cjimjn8jy004uvqqjvfqp3pmf"},{"name":"python","_id":"cjimjn8k0004wvqqjb0a435j6"},{"name":"protobuf","_id":"cjimjn8k1004zvqqju1abcs15"},{"name":"component","_id":"cjimjn8k40053vqqjant9vvu2"},{"name":"props","_id":"cjimjn8k50054vqqj5hh337lo"},{"name":"render","_id":"cjimjn8k70058vqqj6qs2iq75"},{"name":"conditional","_id":"cjimjn8k8005avqqjj1g32nx2"},{"name":"event","_id":"cjimjn8k8005evqqjxslzkpei"},{"name":"list","_id":"cjimjn8k9005jvqqj8d6uot6l"},{"name":"keys","_id":"cjimjn8ka005kvqqjbvpu3rvx"},{"name":"state","_id":"cjimjn8kb005ovqqjep5vwr9g"},{"name":"js","_id":"cjimjn8kd005tvqqjchwnyi9f"},{"name":"redux","_id":"cjimjn8ke005xvqqjp27xvmip"},{"name":"lifecycle","_id":"cjimjn8kg0061vqqjvkh36gpt"},{"name":"rpc","_id":"cjimjn8ki0066vqqjxaj9nyqz"},{"name":"socket","_id":"cjimjn8kj0068vqqj79xs2f0w"},{"name":"转载","_id":"cjimjn8kj0069vqqjd5zu8i51"},{"name":"stack","_id":"cjimjn8kk006cvqqj70eqhppy"},{"name":"oop","_id":"cjimjn8kk006evqqjuqf6p23k"},{"name":"sublime","_id":"cjimjn8kl006kvqqj0ter191v"},{"name":"scrum","_id":"cjimjn8kn006pvqqjzo1abtsk"},{"name":"敏捷","_id":"cjimjn8kn006svqqjoittyc9d"},{"name":"taiga","_id":"cjimjn8kn006tvqqjlxi7707b"},{"name":"微信公众平台","_id":"cjimjn8ko006uvqqjo3o1jypm"},{"name":"travis","_id":"cjimjn8ko006xvqqj1ngerlhc"},{"name":"javascript","_id":"cjimjn8kp0070vqqjolgubcd0"},{"name":"html","_id":"cjimjn8kp0073vqqj9dujf7by"},{"name":"规范","_id":"cjimjn8ld0078vqqjqrn1affz"}]}}